{
  "data": {
    "news": [{
      "title": "React and ag-Grid - the Perfect Match",
      "pubDate": "2016-01-28",
      "link": "https://reactjsnews.com/react-and-ag-grid",
      "guid": "https://reactjsnews.com/react-and-ag-grid",
      "author": "",
      "thumbnail": "",
      "description": "<h3 id=\"and-react\">And React?</h3><p>Now ag-Grid is providing an optional React component and React rendering. ag-Grd is fully in bed with React and treats React as a first class component - meaning if you are using React, ag-Grid is NOT using any other framework to get the job done.</p><p>React Components follow standard DOM interaction patterns using properties, events (callbacks) and an optional API for interacting with the components. React also uses immutability to assist state management. ag-Grid uses the same principles. ag-Grid’s core interface maps directly onto what is required by React making ag-Grid and React match perfectly.</p><p>To demonstrate, lets break down the provided <a href=\"https://github.com/ceolter/ag-grid-react-example\">example React and ag-Grid on Github</a>. (note: the example can be found running <a href=\"https://www.ag-grid.com/best-react-grid/index.php\">here</a>)</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span> <span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"c1\">// listen for events with React callbacks</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"c1\">// binding to properties within React State or Props</span><span class=\"nx\">showToolPanel</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">showToolPanel</span><span class=\"p\">}</span><span class=\"nx\">quickFilterText</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">quickFilterText</span><span class=\"p\">}</span><span class=\"nx\">icons</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">icons</span><span class=\"p\">}</span><span class=\"c1\">// column definitions and row data are immutable, the grid</span><span class=\"c1\">// will update when these lists change</span><span class=\"nx\">columnDefs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">columnDefs</span><span class=\"p\">}</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"c1\">// or provide props the old way with no binding</span><span class=\"nx\">rowSelection</span><span class=\"o\">=</span><span class=\"s2\">\"multiple\"</span><span class=\"nx\">enableSorting</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">enableFilter</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">rowHeight</span><span class=\"o\">=</span><span class=\"s2\">\"22\"</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><h3 id=\"component\">Component</h3><p>The AgGridReact class is the React Component that provides the interface into ag-Grid.</p><h3 id=\"configuration-mapped-to-props\">Configuration mapped to Props</h3><p>All of the configuration for ag-Grid is done through React props, as always taking values from the parent state and props. For example, the data to display is provided as the rowData property:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-properties/index.php\">properties documentation</a> for all the properties.</p><p>ag-Grid, behaving like a typical React application, treats rowData as immutable. So when you replace the rowData with a new array of data, the grid will pick this up automatically.</p><h3 id=\"events-mapped-to-callbacks\">Events mapped to Callbacks</h3><p>The ag-Grid component generates events to inform when things happen in the grid, such as rows are selected, cells are clicked etc. These events map onto React callbacks when you provide the callback through one of the props.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span> <span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-events/index.php\">events documentation</a> for all the events.</p><h3 id=\"api\">API</h3><p>The grid is a stateful component and needs to allow you to change it’s state. For example, the grid keeps state as to what rows are selected, and you need to tell it to change this state by telling it what rows to select. To do this, you use the grid’s API.</p><p>When the grid initialises it fires a ‘ready’ event that, as well as telling you the grid is ready, provides you with a reference to the API.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onReady</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">//store the api</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"c1\">// then sometime  later</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span><span class=\"p\">.</span><span class=\"nx\">selectAll</span><span class=\"p\">();</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/angular-grid-api/index.php\">API documentation</a> for the full API.</p><h3 id=\"in-grid-rendering\">In Grid Rendering</h3><p>And then ag-Grid then goes further, it embraces React for rendering. That means you can use React for custom cell rendering inside the grid. You provide ag-Grid with the React component and it knows what to do with to seamlessly integrate.</p><p>The following shows the skills cellRenderer from the sample application. As you can see, it’s pure React, short, to the point, compact, nice!</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">SkillsCellRenderer</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">skills</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"kd\">var</span> <span class=\"nx\">rowData</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span><span class=\"nx\">RefData</span><span class=\"p\">.</span><span class=\"nx\">IT_SKILLS</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nx\">skill</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rowData</span><span class=\"p\">.</span><span class=\"nx\">skills</span><span class=\"p\">[</span><span class=\"nx\">skill</span><span class=\"p\">])</span> <span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'images/skills/'</span> <span class=\"o\">+</span> <span class=\"nx\">skill</span> <span class=\"o\">+</span> <span class=\"s1\">'.png'</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">16</span><span class=\"p\">}</span> <span class=\"nx\">title</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;</span><span class=\"err\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><h3 id=\"summary\">Summary</h3><p>ag-Grid and React match up perfectly, giving you an enterprise data grid for use inside you React application.</p><p>To find out more about ag-Grid, visit <a href=\"http://www.ag-grid.com/\">www.ag-grid.com</a>",
      "content": "<h3 id=\"and-react\">And React?</h3><p>Now ag-Grid is providing an optional React component and React rendering. ag-Grd is fully in bed with React and treats React as a first class component - meaning if you are using React, ag-Grid is NOT using any other framework to get the job done.</p><p>React Components follow standard DOM interaction patterns using properties, events (callbacks) and an optional API for interacting with the components. React also uses immutability to assist state management. ag-Grid uses the same principles. ag-Grid’s core interface maps directly onto what is required by React making ag-Grid and React match perfectly.</p><p>To demonstrate, lets break down the provided <a href=\"https://github.com/ceolter/ag-grid-react-example\">example React and ag-Grid on Github</a>. (note: the example can be found running <a href=\"https://www.ag-grid.com/best-react-grid/index.php\">here</a>)</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span> <span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"c1\">// listen for events with React callbacks</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"c1\">// binding to properties within React State or Props</span><span class=\"nx\">showToolPanel</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">showToolPanel</span><span class=\"p\">}</span><span class=\"nx\">quickFilterText</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">quickFilterText</span><span class=\"p\">}</span><span class=\"nx\">icons</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">icons</span><span class=\"p\">}</span><span class=\"c1\">// column definitions and row data are immutable, the grid</span><span class=\"c1\">// will update when these lists change</span><span class=\"nx\">columnDefs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">columnDefs</span><span class=\"p\">}</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"c1\">// or provide props the old way with no binding</span><span class=\"nx\">rowSelection</span><span class=\"o\">=</span><span class=\"s2\">\"multiple\"</span><span class=\"nx\">enableSorting</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">enableFilter</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">rowHeight</span><span class=\"o\">=</span><span class=\"s2\">\"22\"</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><h3 id=\"component\">Component</h3><p>The AgGridReact class is the React Component that provides the interface into ag-Grid.</p><h3 id=\"configuration-mapped-to-props\">Configuration mapped to Props</h3><p>All of the configuration for ag-Grid is done through React props, as always taking values from the parent state and props. For example, the data to display is provided as the rowData property:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-properties/index.php\">properties documentation</a> for all the properties.</p><p>ag-Grid, behaving like a typical React application, treats rowData as immutable. So when you replace the rowData with a new array of data, the grid will pick this up automatically.</p><h3 id=\"events-mapped-to-callbacks\">Events mapped to Callbacks</h3><p>The ag-Grid component generates events to inform when things happen in the grid, such as rows are selected, cells are clicked etc. These events map onto React callbacks when you provide the callback through one of the props.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span> <span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-events/index.php\">events documentation</a> for all the events.</p><h3 id=\"api\">API</h3><p>The grid is a stateful component and needs to allow you to change it’s state. For example, the grid keeps state as to what rows are selected, and you need to tell it to change this state by telling it what rows to select. To do this, you use the grid’s API.</p><p>When the grid initialises it fires a ‘ready’ event that, as well as telling you the grid is ready, provides you with a reference to the API.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onReady</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">//store the api</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"c1\">// then sometime  later</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span><span class=\"p\">.</span><span class=\"nx\">selectAll</span><span class=\"p\">();</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/angular-grid-api/index.php\">API documentation</a> for the full API.</p><h3 id=\"in-grid-rendering\">In Grid Rendering</h3><p>And then ag-Grid then goes further, it embraces React for rendering. That means you can use React for custom cell rendering inside the grid. You provide ag-Grid with the React component and it knows what to do with to seamlessly integrate.</p><p>The following shows the skills cellRenderer from the sample application. As you can see, it’s pure React, short, to the point, compact, nice!</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">SkillsCellRenderer</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">skills</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"kd\">var</span> <span class=\"nx\">rowData</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span><span class=\"nx\">RefData</span><span class=\"p\">.</span><span class=\"nx\">IT_SKILLS</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nx\">skill</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rowData</span><span class=\"p\">.</span><span class=\"nx\">skills</span><span class=\"p\">[</span><span class=\"nx\">skill</span><span class=\"p\">])</span> <span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'images/skills/'</span> <span class=\"o\">+</span> <span class=\"nx\">skill</span> <span class=\"o\">+</span> <span class=\"s1\">'.png'</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">16</span><span class=\"p\">}</span> <span class=\"nx\">title</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;</span><span class=\"err\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><h3 id=\"summary\">Summary</h3><p>ag-Grid and React match up perfectly, giving you an enterprise data grid for use inside you React application.</p><p>To find out more about ag-Grid, visit <a href=\"http://www.ag-grid.com/\">www.ag-grid.com</a>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Bring your animations to life with physics",
      "pubDate": "2016-01-13",
      "link": "https://reactjsnews.com/bring-your-animations-to-life-with-physics",
      "guid": "https://reactjsnews.com/bring-your-animations-to-life-with-physics",
      "author": "",
      "thumbnail": "",
      "description": "<h4 id=\"getting-started-with-animations\">Getting started with animations</h4> <p>To animate is to transition the user interface from one display to another. Animation enhances user experience, providing feeback to user actions and making screens that haven’t been introduced before easier to understand.</p> <p>An example can be seen with this <a href=\"http://www.material-ui.com/#/components/date-picker\">React Material UI datepicker</a>. The animations respond to user input and inform the user with transitions that show they are moving back or forward when they change month or select a date.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336337/ede568fe-bb68-11e5-8750-7cf50c46a7c7.gif\" alt=\"materialpicker\"></p> <p>This post will compare using CSS transitions based on time against using spring phsyics to animate transitions. We will use the example of transitioning a box from left to right (You could imagine this being a month view in a calendar that we slide in and out of view).</p> <script src=\"http://codepen.io/assets/embed/ei.js\"></script><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><h4 id=\"example-with-no-animation\">Example with no Animation</h4> <p>We will build on this example which doesn’t have any animation. Without animation the transition is jarring and doesn’t show the user where the item is moving from and to. Look at the code in the Babel tab and see that we use transform: translateX rather than setting the left position because left, top, right, bottom are positioned by the CPU and cause a repaint while items using translate are positioned by the GPU and therefore more performant.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"GoEKLN\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/GoEKLN\">Check out this Pen!</a> </pre> <h4 id=\"using-timed-css-animations\">Using timed CSS animations</h4> <p>A CSS transition can be added to the properties of an element with the CSS transition property. Per the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/transition\">Mozilla docs for transition</a>, we can pass the duration we want the transition to take and a cubic bezier timing function. In this case I have set the duration to 0.5s and used the default timing function of ease.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"xZrZJp\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/xZrZJp\">Check out this Pen!</a> </pre> <h4 id=\"cubic-bezier\">Cubic Bezier</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12335516/79b72d54-bb64-11e5-8fbe-b2a9e6715ea9.png\" alt=\"Cubic Bezier Curve\"></p> <p>A cubic bezier curve is a timing function that starts at position 0 and time 0 and ends at 1,1. It accepts four arguments (x1, y1, x2, y2), which are the two control points to determine the shape of the curve. As you can see above, the ease function accelerates at the start and then decelerates at the middle, causing the animation to ‘ease’ as it finishes. The ease function is just shorthand for cubic-bezier(0.25,0.1,0.25,1). If you want to prove this, re-run this example after changing line 18 to:</p> <div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">transition</span><span class=\"err\">:</span> <span class=\"s1\">'0.5s cubic-bezier(0.25, 0.1, 0.25, 1)'</span></code></pre> </div> <p>The <a href=\"http://cubic-bezier.com/\">cubic bezier site by Lea Verou</a> is a great resource for experimenting with different timing functions. Below I have compared a linear function against the ease function.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336020/f5c3568c-bb66-11e5-84e8-762a41ba4d58.gif\" alt=\"cubicbeziercom\"></p> <p>Chrome dev tools allow you to experiment with different curves and also control the speed of animations as seen below.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336063/4134261e-bb67-11e5-8bbd-4981028659a7.gif\" alt=\"chromebez\"></p> <h4 id=\"why-you-should-use-spring-physics-in-animations\">Why you should use spring physics in animations</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336758/ff68ac10-bb6a-11e5-9560-15737d665b4d.gif\" alt=\"damped_spring\"></p> <p>As cubic bezier functions only give you two points of control, it doesn’t give the developer enough control to model real life movement. However, by controlling the animation with Javascript, we have full control and can use Hooke’s law which expresses how springs extends and contract. Spring animation is already very popular and can be used to provide lively animations in iOS core animation, and in Facebook’s Pop and Rebound libraries.</p> <p>Look at the cubic bezier animations on the left taken from <a href=\"http://framerjs.com/learn/basics/animation/\">framerjs</a>, compared with the spring animation on the right. The spring animation has a bounce effect - which is not possible with a cubic bezier function. You could acheive this animation with CSS by using key frames, but you would have to hard code the key frame values and duration of the animation.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12362208/f52638fa-bc26-11e5-895e-59c0ad611928.gif\" alt=\"framer\"></p> <p>React Motion implements a terse API for you to use spring animation which can be used on the web and with React Native. You have the option to specify the start value (in this case, 0) and the spring physics values you want to animate to. React Motion runs in a request animation frame. The Motion component will keep calling your function to render your animated component with a style object that has the calculated values for each frame. In the example below I have destructured the x property and rendered it in the component.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"EPwWOg\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/EPwWOg\">Check out this Pen!</a> </pre> <h5 id=\"continuous-fluid-interfaces\">Continuous fluid interfaces</h5> <p>In the excellent talk on the <a href=\"https://www.youtube.com/watch?v=1tavDv5hXpo\">state animation in React</a>, Cheng Lou, the creator, highlighted a quote from a former UIKit engineer at Apple.</p>  <p>In the talk, Cheng used an example of animating an opening menu to illustrate this point - “For example, if you have a menu deploy animation that takes 500 milliseconds, and half-way the user clicks on something, and you toggle it back to its initial hidden state, why should this way back also be 500 milliseconds? And also, what should the curve be: ease-in, linear? It is not very clear”.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12363885/3f87eebc-bc30-11e5-9ceb-40e2ad34700f.gif\" alt=\"calendardemosmall\"></p> <p>The need for a fluid interface is what made me look into react-motion. We are currently building a calendar at <a href=\"http://fergusapp.com/\">Fergus</a> which requires the ability to respond to drag events and clicks moving the calendar in different directions and by different distances. When we prototyped this with CSS transitions, it was janky and felt slow.</p> <p>Compare how fluid the spring motion animation is against the CSS animations by clicking the ‘Run animation’ button multiple times in quick succession.</p> <pre class=\"codepen\" data-height=\"450\" data-type=\"result\" data-href=\"dGVvEJ\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/dGVvEJ\">Check out this Pen!</a> </pre> <h4 id=\"configuring-react-motion\">Configuring React Motion</h4> <p>The React Motion spring takes two arguments: stiffness and damping (which defaut to 120 and 17, respectively). Four <a href=\"https://github.com/chenglou/react-motion/blob/master/src/presets.js\">presets</a> are provided: noWobble, gentle, wobbly, and stiff. By adjusting the stiffness and damping below, you can watch how these factors change the animation.</p> <pre class=\"codepen\" data-height=\"300\" data-type=\"result\" data-href=\"OMxmQL\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/OMxmQL\">Check out this Pen!</a> </pre> <h4 id=\"when-to-use-css-animations\">When to use CSS Animations</h4> <p>As Cheng said in his talk, CSS animations are better for animations that you don’t want to stop or adjust after they are triggered - such as Twitter’s exploding heart animation. This is because CSS animations are more performant. React Motion does incur the cost of having your app re-rendered every animation frame which could be a problem if your application is not performant.</p>",
      "content": "<h4 id=\"getting-started-with-animations\">Getting started with animations</h4> <p>To animate is to transition the user interface from one display to another. Animation enhances user experience, providing feeback to user actions and making screens that haven’t been introduced before easier to understand.</p> <p>An example can be seen with this <a href=\"http://www.material-ui.com/#/components/date-picker\">React Material UI datepicker</a>. The animations respond to user input and inform the user with transitions that show they are moving back or forward when they change month or select a date.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336337/ede568fe-bb68-11e5-8750-7cf50c46a7c7.gif\" alt=\"materialpicker\"></p> <p>This post will compare using CSS transitions based on time against using spring phsyics to animate transitions. We will use the example of transitioning a box from left to right (You could imagine this being a month view in a calendar that we slide in and out of view).</p> <script src=\"http://codepen.io/assets/embed/ei.js\"></script><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><h4 id=\"example-with-no-animation\">Example with no Animation</h4> <p>We will build on this example which doesn’t have any animation. Without animation the transition is jarring and doesn’t show the user where the item is moving from and to. Look at the code in the Babel tab and see that we use transform: translateX rather than setting the left position because left, top, right, bottom are positioned by the CPU and cause a repaint while items using translate are positioned by the GPU and therefore more performant.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"GoEKLN\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/GoEKLN\">Check out this Pen!</a> </pre> <h4 id=\"using-timed-css-animations\">Using timed CSS animations</h4> <p>A CSS transition can be added to the properties of an element with the CSS transition property. Per the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/transition\">Mozilla docs for transition</a>, we can pass the duration we want the transition to take and a cubic bezier timing function. In this case I have set the duration to 0.5s and used the default timing function of ease.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"xZrZJp\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/xZrZJp\">Check out this Pen!</a> </pre> <h4 id=\"cubic-bezier\">Cubic Bezier</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12335516/79b72d54-bb64-11e5-8fbe-b2a9e6715ea9.png\" alt=\"Cubic Bezier Curve\"></p> <p>A cubic bezier curve is a timing function that starts at position 0 and time 0 and ends at 1,1. It accepts four arguments (x1, y1, x2, y2), which are the two control points to determine the shape of the curve. As you can see above, the ease function accelerates at the start and then decelerates at the middle, causing the animation to ‘ease’ as it finishes. The ease function is just shorthand for cubic-bezier(0.25,0.1,0.25,1). If you want to prove this, re-run this example after changing line 18 to:</p> <div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">transition</span><span class=\"err\">:</span> <span class=\"s1\">'0.5s cubic-bezier(0.25, 0.1, 0.25, 1)'</span></code></pre> </div> <p>The <a href=\"http://cubic-bezier.com/\">cubic bezier site by Lea Verou</a> is a great resource for experimenting with different timing functions. Below I have compared a linear function against the ease function.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336020/f5c3568c-bb66-11e5-84e8-762a41ba4d58.gif\" alt=\"cubicbeziercom\"></p> <p>Chrome dev tools allow you to experiment with different curves and also control the speed of animations as seen below.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336063/4134261e-bb67-11e5-8bbd-4981028659a7.gif\" alt=\"chromebez\"></p> <h4 id=\"why-you-should-use-spring-physics-in-animations\">Why you should use spring physics in animations</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336758/ff68ac10-bb6a-11e5-9560-15737d665b4d.gif\" alt=\"damped_spring\"></p> <p>As cubic bezier functions only give you two points of control, it doesn’t give the developer enough control to model real life movement. However, by controlling the animation with Javascript, we have full control and can use Hooke’s law which expresses how springs extends and contract. Spring animation is already very popular and can be used to provide lively animations in iOS core animation, and in Facebook’s Pop and Rebound libraries.</p> <p>Look at the cubic bezier animations on the left taken from <a href=\"http://framerjs.com/learn/basics/animation/\">framerjs</a>, compared with the spring animation on the right. The spring animation has a bounce effect - which is not possible with a cubic bezier function. You could acheive this animation with CSS by using key frames, but you would have to hard code the key frame values and duration of the animation.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12362208/f52638fa-bc26-11e5-895e-59c0ad611928.gif\" alt=\"framer\"></p> <p>React Motion implements a terse API for you to use spring animation which can be used on the web and with React Native. You have the option to specify the start value (in this case, 0) and the spring physics values you want to animate to. React Motion runs in a request animation frame. The Motion component will keep calling your function to render your animated component with a style object that has the calculated values for each frame. In the example below I have destructured the x property and rendered it in the component.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"EPwWOg\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/EPwWOg\">Check out this Pen!</a> </pre> <h5 id=\"continuous-fluid-interfaces\">Continuous fluid interfaces</h5> <p>In the excellent talk on the <a href=\"https://www.youtube.com/watch?v=1tavDv5hXpo\">state animation in React</a>, Cheng Lou, the creator, highlighted a quote from a former UIKit engineer at Apple.</p>  <p>In the talk, Cheng used an example of animating an opening menu to illustrate this point - “For example, if you have a menu deploy animation that takes 500 milliseconds, and half-way the user clicks on something, and you toggle it back to its initial hidden state, why should this way back also be 500 milliseconds? And also, what should the curve be: ease-in, linear? It is not very clear”.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12363885/3f87eebc-bc30-11e5-9ceb-40e2ad34700f.gif\" alt=\"calendardemosmall\"></p> <p>The need for a fluid interface is what made me look into react-motion. We are currently building a calendar at <a href=\"http://fergusapp.com/\">Fergus</a> which requires the ability to respond to drag events and clicks moving the calendar in different directions and by different distances. When we prototyped this with CSS transitions, it was janky and felt slow.</p> <p>Compare how fluid the spring motion animation is against the CSS animations by clicking the ‘Run animation’ button multiple times in quick succession.</p> <pre class=\"codepen\" data-height=\"450\" data-type=\"result\" data-href=\"dGVvEJ\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/dGVvEJ\">Check out this Pen!</a> </pre> <h4 id=\"configuring-react-motion\">Configuring React Motion</h4> <p>The React Motion spring takes two arguments: stiffness and damping (which defaut to 120 and 17, respectively). Four <a href=\"https://github.com/chenglou/react-motion/blob/master/src/presets.js\">presets</a> are provided: noWobble, gentle, wobbly, and stiff. By adjusting the stiffness and damping below, you can watch how these factors change the animation.</p> <pre class=\"codepen\" data-height=\"300\" data-type=\"result\" data-href=\"OMxmQL\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/OMxmQL\">Check out this Pen!</a> </pre> <h4 id=\"when-to-use-css-animations\">When to use CSS Animations</h4> <p>As Cheng said in his talk, CSS animations are better for animations that you don’t want to stop or adjust after they are triggered - such as Twitter’s exploding heart animation. This is because CSS animations are more performant. React Motion does incur the cost of having your app re-rendered every animation frame which could be a problem if your application is not performant.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Is There a React Equivalent for Angular’s ng-repeat?",
      "pubDate": "2016-1-3",
      "link": "https://reactjsnews.com/NgRepeat-Equivalent-in-React",
      "guid": "https://reactjsnews.com/NgRepeat-Equivalent-in-React",
      "author": "",
      "thumbnail": "",
      "description": "<p>This post originally appeared on my <a href=\"http://angulartoreact.com/ng-repeat-react-equivalent\">Angular to React</a> site where you’ll find more resources like this to help Angular Developers get up to speed quickly on React.</p><h1 id=\"is-there-a-react-equivalent-for-angulars-ng-repeat\">Is There a React Equivalent for Angular’s ng-repeat?</h1><h4 id=\"yes-react-doesnt-use-a-proprietary-construct-to-iterate-over-a-collection-of-data-instead-it-relies-on-native-javascript-iterators-to-generate-repeating-blocks-of-ui-keep-reading-below-for-code-samples-and-further-explanation\">Yes. React doesn’t use a proprietary construct to iterate over a collection of data. Instead, it relies on native Javascript iterators to generate repeating blocks of UI. Keep reading below for code samples and further explanation.</h4><p>If you’ve been developing Angular applications for any amount of time, you’ve likely used the <code class=\"highlighter-rouge\">ng-repeat</code> directive. Generating repeating blocks of UI from a data structure is a cornerstone of web development regardless of language or framework.</p><p>The AngularJS team wrapped up a really convenient and powerful piece of iterative magic in the <code class=\"highlighter-rouge\">ng-repeat</code> directive. With very little code, you can create dynamic lists that stay in sync with a collection of data. Just so we’re on the same page, here’s what the Angular code looks like:</p><h5 id=\"angularjs-code-sample-for-ng-repeat\">AngularJS Code Sample for <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>Assume you have an array like this:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Matthew\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mat.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Mark\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mrk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Luke\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/luk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/jhn.1\"</span> <span class=\"p\">}</span><span class=\"p\">];</span></code></pre></div><p>In Angular 1.x, to create a <code class=\"highlighter-rouge\">ul</code> with an <code class=\"highlighter-rouge\">li</code> for each item in the array you would put the following code in your controller:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s2\">\"NgRepeatDemoCtrl\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>Then, in your view, you could use the <code class=\"highlighter-rouge\">ng-repeat</code> directive like this:</p><div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span><span class=\"nt\">&lt;li</span> <span class=\"na\">ng-repeat=</span><span class=\"s\">\"item in items\"</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;a</span> <span class=\"na\">ng-href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;/a&gt;</span><span class=\"nt\">&lt;/li&gt;</span><span class=\"nt\">&lt;/ul&gt;</span></code></pre></div><h5 id=\"react-alternative-to-ng-repeat\">React Alternative to <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>To perform the same task in React you just need to think natively. Under the hood <code class=\"highlighter-rouge\">ng-repeat</code> is just using a native Javascript iterator. You can use the same sort of native iterator directly in React. For just example, I’ll use <code class=\"highlighter-rouge\">Array.map</code>. Here’s an example:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">RepeatModule</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">getDefaultProps</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">}</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"s2\">\"{item.name}\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"{item.link}\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>In this example, <code class=\"highlighter-rouge\">Array.map</code> iterates through every item contained in <code class=\"highlighter-rouge\">items</code> and executes a function that returns a DOM element. <em>(Technically, it’s a virtual DOM element, but that’s a different discussion.)</em> &nbsp; Every <code class=\"highlighter-rouge\">li</code> that is returned from inside of the map function gets added to a new array and finally returned as the value of the <code class=\"highlighter-rouge\">Array.map()</code> function. The result of that function is stored in the <code class=\"highlighter-rouge\">listItems</code> variable. When React calls the render method on our component, we generate an array of list items and then insert them into our <code class=\"highlighter-rouge\">ul</code> using a single pair of enclosing curly braces.</p><h5 id=\"try-it-out-yourself-using-this-jsfiddle\">Try It Out Yourself Using <a href=\"http://jsfiddle.net/zqef96hu/2/\">This JSFiddle</a></h5>",
      "content": "<p>This post originally appeared on my <a href=\"http://angulartoreact.com/ng-repeat-react-equivalent\">Angular to React</a> site where you’ll find more resources like this to help Angular Developers get up to speed quickly on React.</p><h1 id=\"is-there-a-react-equivalent-for-angulars-ng-repeat\">Is There a React Equivalent for Angular’s ng-repeat?</h1><h4 id=\"yes-react-doesnt-use-a-proprietary-construct-to-iterate-over-a-collection-of-data-instead-it-relies-on-native-javascript-iterators-to-generate-repeating-blocks-of-ui-keep-reading-below-for-code-samples-and-further-explanation\">Yes. React doesn’t use a proprietary construct to iterate over a collection of data. Instead, it relies on native Javascript iterators to generate repeating blocks of UI. Keep reading below for code samples and further explanation.</h4><p>If you’ve been developing Angular applications for any amount of time, you’ve likely used the <code class=\"highlighter-rouge\">ng-repeat</code> directive. Generating repeating blocks of UI from a data structure is a cornerstone of web development regardless of language or framework.</p><p>The AngularJS team wrapped up a really convenient and powerful piece of iterative magic in the <code class=\"highlighter-rouge\">ng-repeat</code> directive. With very little code, you can create dynamic lists that stay in sync with a collection of data. Just so we’re on the same page, here’s what the Angular code looks like:</p><h5 id=\"angularjs-code-sample-for-ng-repeat\">AngularJS Code Sample for <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>Assume you have an array like this:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Matthew\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mat.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Mark\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mrk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Luke\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/luk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/jhn.1\"</span> <span class=\"p\">}</span><span class=\"p\">];</span></code></pre></div><p>In Angular 1.x, to create a <code class=\"highlighter-rouge\">ul</code> with an <code class=\"highlighter-rouge\">li</code> for each item in the array you would put the following code in your controller:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s2\">\"NgRepeatDemoCtrl\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>Then, in your view, you could use the <code class=\"highlighter-rouge\">ng-repeat</code> directive like this:</p><div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span><span class=\"nt\">&lt;li</span> <span class=\"na\">ng-repeat=</span><span class=\"s\">\"item in items\"</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;a</span> <span class=\"na\">ng-href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;/a&gt;</span><span class=\"nt\">&lt;/li&gt;</span><span class=\"nt\">&lt;/ul&gt;</span></code></pre></div><h5 id=\"react-alternative-to-ng-repeat\">React Alternative to <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>To perform the same task in React you just need to think natively. Under the hood <code class=\"highlighter-rouge\">ng-repeat</code> is just using a native Javascript iterator. You can use the same sort of native iterator directly in React. For just example, I’ll use <code class=\"highlighter-rouge\">Array.map</code>. Here’s an example:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">RepeatModule</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">getDefaultProps</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">}</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"s2\">\"{item.name}\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"{item.link}\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>In this example, <code class=\"highlighter-rouge\">Array.map</code> iterates through every item contained in <code class=\"highlighter-rouge\">items</code> and executes a function that returns a DOM element. <em>(Technically, it’s a virtual DOM element, but that’s a different discussion.)</em> &nbsp; Every <code class=\"highlighter-rouge\">li</code> that is returned from inside of the map function gets added to a new array and finally returned as the value of the <code class=\"highlighter-rouge\">Array.map()</code> function. The result of that function is stored in the <code class=\"highlighter-rouge\">listItems</code> variable. When React calls the render method on our component, we generate an array of list items and then insert them into our <code class=\"highlighter-rouge\">ul</code> using a single pair of enclosing curly braces.</p><h5 id=\"try-it-out-yourself-using-this-jsfiddle\">Try It Out Yourself Using <a href=\"http://jsfiddle.net/zqef96hu/2/\">This JSFiddle</a></h5>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Using and Testing the Facebook API with React and Flux",
      "pubDate": "2015-12-05",
      "link": "https://reactjsnews.com/using-the-facebook-graph-api-with-react-and-flux",
      "guid": "https://reactjsnews.com/using-the-facebook-graph-api-with-react-and-flux",
      "author": "",
      "thumbnail": "",
      "description": "<p><strong>Clone the example code:</strong></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone git@github.com:subyraman/react-flux-facebook-api-example.git</code></pre></div><p><strong>Check out the running example at: http://reactfluxfbapi.herokuapp.com</strong></p><p>For giving us React and Flux, I’ve seen relatively little about integrating Facebook’s own Graph API with their development tools. The tools are so new that there’s precious little instruction out there about how to answer questions that are easier to answer with other architectures, like:</p><ul><li>Where do all those asynchronous API calls go?</li><li>How do I send the results of those API calls to the React component?</li><li>The Facebook API is available as a global object, but how do I test that in a headless Node environment?</li></ul><p>This sample code shows a possible model for integrating the Facebook Graph API with a React app, and provides a test suite that allows us to test these components in isolation.</p><p>First, let’s take a look at what the Flux architecture typically looks like.</p><p><img src=\"http://i.imgur.com/C3o9SaQ.png\" alt=\"Flux architecture\"></p><p>Though it took me a little while to understand, Flux seems to want us to rock the following model:</p><ul><li>1) API calls are handled in the Action Creators. When we want new data, a view component calls on an Action Creator.</li><li>2) We wait for the response from a remote server, then sends the data along with an Action Type (a type of signal) to the Dispatcher.</li><li>3) The Dispatcher passes the signal and data on to the appropriate Store.</li><li>4) The Store, well, stores the data we received. When data is updated, we emit an event.</li><li>5) This event from the Store is picked up by our view components. Our view components access data from the store, and render it out into beautiful HTML.</li></ul><p>The key thing here is that <strong>data flow is unidirectional</strong>. The View Component must not receive data directly from the Action Creator API, it must proceed to the Store (via the dispatcher), and then on to the View. This keeps our data stream organized and all of our components in sync with the data state.</p><p>Let’s dig into the code a little bit. I’ll show, as an example, how to log in a user to the Facebook API and render out that status.</p><h2 id=\"the-facebook-login-component\">The Facebook Login Component</h2><p>The component is simple, as it should be. It should not contain complex logic or data handling. They’re meant to be dumb, and treat them that way.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';class FacebookLogin extends React.Component {constructor(props) {super(props);}render() {return (&lt;button ref=\"loginButton\" onClick={this.didClickFacebookLoginButton}&gt;Log Into Facebook&lt;/button&gt;);}didClickFacebookLoginButton(e) {FacebookActionCreators.login()}}export default FacebookLogin;</code></pre></div><h2 id=\"the-action-creators\">The Action Creators</h2><p>For our Action Creators, we want to wrap the API and when we receive a response, we dispatch an <code class=\"highlighter-rouge\">actionType</code> along with the data. This frees us from having to use promises to return asychronous data; instead we use clearly defined signals that correspond to our action.</p><p>This is a simplistic example; we aren’t handling error cases, for example. When the user logs into Facebook, it relays the response data to the dispatcher, which contains information about the user’s id, the access token, and other information.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>login: () =&gt; {window.FB.login((response) =&gt; {if (response.status === 'connected') {FacebookDispatcher.dispatch({actionType: Constants.FACEBOOK_LOGGED_IN,data: response})}});},</code></pre></div><h3 id=\"the-dispatcher\">The Dispatcher</h3><p>It is nothing special. Flux contains all of the logic within the dispatcher, so it doesn’t need any special configuration. Just keep in mind that it is a singleton, and that there is only one instance of it in your app.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import {Dispatcher} from 'flux';const FacebookDispatcher = new Dispatcher();module.exports = FacebookDispatcher;</code></pre></div><h3 id=\"the-store\">The Store</h3><p>For the store, Flux suggests you extend the <code class=\"highlighter-rouge\">EventEmitter</code> module, which, as the name suggests, allows us to emit events to components that subscribe to the store. Here are the parts relevant for setting and getting the login data.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>class FacebookStore extends EventEmitter {constructor() {super()this.facebookAuthData = {};...}setFacebookAuthData(data) {this.facebookAuthData = data;this.emitChange();}get loggedIn() {if (!this.facebookAuthData) {return;}return this.facebookAuthData.status == 'connected';}...emitChange() {this.emit(FACEBOOK_CHANGE_EVENT);}addChangeListener(callback) {this.on(FACEBOOK_CHANGE_EVENT, callback);}removeChangeListener(callback) {this.removeListener(FACEBOOK_CHANGE_EVENT, callback);}}// initialize the store as a singletonconst facebookStore = new FacebookStore();</code></pre></div><p>React is agnostic to how we want to store our data. We can use Backbone models, simple JS objects, and so on. I am just storing the auth data in a simple object.</p><p>ES6 getters allow us to execute logic when a class attribute is accessed. For example, executing <code class=\"highlighter-rouge\">FacebookStore.loggedIn</code> will check if auth data is available, then test to see if the user is connected to return a boolean.</p><p>We include event handlers in our store. After data is set, a change is emitted. Components subscribe to changes, and register callbacks to execute.</p><p><strong>Next, we register the store with our dispatcher</strong>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>facebookStore.dispatchToken = FacebookDispatcher.register((action) =&gt; {...if (action.actionType == Constants.FACEBOOK_LOGGED_IN) {facebookStore.setFacebookAuthData(action.data);}...})</code></pre></div><p>After registration, the dispatcher will execute the above callback when the Action Creators dispatch an action. Dispatchers can handle more complex behavior, like waiting for another store to be updated before this one; we don’t need that here.</p><p>So the dispatcher has sent the store data, the store has updated itself with that data, and the store has emitted an event. What now?</p><h3 id=\"rendering-out-the-login-status\">Rendering out the Login Status</h3><p>Let’s check out the <code class=\"highlighter-rouge\">Main</code> component, the parent component of this simple example.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';import FacebookStore from '../stores/FacebookStore';import FacebookLogin from './FacebookLogin';import FacebookLogout from './FacebookLogout';...class Main extends React.Component {constructor(props) {super();}getFacebookState() {return {...loggedIn: FacebookStore.loggedIn,...}}componentDidMount() {FacebookActionCreators.initFacebook();FacebookStore.addChangeListener(() =&gt; this._onFacebookChange());}componentWillUnmount() {FacebookStore.removeChangeListener(this._onFacebookChange);}_onFacebookChange() {this.setState(this.getFacebookState());}render() {return (&lt;div&gt;{!this.state.loggedIn ? &lt;FacebookLogin /&gt; : null}{this.state.loggedIn ? &lt;FacebookLogout /&gt; : null}&lt;p&gt;Facebook logged in: {this.state.loggedIn ? 'true' : 'false'}&lt;/p&gt;...&lt;/div&gt;);}}export default Main;</code></pre></div><p>So, let’s step through a few things happening here:</p><ul><li>When the Component initializes (or ‘mounts’), the Facebook API is initialized.</li><li>The Component subscribes to the Store, through the <code class=\"highlighter-rouge\">addChangeListener</code> method.</li><li>The user clicks the Login button, calling the appropriate Action Creator for data.</li><li>When the Store sends an event signifying a change, the component updates itself with <code class=\"highlighter-rouge\">this.setState(this.getFacebookState())</code>.</li><li>When <code class=\"highlighter-rouge\">this.setState</code> is called, the <code class=\"highlighter-rouge\">render</code> method on itself and all child components are automatically called as well.</li></ul><h1 id=\"testing\">Testing</h1><p>Testing Flux components with the Facebook API presents some challenges, like:</p><ul><li>The store and dispatcher are singletons. Node caches its modules; how do we deal with that?</li><li>How do we mock the Facebook API?</li><li>How can we test without the overhead of a browser instance or PhantomJS?</li></ul><h3 id=\"setup\">Setup</h3><p>I am using Mocha+Chai+Sinon. The same general concepts should apply to testing with Jasmine.</p><p>First, we set up our fake DOM Check out <code class=\"highlighter-rouge\">setup.js</code>. Here we ask jsdom to set up our fake DOM for testing in Node.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import { assert } from 'chai';import { jsdom } from 'jsdom';global.assert = assert;global.document = jsdom('<span class=\"cp\">&lt;!doctype html&gt;</span><span class=\"nt\">&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span>');global.window = document.defaultView;global.navigator = {userAgent: 'node.js'};</code></pre></div><p><strong>Mocking the Facebook API</strong></p><p>Since the Facebook Graph object is a global object, we have to mock its methods globally. We create a factory for mocking out the Facebook API, in <code class=\"highlighter-rouge\">mock/facebook-api.js</code>. Every time that FacebookApi.setup() is called, new stubs are attached to the global window which can be monitored.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import sinon from 'sinon';const facebookApi = {setup() {global.window.FB = {login: sinon.stub(),logout: sinon.stub(),getLoginStatus: sinon.stub(),api: sinon.stub()}return global.window.FB;},teardown() {delete global.window.FB;}}module.exports = facebookApi;</code></pre></div><p><strong>Testing Components</strong></p><p>There are no curveballs here, aside from calling the mock Facebook API for new stubs. We use React’s great Test Utilities to render a component into a fake DOM, which we can perform various tests on.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import TestUtils from 'react-addons-test-utils';import MockFacebookApi from '../mock/facebook-api';import FacebookLogin from '../../../src/js/components/FacebookLogin';describe('login component', () =&gt; {let facebookLoginComponent;beforeEach(() =&gt; {facebookLoginComponent = TestUtils.renderIntoDocument(&lt;FacebookLogin /&gt;);MockFacebookApi.setup()})afterEach(() =&gt; {MockFacebookApi.teardown();})it('should call FB login on click',function() {const button = facebookLoginComponent.refs.loginButton;TestUtils.Simulate.click(button)assert.ok(global.window.FB.login.called)})})</code></pre></div><p><strong>Testing Stores</strong></p><p>This gets trickier.</p><ul><li>The Facebook store is a singleton, it is instantiated once through the app’s life.</li><li>Node caches its modules; issuing another <code class=\"highlighter-rouge\">require</code> will just pull the module from the cache.</li></ul><p>So if we just import it into the test module, we will run into problems; data state will build up in the Store, any stubbed or mocked functions will stay that way. In other words, we need a clean Store for every test; how do we do that? Check out <code class=\"highlighter-rouge\">utils/reload</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code> export default function (module) {delete require.cache[require.resolve(module)]return require(module)}</code></pre></div><p>We use Node’s internal API to delete the module from the cache, and import a new one. This ensures our modules are clean and newly instantiated as we need.</p><p>So let’s say we want to test that certain actions result in certain behavior from the store. For that, we need to capture the callback that is registered with the dispatcher. Here’s a sample:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    ...describe('dispatcher actions', () =&gt; {let FacebookStore;let FacebookDispatcher;let dispatchCallback;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.spy(FacebookDispatcher, 'register');FacebookStore = reload('../../../src/js/stores/FacebookStore')sinon.spy(FacebookStore, 'emitChange')// save the dispatch callback, so action effects on the store can be testeddispatchCallback = FacebookDispatcher.register.getCall(0).args[0]})afterEach(() =&gt; {FacebookDispatcher.register.restore()FacebookStore.emitChange.restore()})...it('should set facebook data after FB login', () =&gt; {const actionData = {actionType: Constants.FACEBOOK_LOGGED_IN,data: 'foo'}dispatchCallback(actionData)assert.equal(FacebookStore.facebookAuthData, 'foo');assert.equal(FacebookStore.emitChange.callCount, 1);})...</code></pre></div><p>Let’s step through what’s happening here.</p><ul><li>We reload the dispatcher. Remember, the dispatcher is also a singleton, there is one instance in our app. We want a fresh one that is going to be imported into the Store module.</li><li>We spy on the register method of the dispatcher, so we can capture the callback passed to it.</li><li>We reload the store. As the module is initialized, the store registers with the dispatcher and passes a callback to it.</li><li>We capture the callback, and now we can start testing it.</li></ul><p><strong>Testing Action Creators</strong></p><p>Again, we follow a similar pattern with action creators. Since the dispatcher is a singleton, we reload our target modules in order, and test accordingly.</p><p>We use Sinon’s <code class=\"highlighter-rouge\">callsArgWith</code> to pass an object to the <code class=\"highlighter-rouge\">FB.login</code> callback, which results in a dispatch message being sent out.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>describe('facebook action creators', () =&gt; {let FacebookDispatcher;let FacebookActionCreators;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.stub(FacebookDispatcher, 'dispatch')FacebookActionCreators = reload('../../../src/js/actions/FacebookActionCreators')MockFacebookApi.setup();})afterEach(() =&gt; {MockFacebookApi.teardown();})...it('should send a dispatch message after FB login connected', () =&gt; {const fbData = {'status': 'connected'}global.window.FB.login.callsArgWith(0, fbData)FacebookActionCreators.login()assert.ok(FacebookDispatcher.dispatch.calledOnce)const [{actionType, data}] = FacebookDispatcher.dispatch.getCall(0).argsassert.equal(Constants.FACEBOOK_LOGGED_IN, actionType)assert.equal(data, fbData)})...</code></pre></div><p>We run our tests with the following command, which compiles everything, runs our setup file, then our tests:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mocha -u tdd -r ./tests/setup --compilers js:babel-core/register ./tests/**/*Test.js</code></pre></div><p>That about covers it! If you have any questions, feel free to <a href=\"http://twitter.com/subyraman\">tweet them to me</a>.</p>",
      "content": "<p><strong>Clone the example code:</strong></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone git@github.com:subyraman/react-flux-facebook-api-example.git</code></pre></div><p><strong>Check out the running example at: http://reactfluxfbapi.herokuapp.com</strong></p><p>For giving us React and Flux, I’ve seen relatively little about integrating Facebook’s own Graph API with their development tools. The tools are so new that there’s precious little instruction out there about how to answer questions that are easier to answer with other architectures, like:</p><ul><li>Where do all those asynchronous API calls go?</li><li>How do I send the results of those API calls to the React component?</li><li>The Facebook API is available as a global object, but how do I test that in a headless Node environment?</li></ul><p>This sample code shows a possible model for integrating the Facebook Graph API with a React app, and provides a test suite that allows us to test these components in isolation.</p><p>First, let’s take a look at what the Flux architecture typically looks like.</p><p><img src=\"http://i.imgur.com/C3o9SaQ.png\" alt=\"Flux architecture\"></p><p>Though it took me a little while to understand, Flux seems to want us to rock the following model:</p><ul><li>1) API calls are handled in the Action Creators. When we want new data, a view component calls on an Action Creator.</li><li>2) We wait for the response from a remote server, then sends the data along with an Action Type (a type of signal) to the Dispatcher.</li><li>3) The Dispatcher passes the signal and data on to the appropriate Store.</li><li>4) The Store, well, stores the data we received. When data is updated, we emit an event.</li><li>5) This event from the Store is picked up by our view components. Our view components access data from the store, and render it out into beautiful HTML.</li></ul><p>The key thing here is that <strong>data flow is unidirectional</strong>. The View Component must not receive data directly from the Action Creator API, it must proceed to the Store (via the dispatcher), and then on to the View. This keeps our data stream organized and all of our components in sync with the data state.</p><p>Let’s dig into the code a little bit. I’ll show, as an example, how to log in a user to the Facebook API and render out that status.</p><h2 id=\"the-facebook-login-component\">The Facebook Login Component</h2><p>The component is simple, as it should be. It should not contain complex logic or data handling. They’re meant to be dumb, and treat them that way.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';class FacebookLogin extends React.Component {constructor(props) {super(props);}render() {return (&lt;button ref=\"loginButton\" onClick={this.didClickFacebookLoginButton}&gt;Log Into Facebook&lt;/button&gt;);}didClickFacebookLoginButton(e) {FacebookActionCreators.login()}}export default FacebookLogin;</code></pre></div><h2 id=\"the-action-creators\">The Action Creators</h2><p>For our Action Creators, we want to wrap the API and when we receive a response, we dispatch an <code class=\"highlighter-rouge\">actionType</code> along with the data. This frees us from having to use promises to return asychronous data; instead we use clearly defined signals that correspond to our action.</p><p>This is a simplistic example; we aren’t handling error cases, for example. When the user logs into Facebook, it relays the response data to the dispatcher, which contains information about the user’s id, the access token, and other information.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>login: () =&gt; {window.FB.login((response) =&gt; {if (response.status === 'connected') {FacebookDispatcher.dispatch({actionType: Constants.FACEBOOK_LOGGED_IN,data: response})}});},</code></pre></div><h3 id=\"the-dispatcher\">The Dispatcher</h3><p>It is nothing special. Flux contains all of the logic within the dispatcher, so it doesn’t need any special configuration. Just keep in mind that it is a singleton, and that there is only one instance of it in your app.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import {Dispatcher} from 'flux';const FacebookDispatcher = new Dispatcher();module.exports = FacebookDispatcher;</code></pre></div><h3 id=\"the-store\">The Store</h3><p>For the store, Flux suggests you extend the <code class=\"highlighter-rouge\">EventEmitter</code> module, which, as the name suggests, allows us to emit events to components that subscribe to the store. Here are the parts relevant for setting and getting the login data.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>class FacebookStore extends EventEmitter {constructor() {super()this.facebookAuthData = {};...}setFacebookAuthData(data) {this.facebookAuthData = data;this.emitChange();}get loggedIn() {if (!this.facebookAuthData) {return;}return this.facebookAuthData.status == 'connected';}...emitChange() {this.emit(FACEBOOK_CHANGE_EVENT);}addChangeListener(callback) {this.on(FACEBOOK_CHANGE_EVENT, callback);}removeChangeListener(callback) {this.removeListener(FACEBOOK_CHANGE_EVENT, callback);}}// initialize the store as a singletonconst facebookStore = new FacebookStore();</code></pre></div><p>React is agnostic to how we want to store our data. We can use Backbone models, simple JS objects, and so on. I am just storing the auth data in a simple object.</p><p>ES6 getters allow us to execute logic when a class attribute is accessed. For example, executing <code class=\"highlighter-rouge\">FacebookStore.loggedIn</code> will check if auth data is available, then test to see if the user is connected to return a boolean.</p><p>We include event handlers in our store. After data is set, a change is emitted. Components subscribe to changes, and register callbacks to execute.</p><p><strong>Next, we register the store with our dispatcher</strong>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>facebookStore.dispatchToken = FacebookDispatcher.register((action) =&gt; {...if (action.actionType == Constants.FACEBOOK_LOGGED_IN) {facebookStore.setFacebookAuthData(action.data);}...})</code></pre></div><p>After registration, the dispatcher will execute the above callback when the Action Creators dispatch an action. Dispatchers can handle more complex behavior, like waiting for another store to be updated before this one; we don’t need that here.</p><p>So the dispatcher has sent the store data, the store has updated itself with that data, and the store has emitted an event. What now?</p><h3 id=\"rendering-out-the-login-status\">Rendering out the Login Status</h3><p>Let’s check out the <code class=\"highlighter-rouge\">Main</code> component, the parent component of this simple example.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';import FacebookStore from '../stores/FacebookStore';import FacebookLogin from './FacebookLogin';import FacebookLogout from './FacebookLogout';...class Main extends React.Component {constructor(props) {super();}getFacebookState() {return {...loggedIn: FacebookStore.loggedIn,...}}componentDidMount() {FacebookActionCreators.initFacebook();FacebookStore.addChangeListener(() =&gt; this._onFacebookChange());}componentWillUnmount() {FacebookStore.removeChangeListener(this._onFacebookChange);}_onFacebookChange() {this.setState(this.getFacebookState());}render() {return (&lt;div&gt;{!this.state.loggedIn ? &lt;FacebookLogin /&gt; : null}{this.state.loggedIn ? &lt;FacebookLogout /&gt; : null}&lt;p&gt;Facebook logged in: {this.state.loggedIn ? 'true' : 'false'}&lt;/p&gt;...&lt;/div&gt;);}}export default Main;</code></pre></div><p>So, let’s step through a few things happening here:</p><ul><li>When the Component initializes (or ‘mounts’), the Facebook API is initialized.</li><li>The Component subscribes to the Store, through the <code class=\"highlighter-rouge\">addChangeListener</code> method.</li><li>The user clicks the Login button, calling the appropriate Action Creator for data.</li><li>When the Store sends an event signifying a change, the component updates itself with <code class=\"highlighter-rouge\">this.setState(this.getFacebookState())</code>.</li><li>When <code class=\"highlighter-rouge\">this.setState</code> is called, the <code class=\"highlighter-rouge\">render</code> method on itself and all child components are automatically called as well.</li></ul><h1 id=\"testing\">Testing</h1><p>Testing Flux components with the Facebook API presents some challenges, like:</p><ul><li>The store and dispatcher are singletons. Node caches its modules; how do we deal with that?</li><li>How do we mock the Facebook API?</li><li>How can we test without the overhead of a browser instance or PhantomJS?</li></ul><h3 id=\"setup\">Setup</h3><p>I am using Mocha+Chai+Sinon. The same general concepts should apply to testing with Jasmine.</p><p>First, we set up our fake DOM Check out <code class=\"highlighter-rouge\">setup.js</code>. Here we ask jsdom to set up our fake DOM for testing in Node.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import { assert } from 'chai';import { jsdom } from 'jsdom';global.assert = assert;global.document = jsdom('<span class=\"cp\">&lt;!doctype html&gt;</span><span class=\"nt\">&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span>');global.window = document.defaultView;global.navigator = {userAgent: 'node.js'};</code></pre></div><p><strong>Mocking the Facebook API</strong></p><p>Since the Facebook Graph object is a global object, we have to mock its methods globally. We create a factory for mocking out the Facebook API, in <code class=\"highlighter-rouge\">mock/facebook-api.js</code>. Every time that FacebookApi.setup() is called, new stubs are attached to the global window which can be monitored.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import sinon from 'sinon';const facebookApi = {setup() {global.window.FB = {login: sinon.stub(),logout: sinon.stub(),getLoginStatus: sinon.stub(),api: sinon.stub()}return global.window.FB;},teardown() {delete global.window.FB;}}module.exports = facebookApi;</code></pre></div><p><strong>Testing Components</strong></p><p>There are no curveballs here, aside from calling the mock Facebook API for new stubs. We use React’s great Test Utilities to render a component into a fake DOM, which we can perform various tests on.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import TestUtils from 'react-addons-test-utils';import MockFacebookApi from '../mock/facebook-api';import FacebookLogin from '../../../src/js/components/FacebookLogin';describe('login component', () =&gt; {let facebookLoginComponent;beforeEach(() =&gt; {facebookLoginComponent = TestUtils.renderIntoDocument(&lt;FacebookLogin /&gt;);MockFacebookApi.setup()})afterEach(() =&gt; {MockFacebookApi.teardown();})it('should call FB login on click',function() {const button = facebookLoginComponent.refs.loginButton;TestUtils.Simulate.click(button)assert.ok(global.window.FB.login.called)})})</code></pre></div><p><strong>Testing Stores</strong></p><p>This gets trickier.</p><ul><li>The Facebook store is a singleton, it is instantiated once through the app’s life.</li><li>Node caches its modules; issuing another <code class=\"highlighter-rouge\">require</code> will just pull the module from the cache.</li></ul><p>So if we just import it into the test module, we will run into problems; data state will build up in the Store, any stubbed or mocked functions will stay that way. In other words, we need a clean Store for every test; how do we do that? Check out <code class=\"highlighter-rouge\">utils/reload</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code> export default function (module) {delete require.cache[require.resolve(module)]return require(module)}</code></pre></div><p>We use Node’s internal API to delete the module from the cache, and import a new one. This ensures our modules are clean and newly instantiated as we need.</p><p>So let’s say we want to test that certain actions result in certain behavior from the store. For that, we need to capture the callback that is registered with the dispatcher. Here’s a sample:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    ...describe('dispatcher actions', () =&gt; {let FacebookStore;let FacebookDispatcher;let dispatchCallback;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.spy(FacebookDispatcher, 'register');FacebookStore = reload('../../../src/js/stores/FacebookStore')sinon.spy(FacebookStore, 'emitChange')// save the dispatch callback, so action effects on the store can be testeddispatchCallback = FacebookDispatcher.register.getCall(0).args[0]})afterEach(() =&gt; {FacebookDispatcher.register.restore()FacebookStore.emitChange.restore()})...it('should set facebook data after FB login', () =&gt; {const actionData = {actionType: Constants.FACEBOOK_LOGGED_IN,data: 'foo'}dispatchCallback(actionData)assert.equal(FacebookStore.facebookAuthData, 'foo');assert.equal(FacebookStore.emitChange.callCount, 1);})...</code></pre></div><p>Let’s step through what’s happening here.</p><ul><li>We reload the dispatcher. Remember, the dispatcher is also a singleton, there is one instance in our app. We want a fresh one that is going to be imported into the Store module.</li><li>We spy on the register method of the dispatcher, so we can capture the callback passed to it.</li><li>We reload the store. As the module is initialized, the store registers with the dispatcher and passes a callback to it.</li><li>We capture the callback, and now we can start testing it.</li></ul><p><strong>Testing Action Creators</strong></p><p>Again, we follow a similar pattern with action creators. Since the dispatcher is a singleton, we reload our target modules in order, and test accordingly.</p><p>We use Sinon’s <code class=\"highlighter-rouge\">callsArgWith</code> to pass an object to the <code class=\"highlighter-rouge\">FB.login</code> callback, which results in a dispatch message being sent out.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>describe('facebook action creators', () =&gt; {let FacebookDispatcher;let FacebookActionCreators;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.stub(FacebookDispatcher, 'dispatch')FacebookActionCreators = reload('../../../src/js/actions/FacebookActionCreators')MockFacebookApi.setup();})afterEach(() =&gt; {MockFacebookApi.teardown();})...it('should send a dispatch message after FB login connected', () =&gt; {const fbData = {'status': 'connected'}global.window.FB.login.callsArgWith(0, fbData)FacebookActionCreators.login()assert.ok(FacebookDispatcher.dispatch.calledOnce)const [{actionType, data}] = FacebookDispatcher.dispatch.getCall(0).argsassert.equal(Constants.FACEBOOK_LOGGED_IN, actionType)assert.equal(data, fbData)})...</code></pre></div><p>We run our tests with the following command, which compiles everything, runs our setup file, then our tests:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mocha -u tdd -r ./tests/setup --compilers js:babel-core/register ./tests/**/*Test.js</code></pre></div><p>That about covers it! If you have any questions, feel free to <a href=\"http://twitter.com/subyraman\">tweet them to me</a>.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "How to Structure a React Project?",
      "pubDate": "2015-11-30",
      "link": "https://reactjsnews.com/structuring-react-projects",
      "guid": "https://reactjsnews.com/structuring-react-projects",
      "author": "",
      "thumbnail": "",
      "description": "<p><strong>Editor’s Note:</strong> Please check out the <a href=\"http://www.reactindiebundle.com/\">React Indie Bundle</a>. Juho and many other members of the React community help put it together. All of the proceeds go towards awesome people in our community.</p><p>Programming is a bit like gardening. While trying to keep the bugs out, we prefer to keep everything neat and organized lest we want to end up in the jungle. A poor structure just slows us down and makes it easier for bugs to crawl into the system.</p><p>There are multiple ways to structure your project. I believe it is far better to evolve the structure as you go rather than to stick with some dogma. I will go through some basic approaches next to provide some food for thought.</p><h2 id=\"everything-in-one-file\">Everything in One File</h2><p>The simplest of projects can fit into a single file. This is how I prefer to deal with my <a href=\"http://survivejs.com/webpack_react/developing_with_webpack/\">Webpack configuration</a>. The greatest benefit of this approach is that you have everything you need in a single file. If you organize your code from top to down, this can be a legit approach.</p><p>You could start working on a React project in a similar manner. As you are prototyping, you simply stub out your components in a single file as you are trying to figure out the hierarchy. As the file grows, this will become cumbersome, though. For example dealing with testing will be harder than it should. Merges will be problematic.</p><h2 id=\"multiple-files\">Multiple Files</h2><p>The obvious way to solve this problem is to start splitting things up. You could begin by pushing your components to separate files like this:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; └── Note.jsx├── index.jsx└── main.css</code></pre></div><p>Here <em>index.jsx</em> works as the entry point of the application. It uses <code class=\"highlighter-rouge\">ReactDOM.render</code> to render <code class=\"highlighter-rouge\">App</code> and gets the party started. <code class=\"highlighter-rouge\">App</code> in turn does something interesting with <code class=\"highlighter-rouge\">Note</code>. If I wanted yet another component, you would simply add it below <code class=\"highlighter-rouge\">/components</code>.</p><p>If you wanted to test your components, you would add a separate directory for tests and develop them there. You could even try a test driven approach and think through your component constraints before implementing them.</p><p>You can get quite far with this basic structure. It does have its limits, though. How to deal with styling for instance? That <em>main.css</em> could grow quite big. That’s a scary prospect.</p><h2 id=\"components-in-their-own-directories\">Components in Their Own Directories</h2><p>This problem can be solved by adding more structure the system. Here’s what you could end up with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App│&nbsp;&nbsp; │&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app.css│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app_test.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; └── index.js│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx└── main.css</code></pre></div><ul><li>Starting the component names (i.e., <em>App.jsx</em>) with an uppercase letter makes them easy to discover. The <em>index.js</em> files provide us neat entry points to the files so they are easy to consume from elsewhere.</li><li>Each component is a self-contained entity now. We can use for example <a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> to underline this point. Extracting these components from the project would be easy now given how self-contained they are.</li><li>The tests related to each component are trivial to find now. We still might want to have a <code class=\"highlighter-rouge\">/tests</code> directory at the project root in order to deal with higher level tests.</li></ul><p>Of course real projects have more complexity than this and the current structure would start to break down with that. Where would you fit your views?</p><h2 id=\"adding-views-to-the-mix\">Adding Views to the Mix</h2><p>This is likely where opinions begin to diverge. I’ll let you duke it out at the comments. Here’s a structure I would feel comfortable with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; ├── Routes│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Routes.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; └── routes_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx├── main.css└── views├── Home│&nbsp;&nbsp; ├── Home.jsx│&nbsp;&nbsp; ├── home.css│&nbsp;&nbsp; ├── home_test.jsx│&nbsp;&nbsp; └── index.js├── Register│&nbsp;&nbsp; ├── Register.jsx│&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; ├── register.css│&nbsp;&nbsp; └── register_test.jsx└── index.js</code></pre></div><p>As we have routing in place now, <code class=\"highlighter-rouge\">App</code> became redundant. Most likely some view takes care of its responsibilities now. They simply follow our routing rules and consume components based on their needs.</p><p>This structure can scale far further but even it has limits as the project grows. I would suggest adding a concept like “features” between the views and the components. A feature is a component that aggregates them somehow and forms, well, a feature.</p><h2 id=\"dealing-with-data-concerns\">Dealing with Data Concerns</h2><p>Given most useful applications have to deal with data somehow, our current structure might not quite be enough yet. A lot depends on what kind of architecture you choose. It may make sense to push some of the data concerns within the current structure. Or you may introduce new root level directories such as <em>/actions</em>, <em>/constants</em>, <em>/libs</em>, <em>/reducers</em>, <em>/stores</em>, just to give you some idea.</p><h2 id=\"conclusion\">Conclusion</h2><p>There isn’t one right way to structure your projects. Rather, you should be pragmatic. Sometimes just restructuring a project can help you to bring clarity to it and make it more understandable to yourself and others. I’m very curious to hear what kind of structuring you prefer in your React projects and why. Feel free to comment below.</p><p>In order to make it easier to dive into the world of React, we’ve prepared <a href=\"http://www.reactindiebundle.com/\">a special bundle</a> with material from indie authors. It’s available for a limited time. If you want to deepen your React knowledge, it’s a good time to pick it up. I hope you enjoy the books, videos, and consulting included.</p>",
      "content": "<p><strong>Editor’s Note:</strong> Please check out the <a href=\"http://www.reactindiebundle.com/\">React Indie Bundle</a>. Juho and many other members of the React community help put it together. All of the proceeds go towards awesome people in our community.</p><p>Programming is a bit like gardening. While trying to keep the bugs out, we prefer to keep everything neat and organized lest we want to end up in the jungle. A poor structure just slows us down and makes it easier for bugs to crawl into the system.</p><p>There are multiple ways to structure your project. I believe it is far better to evolve the structure as you go rather than to stick with some dogma. I will go through some basic approaches next to provide some food for thought.</p><h2 id=\"everything-in-one-file\">Everything in One File</h2><p>The simplest of projects can fit into a single file. This is how I prefer to deal with my <a href=\"http://survivejs.com/webpack_react/developing_with_webpack/\">Webpack configuration</a>. The greatest benefit of this approach is that you have everything you need in a single file. If you organize your code from top to down, this can be a legit approach.</p><p>You could start working on a React project in a similar manner. As you are prototyping, you simply stub out your components in a single file as you are trying to figure out the hierarchy. As the file grows, this will become cumbersome, though. For example dealing with testing will be harder than it should. Merges will be problematic.</p><h2 id=\"multiple-files\">Multiple Files</h2><p>The obvious way to solve this problem is to start splitting things up. You could begin by pushing your components to separate files like this:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; └── Note.jsx├── index.jsx└── main.css</code></pre></div><p>Here <em>index.jsx</em> works as the entry point of the application. It uses <code class=\"highlighter-rouge\">ReactDOM.render</code> to render <code class=\"highlighter-rouge\">App</code> and gets the party started. <code class=\"highlighter-rouge\">App</code> in turn does something interesting with <code class=\"highlighter-rouge\">Note</code>. If I wanted yet another component, you would simply add it below <code class=\"highlighter-rouge\">/components</code>.</p><p>If you wanted to test your components, you would add a separate directory for tests and develop them there. You could even try a test driven approach and think through your component constraints before implementing them.</p><p>You can get quite far with this basic structure. It does have its limits, though. How to deal with styling for instance? That <em>main.css</em> could grow quite big. That’s a scary prospect.</p><h2 id=\"components-in-their-own-directories\">Components in Their Own Directories</h2><p>This problem can be solved by adding more structure the system. Here’s what you could end up with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App│&nbsp;&nbsp; │&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app.css│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app_test.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; └── index.js│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx└── main.css</code></pre></div><ul><li>Starting the component names (i.e., <em>App.jsx</em>) with an uppercase letter makes them easy to discover. The <em>index.js</em> files provide us neat entry points to the files so they are easy to consume from elsewhere.</li><li>Each component is a self-contained entity now. We can use for example <a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> to underline this point. Extracting these components from the project would be easy now given how self-contained they are.</li><li>The tests related to each component are trivial to find now. We still might want to have a <code class=\"highlighter-rouge\">/tests</code> directory at the project root in order to deal with higher level tests.</li></ul><p>Of course real projects have more complexity than this and the current structure would start to break down with that. Where would you fit your views?</p><h2 id=\"adding-views-to-the-mix\">Adding Views to the Mix</h2><p>This is likely where opinions begin to diverge. I’ll let you duke it out at the comments. Here’s a structure I would feel comfortable with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; ├── Routes│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Routes.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; └── routes_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx├── main.css└── views├── Home│&nbsp;&nbsp; ├── Home.jsx│&nbsp;&nbsp; ├── home.css│&nbsp;&nbsp; ├── home_test.jsx│&nbsp;&nbsp; └── index.js├── Register│&nbsp;&nbsp; ├── Register.jsx│&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; ├── register.css│&nbsp;&nbsp; └── register_test.jsx└── index.js</code></pre></div><p>As we have routing in place now, <code class=\"highlighter-rouge\">App</code> became redundant. Most likely some view takes care of its responsibilities now. They simply follow our routing rules and consume components based on their needs.</p><p>This structure can scale far further but even it has limits as the project grows. I would suggest adding a concept like “features” between the views and the components. A feature is a component that aggregates them somehow and forms, well, a feature.</p><h2 id=\"dealing-with-data-concerns\">Dealing with Data Concerns</h2><p>Given most useful applications have to deal with data somehow, our current structure might not quite be enough yet. A lot depends on what kind of architecture you choose. It may make sense to push some of the data concerns within the current structure. Or you may introduce new root level directories such as <em>/actions</em>, <em>/constants</em>, <em>/libs</em>, <em>/reducers</em>, <em>/stores</em>, just to give you some idea.</p><h2 id=\"conclusion\">Conclusion</h2><p>There isn’t one right way to structure your projects. Rather, you should be pragmatic. Sometimes just restructuring a project can help you to bring clarity to it and make it more understandable to yourself and others. I’m very curious to hear what kind of structuring you prefer in your React projects and why. Feel free to comment below.</p><p>In order to make it easier to dive into the world of React, we’ve prepared <a href=\"http://www.reactindiebundle.com/\">a special bundle</a> with material from indie authors. It’s available for a limited time. If you want to deepen your React knowledge, it’s a good time to pick it up. I hope you enjoy the books, videos, and consulting included.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Testing Components, The Easy Way",
      "pubDate": "2015-09-19",
      "link": "https://reactjsnews.com/testing-the-easy-way",
      "guid": "https://reactjsnews.com/testing-the-easy-way",
      "author": "",
      "thumbnail": "",
      "description": "<p>You may have seen Darin’s post on <a href=\"http://reactjsnews.com/testing-in-react/\">testing in React</a> last month. We work together at the same company. In the past couple of weeks I’ve realized that I really <em>hate</em> how annoying it is to setup and write tests for components.</p><p>##How We Used To Do Tests</p><p>With every new project we start, we have to include jsdom and set that up in a setup.js file that will be ran before each of our tests. If you take a look at <a href=\"http://reactjsnews.com/testing-in-react/\">his post</a>, you’ll see that process very clearly. Not only were we including this file in every project, our tests were not easy to follow. Take a look:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should generate a login form'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">loginForm</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">inputs</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'input'</span><span class=\"p\">);</span><span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">inputs</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Even if you’re someone who uses the <a href=\"https://facebook.github.io/react/docs/test-utils.html\">React Test Utils</a> daily, it still takes a second to realize what’s going on here. We’re rendering the component, finding all the inputs, and finding one button.</p><p>##Is There A Better Way?</p><p>I thought to myself, “Why isn’t there an easier syntax for this?” Welcome to the world of <a href=\"https://github.com/Legitcode/tests\">legit-tests</a>:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">button</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">})</span></code></pre></div><p>This is the exact same test as above, but so much easier for anyone, even someone new to testing, to reason about. We’re testing the <code class=\"highlighter-rouge\">NewSession</code> component, finding inputs and buttons, then testing them! Not only is this a much nicer syntax, but the library includes <code class=\"highlighter-rouge\">jsdom</code> and exposes React so that in your test’s file you no longer need to setup jsdom, or include React in order to use the jsx syntax in the Test function.</p><p>##That’s A Pretty Basic Example…</p><p>What if you wanted to handle changing the component’s state, simulate a click, or change the values of an input field? I built <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> to be easily extendable. There are a few <a href=\"https://github.com/Legitcode/tests/wiki/Bundled-Middleware\">built in pieces of middleware</a>. Let’s take a look at changing the component’s state and simulating a click.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">spy</span> <span class=\"o\">=</span> <span class=\"nx\">sinon</span><span class=\"p\">.</span><span class=\"nx\">spy</span><span class=\"p\">();</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">TestComponent</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">spy</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">Find</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'click'</span><span class=\"p\">,</span> <span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'button'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"s1\">'changed!'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">instance</span><span class=\"p\">})</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">spy</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"s1\">'changed!'</span><span class=\"p\">)</span><span class=\"p\">})</span></code></pre></div><p>Usually I wouldn’t recommend chaining too many things together. If I was simulating a click I wouldn’t also change the state in that same test, but it’s ultimately whatever you prefer.</p><p>##How Do I Build My Own Middleware?</p><p>If you take a look at the <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> readme, you can find out more. Here’s an example piece of middleware by <a href=\"https://github.com/geowarin/boot-react/blob/frontend-tests/frontend/test/components/LoginPage.spec.js\">geowarin</a> that changes the value of some inputs:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">ChangeValues</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">let</span> <span class=\"nx\">elements</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">helpers</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">];</span><span class=\"nx\">elements</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">];</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">LoginPage</span> <span class=\"p\">{...</span><span class=\"nx\">props</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">ChangeValues</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">elements</span><span class=\"p\">:</span> <span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"na\">values</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">]})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'submit'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>##What Does This Force Me To Use?</p><p>That’s a good question! In each test you’ve seen me reference <code class=\"highlighter-rouge\">expect</code>. Well the only thing <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> forces on you is jsdom, React (along with the React Test Utils). We still use Mocha to describe our tests and expect / chai to write our assertions as seen above. You’re free to use whatever you like. This library is meant to handle the rendering and testing of your components, the rest is up to you!</p><p>##What’s Next</p><p>I hope this library is as useful for others as it is for me. React 0.14 will be coming out shortly and some things will need to be reworked in the background, but the way the library works now won’t be changing. If you have any useful middleware or want to contribute, feel free to send PR’s <a href=\"https://github.com/Legitcode/tests\">on github</a> or leave a comment below.</p>",
      "content": "<p>You may have seen Darin’s post on <a href=\"http://reactjsnews.com/testing-in-react/\">testing in React</a> last month. We work together at the same company. In the past couple of weeks I’ve realized that I really <em>hate</em> how annoying it is to setup and write tests for components.</p><p>##How We Used To Do Tests</p><p>With every new project we start, we have to include jsdom and set that up in a setup.js file that will be ran before each of our tests. If you take a look at <a href=\"http://reactjsnews.com/testing-in-react/\">his post</a>, you’ll see that process very clearly. Not only were we including this file in every project, our tests were not easy to follow. Take a look:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should generate a login form'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">loginForm</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">inputs</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'input'</span><span class=\"p\">);</span><span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">inputs</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Even if you’re someone who uses the <a href=\"https://facebook.github.io/react/docs/test-utils.html\">React Test Utils</a> daily, it still takes a second to realize what’s going on here. We’re rendering the component, finding all the inputs, and finding one button.</p><p>##Is There A Better Way?</p><p>I thought to myself, “Why isn’t there an easier syntax for this?” Welcome to the world of <a href=\"https://github.com/Legitcode/tests\">legit-tests</a>:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">button</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">})</span></code></pre></div><p>This is the exact same test as above, but so much easier for anyone, even someone new to testing, to reason about. We’re testing the <code class=\"highlighter-rouge\">NewSession</code> component, finding inputs and buttons, then testing them! Not only is this a much nicer syntax, but the library includes <code class=\"highlighter-rouge\">jsdom</code> and exposes React so that in your test’s file you no longer need to setup jsdom, or include React in order to use the jsx syntax in the Test function.</p><p>##That’s A Pretty Basic Example…</p><p>What if you wanted to handle changing the component’s state, simulate a click, or change the values of an input field? I built <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> to be easily extendable. There are a few <a href=\"https://github.com/Legitcode/tests/wiki/Bundled-Middleware\">built in pieces of middleware</a>. Let’s take a look at changing the component’s state and simulating a click.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">spy</span> <span class=\"o\">=</span> <span class=\"nx\">sinon</span><span class=\"p\">.</span><span class=\"nx\">spy</span><span class=\"p\">();</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">TestComponent</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">spy</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">Find</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'click'</span><span class=\"p\">,</span> <span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'button'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"s1\">'changed!'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">instance</span><span class=\"p\">})</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">spy</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"s1\">'changed!'</span><span class=\"p\">)</span><span class=\"p\">})</span></code></pre></div><p>Usually I wouldn’t recommend chaining too many things together. If I was simulating a click I wouldn’t also change the state in that same test, but it’s ultimately whatever you prefer.</p><p>##How Do I Build My Own Middleware?</p><p>If you take a look at the <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> readme, you can find out more. Here’s an example piece of middleware by <a href=\"https://github.com/geowarin/boot-react/blob/frontend-tests/frontend/test/components/LoginPage.spec.js\">geowarin</a> that changes the value of some inputs:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">ChangeValues</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">let</span> <span class=\"nx\">elements</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">helpers</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">];</span><span class=\"nx\">elements</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">];</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">LoginPage</span> <span class=\"p\">{...</span><span class=\"nx\">props</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">ChangeValues</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">elements</span><span class=\"p\">:</span> <span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"na\">values</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">]})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'submit'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>##What Does This Force Me To Use?</p><p>That’s a good question! In each test you’ve seen me reference <code class=\"highlighter-rouge\">expect</code>. Well the only thing <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> forces on you is jsdom, React (along with the React Test Utils). We still use Mocha to describe our tests and expect / chai to write our assertions as seen above. You’re free to use whatever you like. This library is meant to handle the rendering and testing of your components, the rest is up to you!</p><p>##What’s Next</p><p>I hope this library is as useful for others as it is for me. React 0.14 will be coming out shortly and some things will need to be reworked in the background, but the way the library works now won’t be changing. If you have any useful middleware or want to contribute, feel free to send PR’s <a href=\"https://github.com/Legitcode/tests\">on github</a> or leave a comment below.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "React Recap: August 7th",
      "pubDate": "2015-08-07",
      "link": "https://reactjsnews.com/roundup-august-7",
      "guid": "https://reactjsnews.com/roundup-august-7",
      "author": "",
      "thumbnail": "",
      "description": "<p>I’ve noticed a lot of roundups lately, but there’s a lot of good content people aren’t sharing. If you like these types of posts, leave a comment or <a href=\"http://twitter.com/reactjsnews\">Tweet us</a>. Here’s my favorite content found this week.</p><p>##Reddit</p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3ftijc/is_react_rendered_on_the_backend_actually_faster/\">Is react rendered on the backend actually faster than templating languages?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3fbst3/can_stores_maintain_state_after_their_attached/\">Can stores maintain state after their attached components unmount?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3fapu3/beginner_here_cant_figure_out_how_to_add_a/\">Beginner here, can’t figure out how to add a message to a chat component</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3g3xj8/question_best_practice_for_handling_error_with/\">Best Practice for handling error with react/flux?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3g3on5/whats_the_best_beginner_resource_to_learn_react/\">What’s the best beginner resource to learn React?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3fuzu6/remove_item_from_thisstateusers/\">How do I remove an item from this.state.users?</a></p><p>##Stackoverflow</p><p><a href=\"http://stackoverflow.com/questions/31858101/react-appends-px-to-stop-opacity-css-value\">React appends ‘px’ to stop-opacity css value</a></p><p><a href=\"http://stackoverflow.com/questions/31841949/react-this-cloneelement-and-es6\">React, “this”, cloneElement and es6</a></p><p><a href=\"http://stackoverflow.com/questions/31868993/do-i-need-flux-store-for-this-purpose\">Do I need Flux Store for this purpose?</a></p><p>##React Starter Kits</p><p><a href=\"https://github.com/kriasoft/react-starter-kit\">React Starter Kit</a> — a skeleton of an “isomorphic” web application / SPA built with React.js, Express, Flux, ES6+, JSX, Babel, PostCSS, Webpack, BrowserSync…</p><p><a href=\"https://github.com/mweststrate/react-mobservable-boilerplate\">react-mobservable-boilerplate</a></p><p><a href=\"https://github.com/ipselon/react-ui-builder\">React UI Builder</a></p><p><a href=\"https://github.com/henrikjoreteg/hjs-webpack\">HJS Webpack</a> Helpers/presets for setting up webpack with hotloading react and ES6(2015) using Babel.</p><p><a href=\"https://github.com/gaearon/react-hot-boilerplate\">React Hot Boilerplate</a></p><p>##Random</p><p><a href=\"https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux\">What the Flux?! Let’s Redux.</a></p><p><a href=\"http://facebook.github.io/react/blog/2015/08/03/new-react-devtools-beta.html\">New React Devtools</a></p><p><a href=\"https://jaxbot.me/articles/setting-up-vim-for-react-js-jsx-02-03-2015\">Setting up Vim for React</a></p><p><a href=\"https://www.designernews.co/stories/53875-show-dn-just-rebuilt-my-portfolio-w-reactjs\">Just rebuilt my portfolio w/ React.js</a></p><p>Don’t forget our recent posts:</p><p><a href=\"https://reactjsnews.com/composing-components\">React.Component vs React.createClass</a></p><p><a href=\"https://reactjsnews.com/modals-in-react\">Modals in React</a></p>",
      "content": "<p>I’ve noticed a lot of roundups lately, but there’s a lot of good content people aren’t sharing. If you like these types of posts, leave a comment or <a href=\"http://twitter.com/reactjsnews\">Tweet us</a>. Here’s my favorite content found this week.</p><p>##Reddit</p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3ftijc/is_react_rendered_on_the_backend_actually_faster/\">Is react rendered on the backend actually faster than templating languages?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3fbst3/can_stores_maintain_state_after_their_attached/\">Can stores maintain state after their attached components unmount?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3fapu3/beginner_here_cant_figure_out_how_to_add_a/\">Beginner here, can’t figure out how to add a message to a chat component</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3g3xj8/question_best_practice_for_handling_error_with/\">Best Practice for handling error with react/flux?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3g3on5/whats_the_best_beginner_resource_to_learn_react/\">What’s the best beginner resource to learn React?</a></p><p><a href=\"https://www.reddit.com/r/reactjs/comments/3fuzu6/remove_item_from_thisstateusers/\">How do I remove an item from this.state.users?</a></p><p>##Stackoverflow</p><p><a href=\"http://stackoverflow.com/questions/31858101/react-appends-px-to-stop-opacity-css-value\">React appends ‘px’ to stop-opacity css value</a></p><p><a href=\"http://stackoverflow.com/questions/31841949/react-this-cloneelement-and-es6\">React, “this”, cloneElement and es6</a></p><p><a href=\"http://stackoverflow.com/questions/31868993/do-i-need-flux-store-for-this-purpose\">Do I need Flux Store for this purpose?</a></p><p>##React Starter Kits</p><p><a href=\"https://github.com/kriasoft/react-starter-kit\">React Starter Kit</a> — a skeleton of an “isomorphic” web application / SPA built with React.js, Express, Flux, ES6+, JSX, Babel, PostCSS, Webpack, BrowserSync…</p><p><a href=\"https://github.com/mweststrate/react-mobservable-boilerplate\">react-mobservable-boilerplate</a></p><p><a href=\"https://github.com/ipselon/react-ui-builder\">React UI Builder</a></p><p><a href=\"https://github.com/henrikjoreteg/hjs-webpack\">HJS Webpack</a> Helpers/presets for setting up webpack with hotloading react and ES6(2015) using Babel.</p><p><a href=\"https://github.com/gaearon/react-hot-boilerplate\">React Hot Boilerplate</a></p><p>##Random</p><p><a href=\"https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux\">What the Flux?! Let’s Redux.</a></p><p><a href=\"http://facebook.github.io/react/blog/2015/08/03/new-react-devtools-beta.html\">New React Devtools</a></p><p><a href=\"https://jaxbot.me/articles/setting-up-vim-for-react-js-jsx-02-03-2015\">Setting up Vim for React</a></p><p><a href=\"https://www.designernews.co/stories/53875-show-dn-just-rebuilt-my-portfolio-w-reactjs\">Just rebuilt my portfolio w/ React.js</a></p><p>Don’t forget our recent posts:</p><p><a href=\"https://reactjsnews.com/composing-components\">React.Component vs React.createClass</a></p><p><a href=\"https://reactjsnews.com/modals-in-react\">Modals in React</a></p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "React.Component vs React.createClass",
      "pubDate": "2015-08-06",
      "link": "https://reactjsnews.com/composing-components",
      "guid": "https://reactjsnews.com/composing-components",
      "author": "",
      "thumbnail": "",
      "description": "<p>React has supported building components two different ways for a few months. You can extend from <code class=\"highlighter-rouge\">React.Component</code> or use <code class=\"highlighter-rouge\">React.createClass</code> which has been available since the beginning of React. Is there a good reason to use one over the other?</p><p>Maybe, maybe not. That’s up to you. Big names in the React community generally lean the same way:</p><blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> \"you should switch because you want to look cool and argue about mixins\" :P</p>— Ryan Florence (@ryanflorence) <a href=\"https://twitter.com/ryanflorence/status/627985314393382912\">August 2, 2015</a></blockquote><blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> There aren't really any good arguments for using classes in React besides the fact that people who are used to OOP grok them.</p>— Michael Jackson (@mjackson) <a href=\"https://twitter.com/mjackson/status/628197552588886016\">August 3, 2015</a></blockquote><p>There’s also those of us who are more neutral on the subject:</p><blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/mjackson\">@mjackson</a> <a href=\"https://twitter.com/ReactJSNews\">@reactjsnews</a> arguing ES6 class vs React.createClass is like constructor pttrn vs Factory pttrn. They BOTH are just classes.</p>— Naman Goel (@naman34) <a href=\"https://twitter.com/naman34/status/628316538202947585\">August 3, 2015</a></blockquote><blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/mjackson\">@mjackson</a> <a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> it's just a matter of taste. It has no real impact, which syntax you use while semantics stays the same</p>— Alexey Frolov (@__fro) <a href=\"https://twitter.com/__fro/status/628209100187402240\">August 3, 2015</a></blockquote><p>Here’s my take: In the large scheme of things, it doesn’t matter that much. For most of the cases out there, the difference between <code class=\"highlighter-rouge\">React.createClass</code> and <code class=\"highlighter-rouge\">class X extends React.component</code> is that of syntax. If you don’t use mixins or decorators often, just choose the syntax you like the best.</p><p>But apart from that, there are some real reasons to choose one way over the other.</p><p>There are some real features you lose by going with ES6 Classes (I’m not going to say ES2015, you can’t make me!) — namely mixins, autoBound functions and the oft-forgotten this.isMounted method. ES6 classes also means you now have a hard dependency on a tool like Babel. If you’ve not embraced JSX, and are currently writing ES5 code that doesn’t need transpilation, this might be a dealbreaker for you.</p><p>But before we get into the pros and cons list, let say something that people tend to overlook. Using ES6 classes instead of React.createClass DOES NOT make your code any more or less Object oriented. It’s just a different syntax for defining classes folks, it has a fewer features, but essentially you’re moving from a factory pattern to a constructor pattern. So, if you like your code nice and functional, this should be a non-debate for you.</p><p>On the flip side, using ES6 classes does make it easier to do inheritance. But please, don’t. Let me put it this way, if you’re going to use ES6 classes just so you can make deep inheritance chains, just stick to React.createClass and write some mixins.</p><h2 id=\"reasons-to-use-reactcreateclass\">Reasons to use React.createClass</h2><h3 id=\"i-like-auto-binding-functions\">“I like auto-binding functions”</h3><p>This is a valid argument, except you <strong>can</strong> autobind with ES2015 classes, (See the <a href=\"https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding\">React blog post</a>)</p><p>Using Babel stage: 0 (which I’m personally a huge fan of) you can write your classes like this:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">Counter</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">tick</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div><p>If you think stage: 0 is way too extreme, there are other options out there. You can, for example, use an <a href=\"https://github.com/andreypopp/autobind-decorator\">autobind decorator</a>:</p><p>But decorators are a stage: 0 feature, I hear you say. Yes, but you don’t need stage: 0:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">Counter</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">tick</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">(){</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">autobind</span><span class=\"p\">(</span><span class=\"nx\">Counter</span><span class=\"p\">)</span></code></pre></div><h3 id=\"i-like-mixins\">“I like mixins”</h3><p>This is pretty much the main reason people are sticking to React.createClass, and for good reason. There are large React code bases that rely on mixins. React-router, for example, gets a lot of power by using mixins.Again, you can use <a href=\"https://www.npmjs.com/package/react-mixin\">React-mixin</a>, to use mixins with ES6 classes, but you may be getting annoyed by the decorators by now.</p><h3 id=\"little-things-like-thisismounted\">Little things like this.isMounted</h3><p>You hardly ever need to use them, and when you do, they are easy to add. Personally I find no reason for using <code class=\"highlighter-rouge\">this.isMounted</code> in your code.</p><h2 id=\"reasons-to-switch-to-the-es6-syntax\">Reasons to switch to the ES6 syntax</h2><h3 id=\"autobinding\">Autobinding?</h3><p>Maybe this is stockholme syndrome, but we’ve been dealing with context issues in Javascript so long, that it’s starting to feel right. The automatic autobinding that React.createClass handles for you can be confusing to beginners, and the implicit nature of the binding can be confusing even after months for some.ES6 classes make you explicitly bind your methods. Which makes everything clearer, and will help developers new to React grok what’s going on. With some of the latest Babel-supported ES6/7 features, manual binding isn’t much of a problem.</p><h3 id=\"move-over-mixins-use-higher-order-components\">Move over Mixins, use Higher-Order-Components</h3><p>Go to any conversation about ES6 classes, and you’ll find someone telling you to use composition over inheritance. You may have seen this meme before:</p><p><img src=\"https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcRW8W5l3CTR2UAHMvtdvCT-hyJc3Od5gJnyXyS6qrQQDXWLPevMkr164v_S\" alt=\"Compose all the things\"></p><p>The fact is that inheritance is a terrible way to code. It’s error-prone, clunky and hard to understand. It can lead to extremely brittle code, and forces you to write all your code the same way. Mixins are definitely a much better solution, but developers still tend to abuse them to do things that could simply be done with composition. Who said you can’t be functional with classes? As an added bonus, Higher-Order-Component will work with both kinds of classes, and will be forward compatible with pure functions.</p><p>On the other hand, using decorator functions, you can do some very powerful things with ES6 classes, such as polyfill the oft-discussed polyfill API. This power should be used sparingly, but when you do need it, it’s nice to have.</p><h3 id=\"no-cruft\">No Cruft</h3><p>Getting rid of features such as this.isMounted which is rarely used in practice helps React be lighter and more nimble. Over time this is also helping React be faster. I know we all love React, but we also want to keep winning the speed tests, don’t we.</p><h3 id=\"flowtypes\">FlowTypes</h3><p>This is one is near and dear to my heart. For a very long time, I’ve pretty much ignored Typescript and Flow, but after losing a whole day to a typo in an event name, I started using flow in my code and I haven’t looked back. Flow lets you embrace it slowly on a file-by-file basis, and even though it may make you jump through hoops sometimes to work around errors, it will find a whole bunch of subtle errors that you didn’t even know existed.</p><p>But what does this have anything to do with ES6 class syntax? Flowtype (and typescript) are much easier to use if you’re using ES6 classes.</p><p>This is how you can annotate properties in an ES6 class:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Class</span> <span class=\"nx\">X</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nl\">someProp</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"nx\">number</span><span class=\"p\">;</span><span class=\"nl\">state</span><span class=\"p\">:</span> <span class=\"nx\">SomeType</span><span class=\"p\">;</span><span class=\"nl\">props</span><span class=\"p\">:</span> <span class=\"nx\">SomeType</span><span class=\"p\">;</span><span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div><p>The same is a little more complicated with React.createClass</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">someProp</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"nx\">number</span><span class=\"p\">),</span><span class=\"p\">...</span><span class=\"p\">})</span></code></pre></div><p>You can’t even define types for props and state with flow with React.createClass. Instead, flow depends on a huge amount of custom code to figure out the types for props by looking at propTypes. In practice, it never works that well. And type checking state is simply not even possible.</p><p>##Conclusion</p><p>Neither of these options for creating your classes are going away anytime soon. I feel that things are headed towards the ES6 way of doing things but it will be a while until it’s mainstream. If it ever becomes something everyone chooses over <code class=\"highlighter-rouge\">createClass</code>, Javascript needs more than just syntactic sugar, it needs real classes. I choose to write my components the ES6 way mainly because I feel that it looks a little nicer, no commas after every function and the downsides to using this syntax doesn’t bother me that much. We would love to hear feedback in the comments about what you think! Hopefully we’ll discuss this on the next episode of the <a href=\"http://reactpodcast.com\">React Podcast</a>.</p>",
      "content": "<p>React has supported building components two different ways for a few months. You can extend from <code class=\"highlighter-rouge\">React.Component</code> or use <code class=\"highlighter-rouge\">React.createClass</code> which has been available since the beginning of React. Is there a good reason to use one over the other?</p><p>Maybe, maybe not. That’s up to you. Big names in the React community generally lean the same way:</p><blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> \"you should switch because you want to look cool and argue about mixins\" :P</p>— Ryan Florence (@ryanflorence) <a href=\"https://twitter.com/ryanflorence/status/627985314393382912\">August 2, 2015</a></blockquote><blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> There aren't really any good arguments for using classes in React besides the fact that people who are used to OOP grok them.</p>— Michael Jackson (@mjackson) <a href=\"https://twitter.com/mjackson/status/628197552588886016\">August 3, 2015</a></blockquote><p>There’s also those of us who are more neutral on the subject:</p><blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/mjackson\">@mjackson</a> <a href=\"https://twitter.com/ReactJSNews\">@reactjsnews</a> arguing ES6 class vs React.createClass is like constructor pttrn vs Factory pttrn. They BOTH are just classes.</p>— Naman Goel (@naman34) <a href=\"https://twitter.com/naman34/status/628316538202947585\">August 3, 2015</a></blockquote><blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/mjackson\">@mjackson</a> <a href=\"https://twitter.com/ReactJSNews\">@ReactJSNews</a> it's just a matter of taste. It has no real impact, which syntax you use while semantics stays the same</p>— Alexey Frolov (@__fro) <a href=\"https://twitter.com/__fro/status/628209100187402240\">August 3, 2015</a></blockquote><p>Here’s my take: In the large scheme of things, it doesn’t matter that much. For most of the cases out there, the difference between <code class=\"highlighter-rouge\">React.createClass</code> and <code class=\"highlighter-rouge\">class X extends React.component</code> is that of syntax. If you don’t use mixins or decorators often, just choose the syntax you like the best.</p><p>But apart from that, there are some real reasons to choose one way over the other.</p><p>There are some real features you lose by going with ES6 Classes (I’m not going to say ES2015, you can’t make me!) — namely mixins, autoBound functions and the oft-forgotten this.isMounted method. ES6 classes also means you now have a hard dependency on a tool like Babel. If you’ve not embraced JSX, and are currently writing ES5 code that doesn’t need transpilation, this might be a dealbreaker for you.</p><p>But before we get into the pros and cons list, let say something that people tend to overlook. Using ES6 classes instead of React.createClass DOES NOT make your code any more or less Object oriented. It’s just a different syntax for defining classes folks, it has a fewer features, but essentially you’re moving from a factory pattern to a constructor pattern. So, if you like your code nice and functional, this should be a non-debate for you.</p><p>On the flip side, using ES6 classes does make it easier to do inheritance. But please, don’t. Let me put it this way, if you’re going to use ES6 classes just so you can make deep inheritance chains, just stick to React.createClass and write some mixins.</p><h2 id=\"reasons-to-use-reactcreateclass\">Reasons to use React.createClass</h2><h3 id=\"i-like-auto-binding-functions\">“I like auto-binding functions”</h3><p>This is a valid argument, except you <strong>can</strong> autobind with ES2015 classes, (See the <a href=\"https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#autobinding\">React blog post</a>)</p><p>Using Babel stage: 0 (which I’m personally a huge fan of) you can write your classes like this:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">Counter</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">tick</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div><p>If you think stage: 0 is way too extreme, there are other options out there. You can, for example, use an <a href=\"https://github.com/andreypopp/autobind-decorator\">autobind decorator</a>:</p><p>But decorators are a stage: 0 feature, I hear you say. Yes, but you don’t need stage: 0:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">Counter</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">tick</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">(){</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">autobind</span><span class=\"p\">(</span><span class=\"nx\">Counter</span><span class=\"p\">)</span></code></pre></div><h3 id=\"i-like-mixins\">“I like mixins”</h3><p>This is pretty much the main reason people are sticking to React.createClass, and for good reason. There are large React code bases that rely on mixins. React-router, for example, gets a lot of power by using mixins.Again, you can use <a href=\"https://www.npmjs.com/package/react-mixin\">React-mixin</a>, to use mixins with ES6 classes, but you may be getting annoyed by the decorators by now.</p><h3 id=\"little-things-like-thisismounted\">Little things like this.isMounted</h3><p>You hardly ever need to use them, and when you do, they are easy to add. Personally I find no reason for using <code class=\"highlighter-rouge\">this.isMounted</code> in your code.</p><h2 id=\"reasons-to-switch-to-the-es6-syntax\">Reasons to switch to the ES6 syntax</h2><h3 id=\"autobinding\">Autobinding?</h3><p>Maybe this is stockholme syndrome, but we’ve been dealing with context issues in Javascript so long, that it’s starting to feel right. The automatic autobinding that React.createClass handles for you can be confusing to beginners, and the implicit nature of the binding can be confusing even after months for some.ES6 classes make you explicitly bind your methods. Which makes everything clearer, and will help developers new to React grok what’s going on. With some of the latest Babel-supported ES6/7 features, manual binding isn’t much of a problem.</p><h3 id=\"move-over-mixins-use-higher-order-components\">Move over Mixins, use Higher-Order-Components</h3><p>Go to any conversation about ES6 classes, and you’ll find someone telling you to use composition over inheritance. You may have seen this meme before:</p><p><img src=\"https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcRW8W5l3CTR2UAHMvtdvCT-hyJc3Od5gJnyXyS6qrQQDXWLPevMkr164v_S\" alt=\"Compose all the things\"></p><p>The fact is that inheritance is a terrible way to code. It’s error-prone, clunky and hard to understand. It can lead to extremely brittle code, and forces you to write all your code the same way. Mixins are definitely a much better solution, but developers still tend to abuse them to do things that could simply be done with composition. Who said you can’t be functional with classes? As an added bonus, Higher-Order-Component will work with both kinds of classes, and will be forward compatible with pure functions.</p><p>On the other hand, using decorator functions, you can do some very powerful things with ES6 classes, such as polyfill the oft-discussed polyfill API. This power should be used sparingly, but when you do need it, it’s nice to have.</p><h3 id=\"no-cruft\">No Cruft</h3><p>Getting rid of features such as this.isMounted which is rarely used in practice helps React be lighter and more nimble. Over time this is also helping React be faster. I know we all love React, but we also want to keep winning the speed tests, don’t we.</p><h3 id=\"flowtypes\">FlowTypes</h3><p>This is one is near and dear to my heart. For a very long time, I’ve pretty much ignored Typescript and Flow, but after losing a whole day to a typo in an event name, I started using flow in my code and I haven’t looked back. Flow lets you embrace it slowly on a file-by-file basis, and even though it may make you jump through hoops sometimes to work around errors, it will find a whole bunch of subtle errors that you didn’t even know existed.</p><p>But what does this have anything to do with ES6 class syntax? Flowtype (and typescript) are much easier to use if you’re using ES6 classes.</p><p>This is how you can annotate properties in an ES6 class:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Class</span> <span class=\"nx\">X</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nl\">someProp</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"nx\">number</span><span class=\"p\">;</span><span class=\"nl\">state</span><span class=\"p\">:</span> <span class=\"nx\">SomeType</span><span class=\"p\">;</span><span class=\"nl\">props</span><span class=\"p\">:</span> <span class=\"nx\">SomeType</span><span class=\"p\">;</span><span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div><p>The same is a little more complicated with React.createClass</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">someProp</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"nx\">number</span><span class=\"p\">),</span><span class=\"p\">...</span><span class=\"p\">})</span></code></pre></div><p>You can’t even define types for props and state with flow with React.createClass. Instead, flow depends on a huge amount of custom code to figure out the types for props by looking at propTypes. In practice, it never works that well. And type checking state is simply not even possible.</p><p>##Conclusion</p><p>Neither of these options for creating your classes are going away anytime soon. I feel that things are headed towards the ES6 way of doing things but it will be a while until it’s mainstream. If it ever becomes something everyone chooses over <code class=\"highlighter-rouge\">createClass</code>, Javascript needs more than just syntactic sugar, it needs real classes. I choose to write my components the ES6 way mainly because I feel that it looks a little nicer, no commas after every function and the downsides to using this syntax doesn’t bother me that much. We would love to hear feedback in the comments about what you think! Hopefully we’ll discuss this on the next episode of the <a href=\"http://reactpodcast.com\">React Podcast</a>.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Modals in React",
      "pubDate": "2015-07-29",
      "link": "https://reactjsnews.com/modals-in-react",
      "guid": "https://reactjsnews.com/modals-in-react",
      "author": "",
      "thumbnail": "",
      "description":"<p>Have you wanted to use some type of modal in React but didn’t know where to start?I’ll be going over a few community-built components that help you create modals.</p><p>There’s been a few times I’ve needed a modal in the app I’m building. Thankfully the community has made a few really good components for this.Let’s jump right in to the first:</p><h3 id=\"elemental-uis-modal\">Elemental UI’s modal</h3><p>You can check out a demo of it right <a href=\"http://elemental-ui.com/modal\">here</a>. The markup is straight forward:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">isOpen</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">modalIsOpen</span><span class=\"p\">}</span> <span class=\"nx\">onCancel</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleModal</span><span class=\"p\">}</span> <span class=\"nx\">backdropClosesModal</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalHeader</span> <span class=\"nx\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Live Demo\"</span> <span class=\"nx\">showCloseButton</span> <span class=\"nx\">onClose</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleModal</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">form</span> <span class=\"nx\">action</span><span class=\"o\">=</span><span class=\"s2\">\"#\"</span> <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">submitForm</span><span class=\"p\">}</span> <span class=\"nx\">noValidate</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalBody</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">FormField</span> <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"s2\">\"Email\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">FormInput</span> <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"s2\">\"Email\"</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"email\"</span> <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"s2\">\"email\"</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"email\"</span> <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">}</span> <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">updateInput</span><span class=\"p\">}</span> <span class=\"nx\">required</span> <span class=\"o\">/&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/FormField</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/ModalBody</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"nx\">ModalFooter</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">submitButton</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleModal</span><span class=\"p\">}</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"link-cancel\"</span> <span class=\"nx\">disabled</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">formProcessing</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Cancel</span><span class=\"o\">&lt;</span><span class=\"sr\">/Button</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/ModalFooter</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/form</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>You can place things in the header or footer just as easily as the body which is nice. I also like the look of it, and Elemental UI as a whole.My biggest gripe about this modal component is that on scrolling the page it disappears.</p><h3 id=\"react-bootstrap\">React Bootstrap</h3><p>This is probably one that everyone has heard of, as it is one of the oldest React projects. You can find documentation <a href=\"http://react-bootstrap.github.io/components.html#modals\">here</a>. It consists of a couple sub components for the header and footer as well.The root <code class=\"highlighter-rouge\">modal</code> component expects two props, a boolean called <code class=\"highlighter-rouge\">show</code>, and a function to be called <code class=\"highlighter-rouge\">onHide</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">show</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">showModal</span><span class=\"p\">}</span> <span class=\"nx\">onHide</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Header</span> <span class=\"nx\">closeButton</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Title</span><span class=\"o\">&gt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">heading</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Title</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Header</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Body</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h4</span><span class=\"o\">&gt;</span><span class=\"nx\">Text</span> <span class=\"k\">in</span> <span class=\"nx\">a</span> <span class=\"nx\">modal</span><span class=\"o\">&lt;</span><span class=\"sr\">/h4</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Body</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Footer</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Close</span><span class=\"o\">&lt;</span><span class=\"sr\">/Button</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Footer</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>The <code class=\"highlighter-rouge\">close</code> and <code class=\"highlighter-rouge\">show</code> functions are flipping the state:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">close</span><span class=\"p\">(){</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">showModal</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span><span class=\"p\">}</span></code></pre></div><h3 id=\"rackts-modal\">Rackt’s Modal</h3><p>Rackt’s modal is much simpler than the other two, as seen on the <a href=\"https://github.com/rackt/react-modal\">github page</a>.</p><p>It doesn’t have any sub components. It accepts <code class=\"highlighter-rouge\">isOpen</code> (bool) and <code class=\"highlighter-rouge\">onRequestClose</code> (function) as props:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">isOpen</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">bool</span><span class=\"p\">}</span> <span class=\"nx\">onRequestClose</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">fn</span><span class=\"p\">}</span> <span class=\"nx\">closeTimeoutMS</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">n</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">Content</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">p</span><span class=\"o\">&gt;</span><span class=\"nx\">Etc</span><span class=\"p\">.</span><span class=\"o\">&lt;</span><span class=\"sr\">/p</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>Those are the top three modal components out there. At my work, we use popovers a lot. My coworker made his own component called <a href=\"https://github.com/dphaener/reactable-popover\">reactable-popover</a> that has been really useful for me. Sadly he’s always too busy to document anything, so I’ll throw in a little example here.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Popover</span><span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"nx\">toggleButton</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">button</span><span class=\"p\">}</span><span class=\"nx\">handleClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">togglePopover</span><span class=\"p\">}</span><span class=\"nx\">position</span><span class=\"o\">=</span><span class=\"s1\">'left'</span><span class=\"nx\">isOpen</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span><span class=\"nx\">topOffset</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">}</span><span class=\"nx\">leftOffset</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">content</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Popover</span><span class=\"err\">&gt;</span></code></pre></div><p>The props are very self explanatory, except for toggleButton. It expects a component or some jsx to be passed into it.</p><h3 id=\"boron-modal\">Boron Modal</h3><p><a href=\"http://madscript.com/boron/\">Boron</a> comes out of the box with some animations.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Modal</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'boron/DropModal'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">Example</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">showModal</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"na\">hideModal</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">hide</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">showModal</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Open</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"modal\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h2</span><span class=\"o\">&gt;</span><span class=\"nx\">I</span> <span class=\"nx\">am</span> <span class=\"nx\">a</span> <span class=\"nx\">dialog</span><span class=\"o\">&lt;</span><span class=\"sr\">/h2</span><span class=\"err\">&gt;</span>          <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">hideModal</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Close</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>The author suggests placing a ref on the modal. Then you can open and close it via <code class=\"highlighter-rouge\">this.refs.modal.show()</code> and <code class=\"highlighter-rouge\">this.refs.modal.hide()</code>.</p><h3 id=\"react-modal-dialog\">React Modal Dialog</h3><p><a href=\"http://www.qimingweng.com/react-modal-dialog\">React modal dialog</a> is an idiomatic way to show dialogs. You simply render the dialog component in when you want to show one, and don’t render it when you don’t. This is achieved through through a ‘portal’.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">ModalContainer</span><span class=\"p\">,</span> <span class=\"nx\">ModalDialog</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'react-modal-dialog'</span><span class=\"p\">;</span><span class=\"c1\">// In a render function:</span><span class=\"kr\">class</span> <span class=\"nx\">Button</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">isShowingDialog</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"button\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Button</span> <span class=\"nx\">Text</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">isShowingDialog</span> <span class=\"p\">?</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalContainer</span> <span class=\"nx\">onClose</span><span class=\"o\">=</span><span class=\"p\">{...}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalDialog</span> <span class=\"nx\">onClose</span><span class=\"o\">=</span><span class=\"p\">{...}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Dialog</span> <span class=\"nx\">Content</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;</span>            <span class=\"o\">&lt;</span><span class=\"nx\">p</span><span class=\"o\">&gt;</span><span class=\"nx\">More</span> <span class=\"nx\">Content</span><span class=\"p\">.</span> <span class=\"nx\">Anything</span> <span class=\"nx\">goes</span> <span class=\"nx\">here</span><span class=\"o\">&lt;</span><span class=\"sr\">/p</span><span class=\"err\">&gt;</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/ModalDialog</span><span class=\"err\">&gt;</span>          <span class=\"o\">&lt;</span><span class=\"sr\">/ModalContainer</span><span class=\"err\">&gt;</span>        <span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span>    <span class=\"p\">)</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>Thanks for checking out the post, don’t forget to follow <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a> for more content! Leave a comment if you have any suggestions. As always, you’re welcome to modify this post (or write your own!) by sending in a pull request on <a href=\"http://github.com/legitcode/reactjsnews\">github</a>!</p><h3 id=\"simple-react-modal\">Simple React Modal</h3><p>After writing this post, I realized many of these modals have limitations and force things on you. In my case, most forced some css rules that I could not override. For this reason, I <a href=\"https://github.com/zackify/simple-react-modal\">made my own</a>. You can view a demo <a href=\"http://zach.codes/simple-react-modal/\">here</a> with the default styling.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">import</span> <span class=\"nx\">Modal</span> <span class=\"nx\">from</span> <span class=\"s1\">'simple-modal'</span><span class=\"kr\">import</span> <span class=\"s1\">'simple-react-modal/dist/modal'</span> <span class=\"c1\">//import the base css</span><span class=\"c1\">//inside the render</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span><span class=\"o\">=&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">()}}</span><span class=\"o\">&gt;</span><span class=\"nx\">Open</span> <span class=\"nx\">Modal</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"modal\"</span><span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"simple-modal your-class\"</span><span class=\"nx\">closeOnOuterClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">false</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"close\"</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span><span class=\"o\">=&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">hide</span><span class=\"p\">()}}</span><span class=\"o\">&gt;</span><span class=\"nx\">X</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">hey</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>You can import the base css, or not at all and completely design it yourself. It’s more of a skeleton.</p>",
      "content":"<p>Have you wanted to use some type of modal in React but didn’t know where to start?I’ll be going over a few community-built components that help you create modals.</p><p>There’s been a few times I’ve needed a modal in the app I’m building. Thankfully the community has made a few really good components for this.Let’s jump right in to the first:</p><h3 id=\"elemental-uis-modal\">Elemental UI’s modal</h3><p>You can check out a demo of it right <a href=\"http://elemental-ui.com/modal\">here</a>. The markup is straight forward:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">isOpen</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">modalIsOpen</span><span class=\"p\">}</span> <span class=\"nx\">onCancel</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleModal</span><span class=\"p\">}</span> <span class=\"nx\">backdropClosesModal</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalHeader</span> <span class=\"nx\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Live Demo\"</span> <span class=\"nx\">showCloseButton</span> <span class=\"nx\">onClose</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleModal</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">form</span> <span class=\"nx\">action</span><span class=\"o\">=</span><span class=\"s2\">\"#\"</span> <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">submitForm</span><span class=\"p\">}</span> <span class=\"nx\">noValidate</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalBody</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">FormField</span> <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"s2\">\"Email\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">FormInput</span> <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"s2\">\"Email\"</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"email\"</span> <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"s2\">\"email\"</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"email\"</span> <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">}</span> <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">updateInput</span><span class=\"p\">}</span> <span class=\"nx\">required</span> <span class=\"o\">/&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/FormField</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/ModalBody</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"nx\">ModalFooter</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">submitButton</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleModal</span><span class=\"p\">}</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"link-cancel\"</span> <span class=\"nx\">disabled</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">formProcessing</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Cancel</span><span class=\"o\">&lt;</span><span class=\"sr\">/Button</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/ModalFooter</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/form</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>You can place things in the header or footer just as easily as the body which is nice. I also like the look of it, and Elemental UI as a whole.My biggest gripe about this modal component is that on scrolling the page it disappears.</p><h3 id=\"react-bootstrap\">React Bootstrap</h3><p>This is probably one that everyone has heard of, as it is one of the oldest React projects. You can find documentation <a href=\"http://react-bootstrap.github.io/components.html#modals\">here</a>. It consists of a couple sub components for the header and footer as well.The root <code class=\"highlighter-rouge\">modal</code> component expects two props, a boolean called <code class=\"highlighter-rouge\">show</code>, and a function to be called <code class=\"highlighter-rouge\">onHide</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">show</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">showModal</span><span class=\"p\">}</span> <span class=\"nx\">onHide</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Header</span> <span class=\"nx\">closeButton</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Title</span><span class=\"o\">&gt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">heading</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Title</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Header</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Body</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h4</span><span class=\"o\">&gt;</span><span class=\"nx\">Text</span> <span class=\"k\">in</span> <span class=\"nx\">a</span> <span class=\"nx\">modal</span><span class=\"o\">&lt;</span><span class=\"sr\">/h4</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Body</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">Modal</span><span class=\"p\">.</span><span class=\"nx\">Footer</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Close</span><span class=\"o\">&lt;</span><span class=\"sr\">/Button</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"sr\">/Modal.Footer</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>The <code class=\"highlighter-rouge\">close</code> and <code class=\"highlighter-rouge\">show</code> functions are flipping the state:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">close</span><span class=\"p\">(){</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">showModal</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span><span class=\"p\">}</span></code></pre></div><h3 id=\"rackts-modal\">Rackt’s Modal</h3><p>Rackt’s modal is much simpler than the other two, as seen on the <a href=\"https://github.com/rackt/react-modal\">github page</a>.</p><p>It doesn’t have any sub components. It accepts <code class=\"highlighter-rouge\">isOpen</code> (bool) and <code class=\"highlighter-rouge\">onRequestClose</code> (function) as props:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">isOpen</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">bool</span><span class=\"p\">}</span> <span class=\"nx\">onRequestClose</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">fn</span><span class=\"p\">}</span> <span class=\"nx\">closeTimeoutMS</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">n</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">Content</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">p</span><span class=\"o\">&gt;</span><span class=\"nx\">Etc</span><span class=\"p\">.</span><span class=\"o\">&lt;</span><span class=\"sr\">/p</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>Those are the top three modal components out there. At my work, we use popovers a lot. My coworker made his own component called <a href=\"https://github.com/dphaener/reactable-popover\">reactable-popover</a> that has been really useful for me. Sadly he’s always too busy to document anything, so I’ll throw in a little example here.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Popover</span><span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"nx\">toggleButton</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">button</span><span class=\"p\">}</span><span class=\"nx\">handleClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">togglePopover</span><span class=\"p\">}</span><span class=\"nx\">position</span><span class=\"o\">=</span><span class=\"s1\">'left'</span><span class=\"nx\">isOpen</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span><span class=\"nx\">topOffset</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">}</span><span class=\"nx\">leftOffset</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">content</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Popover</span><span class=\"err\">&gt;</span></code></pre></div><p>The props are very self explanatory, except for toggleButton. It expects a component or some jsx to be passed into it.</p><h3 id=\"boron-modal\">Boron Modal</h3><p><a href=\"http://madscript.com/boron/\">Boron</a> comes out of the box with some animations.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Modal</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'boron/DropModal'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">Example</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">showModal</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"na\">hideModal</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">hide</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">showModal</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Open</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"modal\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h2</span><span class=\"o\">&gt;</span><span class=\"nx\">I</span> <span class=\"nx\">am</span> <span class=\"nx\">a</span> <span class=\"nx\">dialog</span><span class=\"o\">&lt;</span><span class=\"sr\">/h2</span><span class=\"err\">&gt;</span>          <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">hideModal</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Close</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>The author suggests placing a ref on the modal. Then you can open and close it via <code class=\"highlighter-rouge\">this.refs.modal.show()</code> and <code class=\"highlighter-rouge\">this.refs.modal.hide()</code>.</p><h3 id=\"react-modal-dialog\">React Modal Dialog</h3><p><a href=\"http://www.qimingweng.com/react-modal-dialog\">React modal dialog</a> is an idiomatic way to show dialogs. You simply render the dialog component in when you want to show one, and don’t render it when you don’t. This is achieved through through a ‘portal’.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">ModalContainer</span><span class=\"p\">,</span> <span class=\"nx\">ModalDialog</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'react-modal-dialog'</span><span class=\"p\">;</span><span class=\"c1\">// In a render function:</span><span class=\"kr\">class</span> <span class=\"nx\">Button</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">isShowingDialog</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"button\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Button</span> <span class=\"nx\">Text</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">isShowingDialog</span> <span class=\"p\">?</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalContainer</span> <span class=\"nx\">onClose</span><span class=\"o\">=</span><span class=\"p\">{...}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ModalDialog</span> <span class=\"nx\">onClose</span><span class=\"o\">=</span><span class=\"p\">{...}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Dialog</span> <span class=\"nx\">Content</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;</span>            <span class=\"o\">&lt;</span><span class=\"nx\">p</span><span class=\"o\">&gt;</span><span class=\"nx\">More</span> <span class=\"nx\">Content</span><span class=\"p\">.</span> <span class=\"nx\">Anything</span> <span class=\"nx\">goes</span> <span class=\"nx\">here</span><span class=\"o\">&lt;</span><span class=\"sr\">/p</span><span class=\"err\">&gt;</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/ModalDialog</span><span class=\"err\">&gt;</span>          <span class=\"o\">&lt;</span><span class=\"sr\">/ModalContainer</span><span class=\"err\">&gt;</span>        <span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span>    <span class=\"p\">)</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>Thanks for checking out the post, don’t forget to follow <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a> for more content! Leave a comment if you have any suggestions. As always, you’re welcome to modify this post (or write your own!) by sending in a pull request on <a href=\"http://github.com/legitcode/reactjsnews\">github</a>!</p><h3 id=\"simple-react-modal\">Simple React Modal</h3><p>After writing this post, I realized many of these modals have limitations and force things on you. In my case, most forced some css rules that I could not override. For this reason, I <a href=\"https://github.com/zackify/simple-react-modal\">made my own</a>. You can view a demo <a href=\"http://zach.codes/simple-react-modal/\">here</a> with the default styling.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">import</span> <span class=\"nx\">Modal</span> <span class=\"nx\">from</span> <span class=\"s1\">'simple-modal'</span><span class=\"kr\">import</span> <span class=\"s1\">'simple-react-modal/dist/modal'</span> <span class=\"c1\">//import the base css</span><span class=\"c1\">//inside the render</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span><span class=\"o\">=&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">show</span><span class=\"p\">()}}</span><span class=\"o\">&gt;</span><span class=\"nx\">Open</span> <span class=\"nx\">Modal</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Modal</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"modal\"</span><span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"simple-modal your-class\"</span><span class=\"nx\">closeOnOuterClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">false</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"close\"</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span><span class=\"o\">=&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refs</span><span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">hide</span><span class=\"p\">()}}</span><span class=\"o\">&gt;</span><span class=\"nx\">X</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">hey</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/Modal</span><span class=\"err\">&gt;</span></code></pre></div><p>You can import the base css, or not at all and completely design it yourself. It’s more of a skeleton.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "ES6 Gotchas",
      "pubDate": "2015-05-25",
      "link": "https://reactjsnews.com/es6-gotchas",
      "guid": "https://reactjsnews.com/es6-gotchas",
      "author": "",
      "thumbnail": "",
      "description":"<p><strong>Function Bindings</strong></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span></code></pre></div><p>What’s wrong with that? If you’re not using <code class=\"highlighter-rouge\">React.createClass</code>, which autobinds functions, you need to do it yourself. The correct way would be add it to constructor:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">'react'</span><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">ComponentName</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">(){</span><span class=\"kr\">super</span><span class=\"p\">()</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"p\">...</span></code></pre></div><p>Another way of dealing with this is by enabling stage 0 in babel to include <a href=\"https://gist.github.com/jeffmo/054df782c05639da2adb\">es7 classProperties</a></p><p><strong>Warning</strong>Use with extreme caution. Since this is <a href=\"https://babeljs.io/docs/usage/experimental/\">Stage 0 - Strawman</a>. This is subject to change in the future and may require a bit of rewrite of your code.</p><p>The idea is to combine fat arrow syntax which automatically binds to this. A more detailed explanation can be found <a href=\"http://www.ian-thomas.net/autobinding-react-and-es6-classes/\">here</a></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">ComponentName</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"nx\">handleClick</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div><p>It may seem tempting to use <code class=\"highlighter-rouge\">handler.bind(this)</code> or the <a href=\"https://github.com/zenparsing/es-function-bind\">ES7</a> <code class=\"highlighter-rouge\">::</code> handler syntax to bind handlers in the component’s <code class=\"highlighter-rouge\">render()</code> method. However, this may break the optimization of the <code class=\"highlighter-rouge\">PureRenderMixin</code> and will create a new function every time the <code class=\"highlighter-rouge\">render()</code> method is called.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">ComponentName</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">handleClick</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">(){</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"c1\">// this will create a new function every </span><span class=\"c1\">// time the render method is called</span><span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{::</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span><span class=\"p\">}</span><span class=\"o\">&gt;</span> <span class=\"nx\">click</span> <span class=\"o\">&lt;</span><span class=\"sr\">/button&gt;</span><span class=\"err\"></span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p><strong>Static Property Initializers</strong></p><p>In old-school components, you can do this at the start of your component:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">propTypes</span><span class=\"err\">:</span> <span class=\"p\">{</span><span class=\"nl\">field</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">string</span><span class=\"p\">}</span></code></pre></div><p>In ES6/7 components, you have two options, you can specify them after your component class, like so:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Component</span><span class=\"p\">.</span><span class=\"nx\">propTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"c1\">//prop validations</span><span class=\"p\">}</span></code></pre></div><p>Which works fine, but I think doing this is a lot better:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">Test</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span><span class=\"p\">{</span><span class=\"kr\">static</span> <span class=\"nx\">propTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"c1\">//validate here</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">(){</span><span class=\"c1\">//return</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>What’s the “gotcha” you might ask? You need to enable <strong>stage 0</strong> babel transforms to use this.</p><p>Have more examples that you would like to add? Please add on to this post by <a href=\"https://github.com/Legitcode/ReactJSNews/blob/master/posts/2015-05-24-es6-gotchas.md\">sending a pull request</a>!</p>",
      "content":"<p><strong>Function Bindings</strong></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span></code></pre></div><p>What’s wrong with that? If you’re not using <code class=\"highlighter-rouge\">React.createClass</code>, which autobinds functions, you need to do it yourself. The correct way would be add it to constructor:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">'react'</span><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">ComponentName</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">(){</span><span class=\"kr\">super</span><span class=\"p\">()</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"p\">...</span></code></pre></div><p>Another way of dealing with this is by enabling stage 0 in babel to include <a href=\"https://gist.github.com/jeffmo/054df782c05639da2adb\">es7 classProperties</a></p><p><strong>Warning</strong>Use with extreme caution. Since this is <a href=\"https://babeljs.io/docs/usage/experimental/\">Stage 0 - Strawman</a>. This is subject to change in the future and may require a bit of rewrite of your code.</p><p>The idea is to combine fat arrow syntax which automatically binds to this. A more detailed explanation can be found <a href=\"http://www.ian-thomas.net/autobinding-react-and-es6-classes/\">here</a></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">ComponentName</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"nx\">handleClick</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div><p>It may seem tempting to use <code class=\"highlighter-rouge\">handler.bind(this)</code> or the <a href=\"https://github.com/zenparsing/es-function-bind\">ES7</a> <code class=\"highlighter-rouge\">::</code> handler syntax to bind handlers in the component’s <code class=\"highlighter-rouge\">render()</code> method. However, this may break the optimization of the <code class=\"highlighter-rouge\">PureRenderMixin</code> and will create a new function every time the <code class=\"highlighter-rouge\">render()</code> method is called.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">ComponentName</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">handleClick</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"p\">...</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">(){</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"c1\">// this will create a new function every </span><span class=\"c1\">// time the render method is called</span><span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{::</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleClick</span><span class=\"p\">}</span><span class=\"o\">&gt;</span> <span class=\"nx\">click</span> <span class=\"o\">&lt;</span><span class=\"sr\">/button&gt;</span><span class=\"err\"></span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p><strong>Static Property Initializers</strong></p><p>In old-school components, you can do this at the start of your component:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">propTypes</span><span class=\"err\">:</span> <span class=\"p\">{</span><span class=\"nl\">field</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">string</span><span class=\"p\">}</span></code></pre></div><p>In ES6/7 components, you have two options, you can specify them after your component class, like so:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Component</span><span class=\"p\">.</span><span class=\"nx\">propTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"c1\">//prop validations</span><span class=\"p\">}</span></code></pre></div><p>Which works fine, but I think doing this is a lot better:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">Test</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span><span class=\"p\">{</span><span class=\"kr\">static</span> <span class=\"nx\">propTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"c1\">//validate here</span><span class=\"p\">}</span><span class=\"nx\">render</span><span class=\"p\">(){</span><span class=\"c1\">//return</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>What’s the “gotcha” you might ask? You need to enable <strong>stage 0</strong> babel transforms to use this.</p><p>Have more examples that you would like to add? Please add on to this post by <a href=\"https://github.com/Legitcode/ReactJSNews/blob/master/posts/2015-05-24-es6-gotchas.md\">sending a pull request</a>!</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Building Components with React.js and Reflux",
      "pubDate": "2015-04-13",
      "link": "https://reactjsnews.com/building-components-with-react-js-and-flux",
      "guid": "https://reactjsnews.com/building-components-with-react-js-and-flux",
      "author": "",
      "thumbnail": "",
      "description":"<p>React is a great view library. If used just right, it even makes an alright controller. However, sometimes you need something more. That is where Flux can be handy.</p><p>Flux is the Facebook solution to keep the MVC paradigm from becoming unmanageable. If you are wondering whether Flux is right for your project, Dan Abramov made <a href=\"https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6\">“The Case for Flux”</a> a few weeks ago. I cannot recommend his article enough. To summarize, Dan points out that Flux is great if:</p><ul><li>“your data changes over time” and you “care about immediately reflecting those changes in the UI”</li><li>“you want to cache data in memory, but it can change while cached”</li><li>“your data is relational and models include and depend on each other”</li><li>“data is assembled from different sources and can be rendered in several places throughout the UI”</li></ul><p>If none of that sounds important, you probably do not need Flux. Let’s assume it does sound important though. What next?</p><h2 id=\"the-assignment\">The Assignment</h2><p>We are going to write a very simple edit tool. Our component will have two parts. First, a label telling users to “Enter Some Text.” Second, a block where a user can enter some text. That is pretty simple.</p><p>However, we are going to complicate things by requiring that multiple components on the same page display that data in different ways. We are going to complicate things a little further by requiring that there is no global “parent” app. Instead, it is important that we can “sprinkle” the react components on to our page.</p><p>“Why?,” you say. A lot of us are trying to augment legacy apps. While you can generally add sprinkles to a cake, it is often harder to convince your boss to let you re-bake the whole cake. Also, because coordinating such a large single root starts to become really complex as the app grows. And it becomes painful once we need to start making ajax calls or, or add a backbone layer, or, well, anything not display related.</p><h2 id=\"getting-started\">Getting Started</h2><p>The examples in this article are based on the <a href=\"https://github.com/HurricaneJames/dex\">Dex</a> code base. Dex is a Rails and Browserify webapp. However, the concepts in this article should be easily transferrable. We will be working on the BlueBird component, located in <code class=\"highlighter-rouge\">app/assets/javascripts/components/BlueBird.jsx</code>. BlueBird is put in the global scope in <code class=\"highlighter-rouge\">components.js</code> and loaded onto the page by <code class=\"highlighter-rouge\">react_component</code> from the <a href=\"https://github.com/reactjs/react-rails\">react-rails</a> package.</p><p>If you want to follow along and write code as we go grab <a href=\"https://github.com/HurricaneJames/dex/tree/v3.0\">Dex v3.0</a>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone https://github.com/HurricaneJames/dex/tree/v3.0cd dexbundle installnpm installrails s</code></pre></div><p>If you just want to jump to the end, grab <a href=\"https://github.com/HurricaneJames/dex/tree/v3.1\">Dex v3.1</a>. All of the code from this article will be available there.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone https://github.com/HurricaneJames/dex/tree/v3.1cd dexbundle installnpm install# separate consolerails s# optional, and from a different consolenpm run fayeserver# open a browser and point it to http://localhost:3000/pages/index</code></pre></div><h2 id=\"bluebird\">BlueBird</h2><p>This is a super simple React.js component. We will create a two files in the <code class=\"highlighter-rouge\">components</code> directory, <code class=\"highlighter-rouge\">BlueBird.jsx</code> and <code class=\"highlighter-rouge\">BlueBirdContainer.jsx.</code> The container handles any state, the actual component is stateless. This is the container design pattern. and is very useful when creating React components. Since we are using React-Rails, we will also require the container file as a global variable in the <code class=\"highlighter-rouge\">components.js</code> file.</p><p>Starting with the <code class=\"highlighter-rouge\">BlueBird</code> component:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/BlueBird.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">BlueBird</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'BlueBird'</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">string</span><span class=\"p\">,</span><span class=\"na\">onChange</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">func</span><span class=\"p\">},</span><span class=\"na\">onChange</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Enter</span> <span class=\"nx\">Some</span> <span class=\"nx\">Text</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">textarea</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">}</span><span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">}</span><span class=\"nx\">rows</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">15</span><span class=\"p\">}</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdBody</span><span class=\"p\">;</span></code></pre></div><p>As you can see, this really is a very simple React component. The render function has a span telling users to <code class=\"highlighter-rouge\">Enter Some Text</code> and a textarea to actual enter that text. Next, we create our container, a separate component where we will keep state.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBird</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBird'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">BlueBirdContainer</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'BlueBirdContainer'</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">reverse</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">bool</span><span class=\"p\">},</span><span class=\"na\">getInitialState</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">bluebirdBody</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nl\">getContent</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">bluebirdBody</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">).</span><span class=\"nx\">reverse</span><span class=\"p\">().</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">else</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">bluebirdBody</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">},</span><span class=\"na\">onBodyChange</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">bluebirdBody</span><span class=\"p\">:</span> <span class=\"nx\">newValue</span><span class=\"p\">});</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">BlueBird</span> <span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getContent</span><span class=\"p\">()}</span> <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onBodyChange</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdContainer</span><span class=\"p\">;</span></code></pre></div><p>This component is fairly straightforward. It holds an internal state for the text, and if the <code class=\"highlighter-rouge\">reverse</code> prop is set to <code class=\"highlighter-rouge\">true</code>, then it will reverse the text in the text box. This is not particularly useful, except as something interesting we can demo.</p><p>Finally, we will add the component to our app:</p><ul><li><p>add the component to our components.js file</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  BlueBirdContainer = require('./components/BlueBirdContainer');</code></pre></div></li><li><p>add the component to our page</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  &lt;%# app/views/pages/index.html.erb %&gt;&lt;h1&gt;BlueBird - Index&lt;/h1&gt;&lt;%= react_component 'BlueBirdContainer' %&gt;</code></pre></div></li><li><p>start our server</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  rails s</code></pre></div></li><li><p>and load the page in a browser <code class=\"highlighter-rouge\">http://localhost:3000/pages/index</code>).</p></li></ul><p>This gives us a nice simple text box.</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-001.png\" alt=\"Basic BlueBird Container\"></p><h2 id=\"multiple-bluebirds\">Multiple BlueBirds</h2><p>Now that we have a basic component, we want to be able to add it to our page multiple times. Since we are using Rails, we can create a new view <code class=\"highlighter-rouge\">pages/bluebird.html.erb</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;h1&gt;BlueBird&lt;/h1&gt;&lt;%= react_component \"BlueBirdContainer\", {} %&gt;&lt;%= react_component \"BlueBirdContainer\", { reverse: true } %&gt;</code></pre></div><p>We add two components, the second one set to reverse. Then we add it to our <code class=\"highlighter-rouge\">routes.rb</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  get 'pages/bluebird'</code></pre></div><p>Next we setup our <code class=\"highlighter-rouge\">pages_controller.rb</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  def bluebirdend</code></pre></div><p>Then, when we point our browser to <code class=\"highlighter-rouge\">http://localhost:3000/pages/bluebird</code>…</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-002.png\" alt=\"Double Blue Birds\"></p><p>We get two text boxes that are completely unrelated to each other. Not surprising since we never linked the state of the two container components. So, how do we link the two components together. Well, we have a couple options.</p><p>First, we could create a BlueBirdRootApp component. All state for the entire app would be contained in this single component, and it would pass that state down to its children along with callback props. This works great in simple cases, and even in cases where we are designing the entire app from scratch. However, it is a bit limiting when we need to sprinkle our React components into an existing app.</p><p>Second, we use Flux! When thinking back to Abramov’s four cases, our requirement fits perfectly.</p><h2 id=\"flux--reflux\">Flux / Reflux</h2><p>So, what is flux?</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>╔═════════╗     ╔════════════╗     ╔════════╗     ╔═════════════════╗║ Actions ║────&gt;║ Dispatcher ║────&gt;║ Stores ║────&gt;║ View Components ║╚═════════╝     ╚════════════╝     ╚════════╝     ╚═════════════════╝^                                                    │└────────────────────────────────────────────────────┘</code></pre></div><p>Flux is a version of the Model View Controller paradigm that focuses on unidirectional dataflow. It specifies a dispatcher, some stores, some views, and some actions. Actions trigger the dispatcher. The dispatcher routes actions to interested stores. The stores update based on the action, and then notify the views to rerender. Then, the cycle starts all over again.</p><p>There is a lot more detail, but this is where I’m going to stop. Why, because we are going to use Reflux, which is even easier.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>╔═════════╗       ╔════════╗       ╔═════════════════╗║ Actions ║──────&gt;║ Stores ║──────&gt;║ View Components ║╚═════════╝       ╚════════╝       ╚═════════════════╝^                                      │└──────────────────────────────────────┘</code></pre></div><p><a href=\"https://github.com/spoike/refluxjs\">Reflux</a> is an implementation of the basic concepts of Flux by Mikael Brassman. It greatly simplifies Flux by removing the dispatcher. Rather than actions flowing through a dispatcher, actions flow directly to the stores.</p><p>It is still possible to do everything with Reflux that can be done with Flux because stores can listen to other stores. However, in practice, I have yet to find that useful. Mostly, it just leads to overly complex code.</p><h2 id=\"adding-reflux-to-our-project\">Adding Reflux to Our Project</h2><p>The first thing we will need to do is add Reflux to our project. Since we are using browserify, we can add to the <code class=\"highlighter-rouge\">package.json</code> dependencies.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"reflux\": \"^0.2.7\"</code></pre></div><p>Alternatively, you can install it from the command line.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>npm install --save reflux</code></pre></div><p>Then we need to create some actions, create a store to listen to those actions, and finally link that store to our <code class=\"highlighter-rouge\">BlueBirdContainer</code> state. Fortunately, Reflux makes this easy.</p><h2 id=\"create-actions\">Create Actions</h2><p>Reflux provides many ways to create actions. It provides options for sync/async, promises, callbacks, etc… However, every time I have tried anything but the simplest, I have come to regret it. Flux, as an architecture, really wants us to stick to the <code class=\"highlighter-rouge\">Actions -&gt; Stores -&gt; Components -&gt; Actions</code> model. Chen Zihui wrote an interesting article, <a href=\"https://medium.com/@jetupper/hello-react-js-b87c63526e3a\">“Hello, React.js,”</a> about some common React.js/Flux mistakes. One of his stories speaks directly to complicating the Flux paradigm.</p><p>So, what is the simple way that you will probably use 99.99999% of the time. <code class=\"highlighter-rouge\">Reflux.createActions([])</code>. That’s it, a single function call with an array of action names. Let’s look at it in the case of <code class=\"highlighter-rouge\">BlueBirdActions.jsx</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/BlueBirdActions.js</span><span class=\"kd\">var</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">createActions</span><span class=\"p\">([</span><span class=\"s2\">\"inputChange\"</span><span class=\"p\">]);</span></code></pre></div><p>Project BlueBird is unrealistically simple, and it shows in our actions. We only have, or need, one: <code class=\"highlighter-rouge\">inputChange</code>. To use this action we will add <code class=\"highlighter-rouge\">BlueBirdActions</code> to our module and then call <code class=\"highlighter-rouge\">BlueBirdActions.inputChange(newInput)</code>.</p><h2 id=\"creating-a-store\">Creating a Store</h2><p>Next we need to create a store. We will call this <code class=\"highlighter-rouge\">BlueBirdStore.js</code>. Some people like to create separate folders for stores and actions, but we will keep them in the main <code class=\"highlighter-rouge\">components</code> folder for now since we only have a few components.</p><p>As with actions, Reflux gives us a few options with stores that you probably will not use very much. At the lowest level, it is possible to link an arbitrary action with an arbitrary function via the <code class=\"highlighter-rouge\">listenTo</code> function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">({</span><span class=\"na\">init</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">listenTo</span><span class=\"p\">(</span><span class=\"nx\">MyActionSet</span><span class=\"p\">.</span><span class=\"nx\">myAction1</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMyAction1</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">listenTo</span><span class=\"p\">(</span><span class=\"nx\">MyActionSet</span><span class=\"p\">.</span><span class=\"nx\">myAction2</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMyAction2</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">listenTo</span><span class=\"p\">(</span><span class=\"nx\">DifferentActions</span><span class=\"p\">.</span><span class=\"nx\">myAction1</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMyConfusedAction</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nl\">onMyAction1</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{},</span><span class=\"na\">onMyAction2</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{},</span><span class=\"na\">onMyConfusedAction</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{}</span><span class=\"p\">});</span></code></pre></div><p>However, there is an easier way that will simultaneously keep your code simpler too, <code class=\"highlighter-rouge\">listenables</code>. <code class=\"highlighter-rouge\">listenables</code> takes an array of Action classes and links the actions to their <code class=\"highlighter-rouge\">onAction</code> functions. This can be a problem if you have actions with the same name, but in practice you should only have a single action class for each store (ex. <code class=\"highlighter-rouge\">BlueBirdActions</code> with <code class=\"highlighter-rouge\">BlueBirdStore</code>). As with most things code, keep your life simple and you will have fewer confusing bugs.</p><p>So for our BlueBird example, we would have:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/BlueBirdStore.js</span><span class=\"kd\">var</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdActions</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdActions'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">({</span><span class=\"na\">listenables</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">BlueBirdActions</span><span class=\"p\">],</span><span class=\"na\">init</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">},</span><span class=\"na\">getInitialState</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">input</span><span class=\"p\">;</span> <span class=\"p\">},</span><span class=\"na\">onInputChange</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">newValue</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Store</span><span class=\"p\">;</span></code></pre></div><p><code class=\"highlighter-rouge\">listenables: [BlueBirdActions]</code> tries to link every <code class=\"highlighter-rouge\">action</code> in <code class=\"highlighter-rouge\">BlueBirdActions</code> to <code class=\"highlighter-rouge\">onAction</code> if <code class=\"highlighter-rouge\">onAction</code> is a function in the store. In this case that means <code class=\"highlighter-rouge\">inputChange</code> is linked to <code class=\"highlighter-rouge\">onInputChange</code>. <code class=\"highlighter-rouge\">onInputChange</code> updates the internal model (<code class=\"highlighter-rouge\">input = newValue;</code>) and calls <code class=\"highlighter-rouge\">trigger</code> on the new data. Any components that are listening for store changes will receive an update with the new data.</p><p>You might also notice that we added a <code class=\"highlighter-rouge\">getInitialState</code> function. to our store. Technically, you can add any functions you want. However, <code class=\"highlighter-rouge\">getInitialState</code> is called by the <code class=\"highlighter-rouge\">Reflux.connect</code> function when we start linking our store to our component state. It makes things easier by providing the component an initial state that matches the current state used by the other components.</p><h2 id=\"adding-the-new-storeactions-to-bluebird\">Adding the new Store/Actions to BlueBird</h2><p>Now that we have actions and a store, we need to link them into our BlueBirdContainer. It turns out that this is fairly simple.</p><p>First we need to require the new modules:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdActions</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdActions'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdStore</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdStore'</span><span class=\"p\">);</span></code></pre></div><p>Next, we need to connect the store to the component’s state. There are a couple ways to do this. The easiest is to use the <code class=\"highlighter-rouge\">Reflux.connect</code> convenience mixin on our BlueBirdContainer component.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mixins: [Reflux.connect(BlueBirdStore, 'bluebirdBody')],</code></pre></div><p>It is important to note that mixins are discouraged in the React.js world these days. In fact, this is one of the very few mixins I still use. I use it because it makes the code very readable and keeps the logic simple. However, if you are dead set against mixins, or you want to use ES6 class syntax, you can fall back to calling the <code class=\"highlighter-rouge\">listen</code> and <code class=\"highlighter-rouge\">unsubscribe</code> functions in the <code class=\"highlighter-rouge\">componentDidMount</code> and <code class=\"highlighter-rouge\">componentWillUnmount</code> functions respectively.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentDidMount</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">unsubscribe</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdStore</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onBlueBirdChange</span><span class=\"p\">);</span><span class=\"p\">},</span><span class=\"nx\">componentWillUnmount</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">unsubscribe</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"nx\">onBlueBirdChange</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newBlueBird</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">bluebirdBody</span><span class=\"p\">:</span> <span class=\"nx\">newState</span> <span class=\"p\">});</span><span class=\"p\">}</span></code></pre></div><p>Be warned, try to avoid being <em>“clever”</em> with these. Yes, you can manipulate the data in the <code class=\"highlighter-rouge\">onBlueBirdChange</code> function. You could fire actions, ajax calls, all kinds of things. These will nearly always come back to bite you.</p><p>The only thing you might want to consider doing in the <code class=\"highlighter-rouge\">onBlueBirdChange</code> method is some kind of filtering. For example, if we had a lot of BlueBirds, it might be useful to specify that a component is only rendering a specific bluebird. When we get the updates we could filter out any bluebirds that do not match our id. That way <code class=\"highlighter-rouge\">bluebirdBody</code> represents our bluebird. In fact, Reflux provides the <code class=\"highlighter-rouge\">connectFilter</code> mixin function for that exactly purpose.</p><p>Now that our store is talking to our component, we need a way to update the store when the user types. This is where <code class=\"highlighter-rouge\">BlueBirdActions</code> come in handy. We are going to update the <code class=\"highlighter-rouge\">onBodyChange</code> function, replacing <code class=\"highlighter-rouge\">setState</code> with an action call.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onBodyChange</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">// this.setState({bluebirdBody: newValue});</span><span class=\"nx\">BlueBirdActions</span><span class=\"p\">.</span><span class=\"nx\">inputChange</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>We can also delete <code class=\"highlighter-rouge\">getInitialState</code>. When we registered our component with the store via <code class=\"highlighter-rouge\">Reflux.connect</code>, the store’s <code class=\"highlighter-rouge\">getInitialState</code> function is called and merged with the component’s <code class=\"highlighter-rouge\">getInitialState</code>.</p><p>Now, when we reload our page (<a href=\"http://localhost:3000/pages/bluebird\">http://localhost:3000/pages/bluebird</a>), we get two text boxes that are actually linked.</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-003.png\" alt=\"BlueBirds Talking\"></p><h2 id=\"bonus-birds\">Bonus Birds</h2><p>Just for the fun of it, lets add another component that uses the data slightly differently. We will call it <code class=\"highlighter-rouge\">BlueBirdStats.jsx</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdStore</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdStore'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">BlueBirdStats</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s2\">\"BlueBirdStats\"</span><span class=\"p\">,</span><span class=\"na\">mixins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">BlueBirdStore</span><span class=\"p\">,</span> <span class=\"s1\">'somethingElse'</span><span class=\"p\">)],</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Body</span> <span class=\"na\">Size</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">somethingElse</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">somethingElse</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdStats</span><span class=\"p\">;</span></code></pre></div><p>As you can see, it is also a simple component. It connects the BlueBirdStore to the <code class=\"highlighter-rouge\">this.state.somethingElse</code>. That’s right, we can call it anything we want. The component then styles itself as a box floating on the right side of the screen and shows the string length and the actual message.</p><p>Finally, we add it to our application. First, add the <code class=\"highlighter-rouge\">BlueBirdStats</code> component to our <code class=\"highlighter-rouge\">components.js</code> file, <code class=\"highlighter-rouge\">BlueBirdStates = require('./components/BlueBirdStats');</code>. Then add it to our <code class=\"highlighter-rouge\">bluebird.html.erb</code> file, <code class=\"highlighter-rouge\">&lt;%= react_component \"BlueBirdStats\", {} %&gt;</code>. Finally, reload the page.</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-004.png\" alt=\"BlueBird with Stats\"></p><h2 id=\"more-bonus-birds\">More Bonus Birds</h2><p>Let’s really see how powerful the Flux model can be. Let’s connect it to a <a href=\"http://faye.jcoglan.com/\">Faye</a> server.</p><p>First, if you do not already have a Faye server running, it is really easy to add one for demo purposes. Update <code class=\"highlighter-rouge\">package.json</code> with the required dependencies.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"dependencies\": {\"faye\": \"^1.1.1\",\"http\": \"0.0.0\"},\"scripts\": {\"fayeserver\": \"node fayeserver.js\"},</code></pre></div><p>Then, add the actual server code.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">),</span><span class=\"nx\">faye</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'faye'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(),</span><span class=\"nx\">bayeux</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">faye</span><span class=\"p\">.</span><span class=\"nx\">NodeAdapter</span><span class=\"p\">({</span><span class=\"na\">mount</span><span class=\"p\">:</span> <span class=\"s1\">'/'</span><span class=\"p\">});</span><span class=\"nx\">bayeux</span><span class=\"p\">.</span><span class=\"nx\">attach</span><span class=\"p\">(</span><span class=\"nx\">server</span><span class=\"p\">);</span><span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">);</span></code></pre></div><p>Run <code class=\"highlighter-rouge\">npm install</code>.</p><p>Finally, launch our new Faye pub/sub server: <code class=\"highlighter-rouge\">npm run fayeserver</code>.</p><p>Now that we have a simple pub/sub server running, we only need to modify our store to take advantage.</p><p>First, we will establish a connection when the store is created.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">init</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// client/sub are scoped by var statements at the module level</span><span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Faye</span><span class=\"p\">.</span><span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8000/'</span><span class=\"p\">);</span><span class=\"nx\">sub</span>    <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"s1\">'/messages'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMessage</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p><code class=\"highlighter-rouge\">Faye.Client</code> will establish a connection to our server. We set this up on <code class=\"highlighter-rouge\">localhost:8000</code> in our <code class=\"highlighter-rouge\">fayeserver.js</code> file. Then we <code class=\"highlighter-rouge\">subscribe</code> to the <code class=\"highlighter-rouge\">'/messages'</code> queue on the server. Anything that is published to that queue will be directed to our <code class=\"highlighter-rouge\">onMessage</code> function.</p><p>Next, we update the <code class=\"highlighter-rouge\">onInputChange</code> method to post messages to the server when we the user types.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onInputChange</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">newValue</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">publish</span><span class=\"p\">(</span><span class=\"s1\">'/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"nx\">newValue</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>Finally, we add the <code class=\"highlighter-rouge\">onMessage</code> function to process messages.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onMessage</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">input</span> <span class=\"o\">!==</span> <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>Here we get the message, if it is different from what we already have, we trigger an update.</p><p>None of our components changed. We can implement our data layer in the store however we want, and the components just keep working. Also, by keeping all of that logic in the store, it presents one convenient test target.</p><h2 id=\"bugs\">Bugs</h2><p>Of course there are some bugs, there are always bugs. The biggest one is synchronization with the textarea. You probably did not notice, but typing in our textarea is “buggy”. Everything is fine as long as we are appending to the end of the text, but try putting the cursor in the middle somewhere and type a few keys. You get one character at the cursor, and then the cursor jumps to the end of the line. This is a synchronization bug common to React and Flux.</p><p>There are no great solutions to this problem. It is inherent to the Flux architecture. However, there are some workarounds that involve adding a slight buffer to the text area. I implemented one such workaround, <a href=\"https://github.com/HurricaneJames/lazy-input\">lazy-input (GitHub)</a>, and published it to <a href=\"https://www.npmjs.com/package/lazy-input\">lazy-input (npmjs)</a>.</p><p>Simply add it to the <code class=\"highlighter-rouge\">package.json</code> dependencies: <code class=\"highlighter-rouge\">npm install --save lazy-input</code>.</p><p>Then, require it in any modules that use <code class=\"highlighter-rouge\">textarea</code> or <code class=\"highlighter-rouge\">input</code> fields. So, for example, the render function in <code class=\"highlighter-rouge\">BlueBird.jsx</code> will become:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">render</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Enter</span> <span class=\"nx\">Some</span> <span class=\"nx\">Text</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"nx\">LazyInput</span><span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"textarea\"</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">}</span><span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">}</span><span class=\"nx\">rows</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">15</span><span class=\"p\">}</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Reload the page, and everything just works.</p><h2 id=\"store-hydration\">Store Hydration</h2><p>Finally, we should talk a little bit about hydration. Hydrating a store means getting some initial data into the store. There are almost limitless ways to hydrate the store. The version I like involved serializing our data on the backend and attaching it to the body element via data attributes.</p><p>In Rails, this can be accomplished by changing the body tag in ‘application.html.erb’.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;body &lt;%= yield :seed_attributes %&gt;&gt;</code></pre></div><p>Then, somewhere in the view chain, add <code class=\"highlighter-rouge\">content_for</code>. For this demo, we will add it to <code class=\"highlighter-rouge\">bluebird.html.erb</code>. We should probably consider adding it to <code class=\"highlighter-rouge\">index.html.erb</code>, but we will skip that to show what happens when no hydration data is present.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;% content_for :seed_attributes do %&gt;data-bluebird-store=\"an initial message\"&lt;% end %&gt;</code></pre></div><p>Normally, we would seed with some data from the database, but you get the point. It is possible to pack just about anything into the <code class=\"highlighter-rouge\">data-attributes</code>. For more complex stores, we generally use JSON. Rails has an awesome <code class=\"highlighter-rouge\">json_escape</code> helper function you should be sure to check out. Combined with the <a href=\"https://github.com/rails/jbuilder\">jbuilder</a> gem, it is possible to export some really complex data structures.</p><p>Finally, we need to add some code to the BlueBirdStore <code class=\"highlighter-rouge\">init</code> method to hydrate the store from the data attribute.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">init</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'data-bluebird-store'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>One caveat. This only works if the JavaScript is loaded after the body tag has been processed by the browser. If the JavaScript is in the head tag, the seed data will not arrive. Generally speaking, it is considered best practices to load the JavaScript at the end of the HTML, so it has not be a problem for any of our projects.</p><h2 id=\"conclusion\">Conclusion</h2><p>We walked through adding Reflux to a relatively simple component. We looked at some of the advantages this gave us. We saw one of the big drawbacks, and we solved it. I certainly hope that this has been a useful walkthrough for you.</p><p>Don’t forget, the completed code is available on GitHub <a href=\"https://github.com/HurricaneJames/dex/tree/v3.1\">Dex v3.1</a>.</p>",
      "content":"<p>React is a great view library. If used just right, it even makes an alright controller. However, sometimes you need something more. That is where Flux can be handy.</p><p>Flux is the Facebook solution to keep the MVC paradigm from becoming unmanageable. If you are wondering whether Flux is right for your project, Dan Abramov made <a href=\"https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6\">“The Case for Flux”</a> a few weeks ago. I cannot recommend his article enough. To summarize, Dan points out that Flux is great if:</p><ul><li>“your data changes over time” and you “care about immediately reflecting those changes in the UI”</li><li>“you want to cache data in memory, but it can change while cached”</li><li>“your data is relational and models include and depend on each other”</li><li>“data is assembled from different sources and can be rendered in several places throughout the UI”</li></ul><p>If none of that sounds important, you probably do not need Flux. Let’s assume it does sound important though. What next?</p><h2 id=\"the-assignment\">The Assignment</h2><p>We are going to write a very simple edit tool. Our component will have two parts. First, a label telling users to “Enter Some Text.” Second, a block where a user can enter some text. That is pretty simple.</p><p>However, we are going to complicate things by requiring that multiple components on the same page display that data in different ways. We are going to complicate things a little further by requiring that there is no global “parent” app. Instead, it is important that we can “sprinkle” the react components on to our page.</p><p>“Why?,” you say. A lot of us are trying to augment legacy apps. While you can generally add sprinkles to a cake, it is often harder to convince your boss to let you re-bake the whole cake. Also, because coordinating such a large single root starts to become really complex as the app grows. And it becomes painful once we need to start making ajax calls or, or add a backbone layer, or, well, anything not display related.</p><h2 id=\"getting-started\">Getting Started</h2><p>The examples in this article are based on the <a href=\"https://github.com/HurricaneJames/dex\">Dex</a> code base. Dex is a Rails and Browserify webapp. However, the concepts in this article should be easily transferrable. We will be working on the BlueBird component, located in <code class=\"highlighter-rouge\">app/assets/javascripts/components/BlueBird.jsx</code>. BlueBird is put in the global scope in <code class=\"highlighter-rouge\">components.js</code> and loaded onto the page by <code class=\"highlighter-rouge\">react_component</code> from the <a href=\"https://github.com/reactjs/react-rails\">react-rails</a> package.</p><p>If you want to follow along and write code as we go grab <a href=\"https://github.com/HurricaneJames/dex/tree/v3.0\">Dex v3.0</a>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone https://github.com/HurricaneJames/dex/tree/v3.0cd dexbundle installnpm installrails s</code></pre></div><p>If you just want to jump to the end, grab <a href=\"https://github.com/HurricaneJames/dex/tree/v3.1\">Dex v3.1</a>. All of the code from this article will be available there.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone https://github.com/HurricaneJames/dex/tree/v3.1cd dexbundle installnpm install# separate consolerails s# optional, and from a different consolenpm run fayeserver# open a browser and point it to http://localhost:3000/pages/index</code></pre></div><h2 id=\"bluebird\">BlueBird</h2><p>This is a super simple React.js component. We will create a two files in the <code class=\"highlighter-rouge\">components</code> directory, <code class=\"highlighter-rouge\">BlueBird.jsx</code> and <code class=\"highlighter-rouge\">BlueBirdContainer.jsx.</code> The container handles any state, the actual component is stateless. This is the container design pattern. and is very useful when creating React components. Since we are using React-Rails, we will also require the container file as a global variable in the <code class=\"highlighter-rouge\">components.js</code> file.</p><p>Starting with the <code class=\"highlighter-rouge\">BlueBird</code> component:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/BlueBird.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">BlueBird</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'BlueBird'</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">string</span><span class=\"p\">,</span><span class=\"na\">onChange</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">func</span><span class=\"p\">},</span><span class=\"na\">onChange</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Enter</span> <span class=\"nx\">Some</span> <span class=\"nx\">Text</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">textarea</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">}</span><span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">}</span><span class=\"nx\">rows</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">15</span><span class=\"p\">}</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdBody</span><span class=\"p\">;</span></code></pre></div><p>As you can see, this really is a very simple React component. The render function has a span telling users to <code class=\"highlighter-rouge\">Enter Some Text</code> and a textarea to actual enter that text. Next, we create our container, a separate component where we will keep state.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBird</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBird'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">BlueBirdContainer</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'BlueBirdContainer'</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">reverse</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">bool</span><span class=\"p\">},</span><span class=\"na\">getInitialState</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">bluebirdBody</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nl\">getContent</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">bluebirdBody</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">).</span><span class=\"nx\">reverse</span><span class=\"p\">().</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">else</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">bluebirdBody</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">},</span><span class=\"na\">onBodyChange</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">bluebirdBody</span><span class=\"p\">:</span> <span class=\"nx\">newValue</span><span class=\"p\">});</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">BlueBird</span> <span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getContent</span><span class=\"p\">()}</span> <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onBodyChange</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdContainer</span><span class=\"p\">;</span></code></pre></div><p>This component is fairly straightforward. It holds an internal state for the text, and if the <code class=\"highlighter-rouge\">reverse</code> prop is set to <code class=\"highlighter-rouge\">true</code>, then it will reverse the text in the text box. This is not particularly useful, except as something interesting we can demo.</p><p>Finally, we will add the component to our app:</p><ul><li><p>add the component to our components.js file</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  BlueBirdContainer = require('./components/BlueBirdContainer');</code></pre></div></li><li><p>add the component to our page</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  &lt;%# app/views/pages/index.html.erb %&gt;&lt;h1&gt;BlueBird - Index&lt;/h1&gt;&lt;%= react_component 'BlueBirdContainer' %&gt;</code></pre></div></li><li><p>start our server</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  rails s</code></pre></div></li><li><p>and load the page in a browser <code class=\"highlighter-rouge\">http://localhost:3000/pages/index</code>).</p></li></ul><p>This gives us a nice simple text box.</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-001.png\" alt=\"Basic BlueBird Container\"></p><h2 id=\"multiple-bluebirds\">Multiple BlueBirds</h2><p>Now that we have a basic component, we want to be able to add it to our page multiple times. Since we are using Rails, we can create a new view <code class=\"highlighter-rouge\">pages/bluebird.html.erb</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;h1&gt;BlueBird&lt;/h1&gt;&lt;%= react_component \"BlueBirdContainer\", {} %&gt;&lt;%= react_component \"BlueBirdContainer\", { reverse: true } %&gt;</code></pre></div><p>We add two components, the second one set to reverse. Then we add it to our <code class=\"highlighter-rouge\">routes.rb</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  get 'pages/bluebird'</code></pre></div><p>Next we setup our <code class=\"highlighter-rouge\">pages_controller.rb</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  def bluebirdend</code></pre></div><p>Then, when we point our browser to <code class=\"highlighter-rouge\">http://localhost:3000/pages/bluebird</code>…</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-002.png\" alt=\"Double Blue Birds\"></p><p>We get two text boxes that are completely unrelated to each other. Not surprising since we never linked the state of the two container components. So, how do we link the two components together. Well, we have a couple options.</p><p>First, we could create a BlueBirdRootApp component. All state for the entire app would be contained in this single component, and it would pass that state down to its children along with callback props. This works great in simple cases, and even in cases where we are designing the entire app from scratch. However, it is a bit limiting when we need to sprinkle our React components into an existing app.</p><p>Second, we use Flux! When thinking back to Abramov’s four cases, our requirement fits perfectly.</p><h2 id=\"flux--reflux\">Flux / Reflux</h2><p>So, what is flux?</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>╔═════════╗     ╔════════════╗     ╔════════╗     ╔═════════════════╗║ Actions ║────&gt;║ Dispatcher ║────&gt;║ Stores ║────&gt;║ View Components ║╚═════════╝     ╚════════════╝     ╚════════╝     ╚═════════════════╝^                                                    │└────────────────────────────────────────────────────┘</code></pre></div><p>Flux is a version of the Model View Controller paradigm that focuses on unidirectional dataflow. It specifies a dispatcher, some stores, some views, and some actions. Actions trigger the dispatcher. The dispatcher routes actions to interested stores. The stores update based on the action, and then notify the views to rerender. Then, the cycle starts all over again.</p><p>There is a lot more detail, but this is where I’m going to stop. Why, because we are going to use Reflux, which is even easier.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>╔═════════╗       ╔════════╗       ╔═════════════════╗║ Actions ║──────&gt;║ Stores ║──────&gt;║ View Components ║╚═════════╝       ╚════════╝       ╚═════════════════╝^                                      │└──────────────────────────────────────┘</code></pre></div><p><a href=\"https://github.com/spoike/refluxjs\">Reflux</a> is an implementation of the basic concepts of Flux by Mikael Brassman. It greatly simplifies Flux by removing the dispatcher. Rather than actions flowing through a dispatcher, actions flow directly to the stores.</p><p>It is still possible to do everything with Reflux that can be done with Flux because stores can listen to other stores. However, in practice, I have yet to find that useful. Mostly, it just leads to overly complex code.</p><h2 id=\"adding-reflux-to-our-project\">Adding Reflux to Our Project</h2><p>The first thing we will need to do is add Reflux to our project. Since we are using browserify, we can add to the <code class=\"highlighter-rouge\">package.json</code> dependencies.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"reflux\": \"^0.2.7\"</code></pre></div><p>Alternatively, you can install it from the command line.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>npm install --save reflux</code></pre></div><p>Then we need to create some actions, create a store to listen to those actions, and finally link that store to our <code class=\"highlighter-rouge\">BlueBirdContainer</code> state. Fortunately, Reflux makes this easy.</p><h2 id=\"create-actions\">Create Actions</h2><p>Reflux provides many ways to create actions. It provides options for sync/async, promises, callbacks, etc… However, every time I have tried anything but the simplest, I have come to regret it. Flux, as an architecture, really wants us to stick to the <code class=\"highlighter-rouge\">Actions -&gt; Stores -&gt; Components -&gt; Actions</code> model. Chen Zihui wrote an interesting article, <a href=\"https://medium.com/@jetupper/hello-react-js-b87c63526e3a\">“Hello, React.js,”</a> about some common React.js/Flux mistakes. One of his stories speaks directly to complicating the Flux paradigm.</p><p>So, what is the simple way that you will probably use 99.99999% of the time. <code class=\"highlighter-rouge\">Reflux.createActions([])</code>. That’s it, a single function call with an array of action names. Let’s look at it in the case of <code class=\"highlighter-rouge\">BlueBirdActions.jsx</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/BlueBirdActions.js</span><span class=\"kd\">var</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">createActions</span><span class=\"p\">([</span><span class=\"s2\">\"inputChange\"</span><span class=\"p\">]);</span></code></pre></div><p>Project BlueBird is unrealistically simple, and it shows in our actions. We only have, or need, one: <code class=\"highlighter-rouge\">inputChange</code>. To use this action we will add <code class=\"highlighter-rouge\">BlueBirdActions</code> to our module and then call <code class=\"highlighter-rouge\">BlueBirdActions.inputChange(newInput)</code>.</p><h2 id=\"creating-a-store\">Creating a Store</h2><p>Next we need to create a store. We will call this <code class=\"highlighter-rouge\">BlueBirdStore.js</code>. Some people like to create separate folders for stores and actions, but we will keep them in the main <code class=\"highlighter-rouge\">components</code> folder for now since we only have a few components.</p><p>As with actions, Reflux gives us a few options with stores that you probably will not use very much. At the lowest level, it is possible to link an arbitrary action with an arbitrary function via the <code class=\"highlighter-rouge\">listenTo</code> function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">({</span><span class=\"na\">init</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">listenTo</span><span class=\"p\">(</span><span class=\"nx\">MyActionSet</span><span class=\"p\">.</span><span class=\"nx\">myAction1</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMyAction1</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">listenTo</span><span class=\"p\">(</span><span class=\"nx\">MyActionSet</span><span class=\"p\">.</span><span class=\"nx\">myAction2</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMyAction2</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">listenTo</span><span class=\"p\">(</span><span class=\"nx\">DifferentActions</span><span class=\"p\">.</span><span class=\"nx\">myAction1</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMyConfusedAction</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nl\">onMyAction1</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{},</span><span class=\"na\">onMyAction2</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{},</span><span class=\"na\">onMyConfusedAction</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{}</span><span class=\"p\">});</span></code></pre></div><p>However, there is an easier way that will simultaneously keep your code simpler too, <code class=\"highlighter-rouge\">listenables</code>. <code class=\"highlighter-rouge\">listenables</code> takes an array of Action classes and links the actions to their <code class=\"highlighter-rouge\">onAction</code> functions. This can be a problem if you have actions with the same name, but in practice you should only have a single action class for each store (ex. <code class=\"highlighter-rouge\">BlueBirdActions</code> with <code class=\"highlighter-rouge\">BlueBirdStore</code>). As with most things code, keep your life simple and you will have fewer confusing bugs.</p><p>So for our BlueBird example, we would have:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/BlueBirdStore.js</span><span class=\"kd\">var</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdActions</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdActions'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">({</span><span class=\"na\">listenables</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">BlueBirdActions</span><span class=\"p\">],</span><span class=\"na\">init</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">},</span><span class=\"na\">getInitialState</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">input</span><span class=\"p\">;</span> <span class=\"p\">},</span><span class=\"na\">onInputChange</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">newValue</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Store</span><span class=\"p\">;</span></code></pre></div><p><code class=\"highlighter-rouge\">listenables: [BlueBirdActions]</code> tries to link every <code class=\"highlighter-rouge\">action</code> in <code class=\"highlighter-rouge\">BlueBirdActions</code> to <code class=\"highlighter-rouge\">onAction</code> if <code class=\"highlighter-rouge\">onAction</code> is a function in the store. In this case that means <code class=\"highlighter-rouge\">inputChange</code> is linked to <code class=\"highlighter-rouge\">onInputChange</code>. <code class=\"highlighter-rouge\">onInputChange</code> updates the internal model (<code class=\"highlighter-rouge\">input = newValue;</code>) and calls <code class=\"highlighter-rouge\">trigger</code> on the new data. Any components that are listening for store changes will receive an update with the new data.</p><p>You might also notice that we added a <code class=\"highlighter-rouge\">getInitialState</code> function. to our store. Technically, you can add any functions you want. However, <code class=\"highlighter-rouge\">getInitialState</code> is called by the <code class=\"highlighter-rouge\">Reflux.connect</code> function when we start linking our store to our component state. It makes things easier by providing the component an initial state that matches the current state used by the other components.</p><h2 id=\"adding-the-new-storeactions-to-bluebird\">Adding the new Store/Actions to BlueBird</h2><p>Now that we have actions and a store, we need to link them into our BlueBirdContainer. It turns out that this is fairly simple.</p><p>First we need to require the new modules:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdActions</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdActions'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdStore</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdStore'</span><span class=\"p\">);</span></code></pre></div><p>Next, we need to connect the store to the component’s state. There are a couple ways to do this. The easiest is to use the <code class=\"highlighter-rouge\">Reflux.connect</code> convenience mixin on our BlueBirdContainer component.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mixins: [Reflux.connect(BlueBirdStore, 'bluebirdBody')],</code></pre></div><p>It is important to note that mixins are discouraged in the React.js world these days. In fact, this is one of the very few mixins I still use. I use it because it makes the code very readable and keeps the logic simple. However, if you are dead set against mixins, or you want to use ES6 class syntax, you can fall back to calling the <code class=\"highlighter-rouge\">listen</code> and <code class=\"highlighter-rouge\">unsubscribe</code> functions in the <code class=\"highlighter-rouge\">componentDidMount</code> and <code class=\"highlighter-rouge\">componentWillUnmount</code> functions respectively.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentDidMount</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">unsubscribe</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdStore</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onBlueBirdChange</span><span class=\"p\">);</span><span class=\"p\">},</span><span class=\"nx\">componentWillUnmount</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">unsubscribe</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"nx\">onBlueBirdChange</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newBlueBird</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">bluebirdBody</span><span class=\"p\">:</span> <span class=\"nx\">newState</span> <span class=\"p\">});</span><span class=\"p\">}</span></code></pre></div><p>Be warned, try to avoid being <em>“clever”</em> with these. Yes, you can manipulate the data in the <code class=\"highlighter-rouge\">onBlueBirdChange</code> function. You could fire actions, ajax calls, all kinds of things. These will nearly always come back to bite you.</p><p>The only thing you might want to consider doing in the <code class=\"highlighter-rouge\">onBlueBirdChange</code> method is some kind of filtering. For example, if we had a lot of BlueBirds, it might be useful to specify that a component is only rendering a specific bluebird. When we get the updates we could filter out any bluebirds that do not match our id. That way <code class=\"highlighter-rouge\">bluebirdBody</code> represents our bluebird. In fact, Reflux provides the <code class=\"highlighter-rouge\">connectFilter</code> mixin function for that exactly purpose.</p><p>Now that our store is talking to our component, we need a way to update the store when the user types. This is where <code class=\"highlighter-rouge\">BlueBirdActions</code> come in handy. We are going to update the <code class=\"highlighter-rouge\">onBodyChange</code> function, replacing <code class=\"highlighter-rouge\">setState</code> with an action call.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onBodyChange</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">// this.setState({bluebirdBody: newValue});</span><span class=\"nx\">BlueBirdActions</span><span class=\"p\">.</span><span class=\"nx\">inputChange</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>We can also delete <code class=\"highlighter-rouge\">getInitialState</code>. When we registered our component with the store via <code class=\"highlighter-rouge\">Reflux.connect</code>, the store’s <code class=\"highlighter-rouge\">getInitialState</code> function is called and merged with the component’s <code class=\"highlighter-rouge\">getInitialState</code>.</p><p>Now, when we reload our page (<a href=\"http://localhost:3000/pages/bluebird\">http://localhost:3000/pages/bluebird</a>), we get two text boxes that are actually linked.</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-003.png\" alt=\"BlueBirds Talking\"></p><h2 id=\"bonus-birds\">Bonus Birds</h2><p>Just for the fun of it, lets add another component that uses the data slightly differently. We will call it <code class=\"highlighter-rouge\">BlueBirdStats.jsx</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">Reflux</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'reflux'</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">BlueBirdStore</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./BlueBirdStore'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">BlueBirdStats</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s2\">\"BlueBirdStats\"</span><span class=\"p\">,</span><span class=\"na\">mixins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">Reflux</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">BlueBirdStore</span><span class=\"p\">,</span> <span class=\"s1\">'somethingElse'</span><span class=\"p\">)],</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Body</span> <span class=\"na\">Size</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">somethingElse</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">somethingElse</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">BlueBirdStats</span><span class=\"p\">;</span></code></pre></div><p>As you can see, it is also a simple component. It connects the BlueBirdStore to the <code class=\"highlighter-rouge\">this.state.somethingElse</code>. That’s right, we can call it anything we want. The component then styles itself as a box floating on the right side of the screen and shows the string length and the actual message.</p><p>Finally, we add it to our application. First, add the <code class=\"highlighter-rouge\">BlueBirdStats</code> component to our <code class=\"highlighter-rouge\">components.js</code> file, <code class=\"highlighter-rouge\">BlueBirdStates = require('./components/BlueBirdStats');</code>. Then add it to our <code class=\"highlighter-rouge\">bluebird.html.erb</code> file, <code class=\"highlighter-rouge\">&lt;%= react_component \"BlueBirdStats\", {} %&gt;</code>. Finally, reload the page.</p><p><img src=\"/ReactJSNews/img/BuildingInteractive-004.png\" alt=\"BlueBird with Stats\"></p><h2 id=\"more-bonus-birds\">More Bonus Birds</h2><p>Let’s really see how powerful the Flux model can be. Let’s connect it to a <a href=\"http://faye.jcoglan.com/\">Faye</a> server.</p><p>First, if you do not already have a Faye server running, it is really easy to add one for demo purposes. Update <code class=\"highlighter-rouge\">package.json</code> with the required dependencies.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"dependencies\": {\"faye\": \"^1.1.1\",\"http\": \"0.0.0\"},\"scripts\": {\"fayeserver\": \"node fayeserver.js\"},</code></pre></div><p>Then, add the actual server code.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">),</span><span class=\"nx\">faye</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'faye'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(),</span><span class=\"nx\">bayeux</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">faye</span><span class=\"p\">.</span><span class=\"nx\">NodeAdapter</span><span class=\"p\">({</span><span class=\"na\">mount</span><span class=\"p\">:</span> <span class=\"s1\">'/'</span><span class=\"p\">});</span><span class=\"nx\">bayeux</span><span class=\"p\">.</span><span class=\"nx\">attach</span><span class=\"p\">(</span><span class=\"nx\">server</span><span class=\"p\">);</span><span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">);</span></code></pre></div><p>Run <code class=\"highlighter-rouge\">npm install</code>.</p><p>Finally, launch our new Faye pub/sub server: <code class=\"highlighter-rouge\">npm run fayeserver</code>.</p><p>Now that we have a simple pub/sub server running, we only need to modify our store to take advantage.</p><p>First, we will establish a connection when the store is created.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">init</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// client/sub are scoped by var statements at the module level</span><span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Faye</span><span class=\"p\">.</span><span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8000/'</span><span class=\"p\">);</span><span class=\"nx\">sub</span>    <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"s1\">'/messages'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onMessage</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p><code class=\"highlighter-rouge\">Faye.Client</code> will establish a connection to our server. We set this up on <code class=\"highlighter-rouge\">localhost:8000</code> in our <code class=\"highlighter-rouge\">fayeserver.js</code> file. Then we <code class=\"highlighter-rouge\">subscribe</code> to the <code class=\"highlighter-rouge\">'/messages'</code> queue on the server. Anything that is published to that queue will be directed to our <code class=\"highlighter-rouge\">onMessage</code> function.</p><p>Next, we update the <code class=\"highlighter-rouge\">onInputChange</code> method to post messages to the server when we the user types.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onInputChange</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">newValue</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">client</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">publish</span><span class=\"p\">(</span><span class=\"s1\">'/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"nx\">newValue</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>Finally, we add the <code class=\"highlighter-rouge\">onMessage</code> function to process messages.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onMessage</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">input</span> <span class=\"o\">!==</span> <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>Here we get the message, if it is different from what we already have, we trigger an update.</p><p>None of our components changed. We can implement our data layer in the store however we want, and the components just keep working. Also, by keeping all of that logic in the store, it presents one convenient test target.</p><h2 id=\"bugs\">Bugs</h2><p>Of course there are some bugs, there are always bugs. The biggest one is synchronization with the textarea. You probably did not notice, but typing in our textarea is “buggy”. Everything is fine as long as we are appending to the end of the text, but try putting the cursor in the middle somewhere and type a few keys. You get one character at the cursor, and then the cursor jumps to the end of the line. This is a synchronization bug common to React and Flux.</p><p>There are no great solutions to this problem. It is inherent to the Flux architecture. However, there are some workarounds that involve adding a slight buffer to the text area. I implemented one such workaround, <a href=\"https://github.com/HurricaneJames/lazy-input\">lazy-input (GitHub)</a>, and published it to <a href=\"https://www.npmjs.com/package/lazy-input\">lazy-input (npmjs)</a>.</p><p>Simply add it to the <code class=\"highlighter-rouge\">package.json</code> dependencies: <code class=\"highlighter-rouge\">npm install --save lazy-input</code>.</p><p>Then, require it in any modules that use <code class=\"highlighter-rouge\">textarea</code> or <code class=\"highlighter-rouge\">input</code> fields. So, for example, the render function in <code class=\"highlighter-rouge\">BlueBird.jsx</code> will become:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">render</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Enter</span> <span class=\"nx\">Some</span> <span class=\"nx\">Text</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"nx\">LazyInput</span><span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"textarea\"</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">}</span><span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">}</span><span class=\"nx\">rows</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">15</span><span class=\"p\">}</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Reload the page, and everything just works.</p><h2 id=\"store-hydration\">Store Hydration</h2><p>Finally, we should talk a little bit about hydration. Hydrating a store means getting some initial data into the store. There are almost limitless ways to hydrate the store. The version I like involved serializing our data on the backend and attaching it to the body element via data attributes.</p><p>In Rails, this can be accomplished by changing the body tag in ‘application.html.erb’.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;body &lt;%= yield :seed_attributes %&gt;&gt;</code></pre></div><p>Then, somewhere in the view chain, add <code class=\"highlighter-rouge\">content_for</code>. For this demo, we will add it to <code class=\"highlighter-rouge\">bluebird.html.erb</code>. We should probably consider adding it to <code class=\"highlighter-rouge\">index.html.erb</code>, but we will skip that to show what happens when no hydration data is present.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;% content_for :seed_attributes do %&gt;data-bluebird-store=\"an initial message\"&lt;% end %&gt;</code></pre></div><p>Normally, we would seed with some data from the database, but you get the point. It is possible to pack just about anything into the <code class=\"highlighter-rouge\">data-attributes</code>. For more complex stores, we generally use JSON. Rails has an awesome <code class=\"highlighter-rouge\">json_escape</code> helper function you should be sure to check out. Combined with the <a href=\"https://github.com/rails/jbuilder\">jbuilder</a> gem, it is possible to export some really complex data structures.</p><p>Finally, we need to add some code to the BlueBirdStore <code class=\"highlighter-rouge\">init</code> method to hydrate the store from the data attribute.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">init</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'data-bluebird-store'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>One caveat. This only works if the JavaScript is loaded after the body tag has been processed by the browser. If the JavaScript is in the head tag, the seed data will not arrive. Generally speaking, it is considered best practices to load the JavaScript at the end of the HTML, so it has not be a problem for any of our projects.</p><h2 id=\"conclusion\">Conclusion</h2><p>We walked through adding Reflux to a relatively simple component. We looked at some of the advantages this gave us. We saw one of the big drawbacks, and we solved it. I certainly hope that this has been a useful walkthrough for you.</p><p>Don’t forget, the completed code is available on GitHub <a href=\"https://github.com/HurricaneJames/dex/tree/v3.1\">Dex v3.1</a>.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Getting Started with Flux",
      "pubDate": "2015-03-23",
      "link": "https://reactjsnews.com/getting-started-with-flux",
      "guid": "https://reactjsnews.com/getting-started-with-flux",
      "author": "",
      "thumbnail": "",
      "description":"<h2 id=\"what-is-flux\">What is flux?</h2><p><a href=\"http://facebook.github.io/flux/docs/overview.html\">Flux</a> is an application architecture for building complex user interfaces. It eschews MVC in favor of unidirectional data flow. What this means is that data enters through a single place (your actions) and then flows outward through to their state manager (the store) and finally onto the view. The view can then restart the flow by calling other actions in response to user input.</p><p>We’ll be using <a href=\"https://github.com/goatslacker/alt\">Alt</a> for flux because it removes away some of the boilerplate, is isomorphic (meaning you can use it to render content server side), and it uses the flux dispatcher under the hood.</p><p>The full code for this tutorial is available <a href=\"https://github.com/goatslacker/alt-tutorial\">here</a>.</p><h2 id=\"setup\">Setup</h2><p>For this tutorial I’ll be assuming you’re familiar with <a href=\"https://facebook.github.io/react/\">React</a>, <a href=\"http://www.commonjs.org/\">CommonJS</a>, <a href=\"https://es5.github.io/\">ES5 JavaScript</a>, and a subset of <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">ES6</a> specifically the one that works with react’s transform. I’ll also assume you’re on a modern browser or a node environment.</p><h2 id=\"installing\">Installing</h2><p>If you’re using a package manager like npm or bower then go ahead and install alt.</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>npm install alt</code></pre></div><h2 id=\"folder-structure\">Folder structure</h2><p>A typical folder structure would like like this</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>your_project|--actions/|  |--MyActions.js|--stores/|  |--MyStore.js|--components/|  |--MyComponent.jsx|--alt.js|--app.js</code></pre></div><h2 id=\"creating-your-first-alt\">Creating your first alt</h2><p>For this guide we’ll be creating a very simple application which has a list of travel destinations and allows you to favorite which ones you’re interested in. Let’s get started.</p><p>We’ll be creating an instance of alt, this instantiates a <a href=\"http://facebook.github.io/flux/docs/dispatcher.html#content\">Flux dispatcher</a> for you and gives you methods to create your actions and stores. We’ll be referring back to this file throughout this guide.</p><p>In the root of your project, create a new file called <code class=\"highlighter-rouge\">alt.js</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Alt</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'alt'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">alt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Alt</span><span class=\"p\">();</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">;</span></code></pre></div><hr><h2 id=\"creating-actions\">Creating Actions</h2><p>Actions are how you get data into your stores and then onto your view. They kick-off the dispatch loop and are the single entry point of data flow.</p><p>The first actions we create will be simple, they’ll take in an array of locations we’ll pass in at the start of the application and just dispatch them to the store.</p><p>We create an action by creating a class, the class’ prototype methods will become the actions. The class syntax is completely optional you can use regular constructors and prototypes.</p><p>Inside those actions you can use <code class=\"highlighter-rouge\">this.dispatch</code> to dispatch your payload through the Dispatcher and onto the stores. Finally, make sure you export the created actions using <code class=\"highlighter-rouge\">alt.createActions</code>.</p><p><code class=\"highlighter-rouge\">actions/LocationActions.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">alt</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../alt'</span><span class=\"p\">);</span><span class=\"kr\">class</span> <span class=\"nx\">LocationActions</span> <span class=\"p\">{</span><span class=\"nx\">updateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">.</span><span class=\"nx\">createActions</span><span class=\"p\">(</span><span class=\"nx\">LocationActions</span><span class=\"p\">);</span></code></pre></div><hr><h2 id=\"creating-a-store\">Creating a Store</h2><p>The store is your data warehouse. This is the single source of truth for a particular piece of your application’s state.</p><p>Similar to actions, we’ll be creating a class for the store. Also like the actions, the class syntax is completely optional, you can use regular constructors and prototypes.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">LocationStore</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>Instance variables defined anywhere in the store will become the state. This resembles how we reason about and build normal JS classes. You can initiaize these in the constructor and then update them directly in the prototype methods.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span></code></pre></div><p>Next, we define methods in the store’s prototype that will deal with the actions. These are called action handlers.Stores automatically emit a change event when an action is dispatched through the store and the action handler ends. In order to suppress the change event you can return false from the action handler.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">handleUpdateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"nx\">locations</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div><p>And then in the constructor, we bind our action handlers to our actions.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">handleUpdateLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">UPDATE_LOCATIONS</span><span class=\"p\">});</span></code></pre></div><p>Finally, we export our newly created store.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">LocationStore</span><span class=\"p\">,</span> <span class=\"s1\">'LocationStore'</span><span class=\"p\">);</span></code></pre></div><hr><h2 id=\"using-your-view\">Using your View</h2><p>We won’t spend too much time on all the parts of the view since it is more about React than it is Flux, however, the important piece is how you listen to stores and get data out of it.</p><p>Getting the state out of your store is simple, every alt store has a method which returns its state. The state is copied over as a value when returned so you accidentally don’t mutate it by reference. We can use React’s <code class=\"highlighter-rouge\">getInitialState</code> to set the initial state using the store’s state.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">getInitialState</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">();</span><span class=\"p\">},</span></code></pre></div><p>But then we’ll want to listen to changes once the state in the store is updated. In your react component on <code class=\"highlighter-rouge\">componentDidMount</code> you can add an event handler using <code class=\"highlighter-rouge\">LocationStore.listen</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>And, don’t forget to remove your event listener.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentWillUnmount</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">unlisten</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>A few <a href=\"https://github.com/goatslacker/alt/tree/master/mixins\">mixins</a> are available to make this boilerplate go away.</p><hr><h2 id=\"fetching-data\">Fetching Data</h2><p>One of the most common questions people have when they are new to flux is: where should async go?</p><p>There is no right answer right now and don’t feel bad if you’re putting it in actions or in stores. In this tutorial we’ll be calling async from the actions and the data fetching will exist in a new folder <code class=\"highlighter-rouge\">utils</code>. This tutorial will handle fetching the data and failure states.</p><p>So we create <code class=\"highlighter-rouge\">utils/LocationsFetcher.js</code>. We can use something like <a href=\"https://github.com/github/fetch\">fetch</a> to fetch some data from a server, but for the purposes of this tutorial we’ll just simulate an XHR with good ol’ <code class=\"highlighter-rouge\">setTimeout</code> and <code class=\"highlighter-rouge\">Promise</code> so we copy fetch’s API.</p><p>Here’s some mock data we’ll be using</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">mockData</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Abu Dhabi'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Berlin'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Bogota'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Buenos Aires'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Cairo'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Chicago'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Lima'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'London'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Miami'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Moscow'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Mumbai'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Paris'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'San Francisco'</span> <span class=\"p\">}</span><span class=\"p\">];</span></code></pre></div><p>So let’s create the LocationsFetcher.</p><p><code class=\"highlighter-rouge\">utils/LocationsFetcher.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">LocationsFetcher</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">fetch</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// returning a Promise because that is what fetch does.</span><span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">// simulate an asynchronous action where data is fetched on</span><span class=\"c1\">// a remote server somewhere.</span><span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// resolve with some mock data</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">mockData</span><span class=\"p\">);</span><span class=\"p\">},</span> <span class=\"mi\">250</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div><p>Next, wel’ll need to change the actions to use this new method we created. We will add an action called <code class=\"highlighter-rouge\">fetchLocations</code> which will fetch the locations and then call <code class=\"highlighter-rouge\">updateLocations</code> when it successfully completes. A new action is also added, <code class=\"highlighter-rouge\">locationsFailed</code> which deals with the locations not being available. Add these methods to the class.</p><p><code class=\"highlighter-rouge\">actions/LocationActions.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">fetchLocations</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// we dispatch an event here so we can have \"loading\" state.</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">();</span><span class=\"nx\">LocationsFetcher</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">()</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"c1\">// we can access other actions within our action through `this.actions`</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">actions</span><span class=\"p\">.</span><span class=\"nx\">updateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">);</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">actions</span><span class=\"p\">.</span><span class=\"nx\">locationsFailed</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">locationsFailed</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Next we’ll update our store to handle these new actions. It’s just a matter of adding the new actions and their handlers to <code class=\"highlighter-rouge\">bindListeners</code>. We’ll be adding a new piece of state though, ‘errorMessage’ to deal with any potential error messages.</p><p><code class=\"highlighter-rouge\">stores/LocationStore.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">LocationStore</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">handleUpdateLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">UPDATE_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleFetchLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FETCH_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleLocationsFailed</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">LOCATIONS_FAILED</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">handleUpdateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"nx\">locations</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"nx\">handleFetchLocations</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// reset the array while we're fetching new locations so React can</span><span class=\"c1\">// be smart and render a spinner for us since the data is empty.</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"p\">}</span><span class=\"nx\">handleLocationsFailed</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">=</span> <span class=\"nx\">errorMessage</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>And finally, the view will change slightly. We’ll be displaying an error message if it exists and showing a spinner if the content is loading.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">);</span><span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">fetchLocations</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Something</span> <span class=\"nx\">is</span> <span class=\"nx\">wrong</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"s2\">\"/my-cool-spinner.gif\"</span> <span class=\"o\">/&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>        <span class=\"p\">);</span><span class=\"p\">})}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><hr><h2 id=\"data-dependencies\">Data Dependencies</h2><p>One of the best features of using Flux’s dispatcher is the ability to explicitly declare data dependencies between stores.</p><p>Dealing with data dependencies is often tricky and time consuming. This is one of the reasons why flux was originally built.</p><p>Flux comes with this method called <code class=\"highlighter-rouge\">waitFor</code> which signals to the dispatcher that this store depends on another store for its data.</p><p>Say we have a new <code class=\"highlighter-rouge\">FavoritesStore</code> where you’ll be able to mark your favorite locations. We want to update the LocationStore only after the FavoriteStore gets its update.</p><p>First lets add a new action to our LocationActions.</p><p><code class=\"highlighter-rouge\">actions/LocationActions.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">favoriteLocation</span><span class=\"p\">(</span><span class=\"nx\">locationId</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">locationId</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Next, lets build our FavoritesStore.</p><p><code class=\"highlighter-rouge\">stores/FavoritesStore.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">alt</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../alt'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">LocationActions</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../actions/LocationActions'</span><span class=\"p\">);</span><span class=\"kr\">class</span> <span class=\"nx\">FavoritesStore</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">addFavoriteLocation</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FAVORITE_LOCATION</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">addFavoriteLocation</span><span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">FavoritesStore</span><span class=\"p\">,</span> <span class=\"s1\">'FavoritesStore'</span><span class=\"p\">);</span></code></pre></div><p>And finally lets set the waitFor dependency in our LocationStore. But first, make sure you bind the new action to a new action handler in the store.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">handleUpdateLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">UPDATE_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleFetchLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FETCH_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleLocationsFailed</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">LOCATIONS_FAILED</span><span class=\"p\">,</span><span class=\"na\">setFavorites</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FAVORITE_LOCATION</span><span class=\"p\">});</span></code></pre></div><p>And lets create the action handler with <code class=\"highlighter-rouge\">waitFor</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">resetAllFavorites</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span><span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span><span class=\"na\">has_favorite</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">};</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">setFavorites</span><span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">waitFor</span><span class=\"p\">(</span><span class=\"nx\">FavoritesStore</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">favoritedLocations</span> <span class=\"o\">=</span> <span class=\"nx\">FavoritesStore</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">().</span><span class=\"nx\">locations</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resetAllFavorites</span><span class=\"p\">();</span><span class=\"nx\">favoritedLocations</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"c1\">// find each location in the array</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">// set has_favorite to true</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">id</span> <span class=\"o\">===</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">has_favorite</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"p\">}</span></code></pre></div><hr><h2 id=\"conclusion\">Conclusion</h2><p>In this guide you’ve learned about creating actions, creating a store, tying your view to the store updates, dealing with asynchronous data, and dealing with store dependencies.</p><p>You can check out the code for the final result <a href=\"https://github.com/goatslacker/alt-tutorial\">here</a>.</p><p>If you have any questions feel free to reach out to me on twitter <a href=\"https://twitter.com/goatslacker\">@goatslacker</a>, or hit up the <a href=\"https://gitter.im/goatslacker/alt\">Alt Support channel</a>, and there’s also a great community around react and flux over at <a href=\"http://reactiflux.com/\">Reactiflux</a>.</p>",
      "content":"<h2 id=\"what-is-flux\">What is flux?</h2><p><a href=\"http://facebook.github.io/flux/docs/overview.html\">Flux</a> is an application architecture for building complex user interfaces. It eschews MVC in favor of unidirectional data flow. What this means is that data enters through a single place (your actions) and then flows outward through to their state manager (the store) and finally onto the view. The view can then restart the flow by calling other actions in response to user input.</p><p>We’ll be using <a href=\"https://github.com/goatslacker/alt\">Alt</a> for flux because it removes away some of the boilerplate, is isomorphic (meaning you can use it to render content server side), and it uses the flux dispatcher under the hood.</p><p>The full code for this tutorial is available <a href=\"https://github.com/goatslacker/alt-tutorial\">here</a>.</p><h2 id=\"setup\">Setup</h2><p>For this tutorial I’ll be assuming you’re familiar with <a href=\"https://facebook.github.io/react/\">React</a>, <a href=\"http://www.commonjs.org/\">CommonJS</a>, <a href=\"https://es5.github.io/\">ES5 JavaScript</a>, and a subset of <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">ES6</a> specifically the one that works with react’s transform. I’ll also assume you’re on a modern browser or a node environment.</p><h2 id=\"installing\">Installing</h2><p>If you’re using a package manager like npm or bower then go ahead and install alt.</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>npm install alt</code></pre></div><h2 id=\"folder-structure\">Folder structure</h2><p>A typical folder structure would like like this</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>your_project|--actions/|  |--MyActions.js|--stores/|  |--MyStore.js|--components/|  |--MyComponent.jsx|--alt.js|--app.js</code></pre></div><h2 id=\"creating-your-first-alt\">Creating your first alt</h2><p>For this guide we’ll be creating a very simple application which has a list of travel destinations and allows you to favorite which ones you’re interested in. Let’s get started.</p><p>We’ll be creating an instance of alt, this instantiates a <a href=\"http://facebook.github.io/flux/docs/dispatcher.html#content\">Flux dispatcher</a> for you and gives you methods to create your actions and stores. We’ll be referring back to this file throughout this guide.</p><p>In the root of your project, create a new file called <code class=\"highlighter-rouge\">alt.js</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Alt</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'alt'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">alt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Alt</span><span class=\"p\">();</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">;</span></code></pre></div><hr><h2 id=\"creating-actions\">Creating Actions</h2><p>Actions are how you get data into your stores and then onto your view. They kick-off the dispatch loop and are the single entry point of data flow.</p><p>The first actions we create will be simple, they’ll take in an array of locations we’ll pass in at the start of the application and just dispatch them to the store.</p><p>We create an action by creating a class, the class’ prototype methods will become the actions. The class syntax is completely optional you can use regular constructors and prototypes.</p><p>Inside those actions you can use <code class=\"highlighter-rouge\">this.dispatch</code> to dispatch your payload through the Dispatcher and onto the stores. Finally, make sure you export the created actions using <code class=\"highlighter-rouge\">alt.createActions</code>.</p><p><code class=\"highlighter-rouge\">actions/LocationActions.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">alt</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../alt'</span><span class=\"p\">);</span><span class=\"kr\">class</span> <span class=\"nx\">LocationActions</span> <span class=\"p\">{</span><span class=\"nx\">updateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">.</span><span class=\"nx\">createActions</span><span class=\"p\">(</span><span class=\"nx\">LocationActions</span><span class=\"p\">);</span></code></pre></div><hr><h2 id=\"creating-a-store\">Creating a Store</h2><p>The store is your data warehouse. This is the single source of truth for a particular piece of your application’s state.</p><p>Similar to actions, we’ll be creating a class for the store. Also like the actions, the class syntax is completely optional, you can use regular constructors and prototypes.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">LocationStore</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>Instance variables defined anywhere in the store will become the state. This resembles how we reason about and build normal JS classes. You can initiaize these in the constructor and then update them directly in the prototype methods.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span></code></pre></div><p>Next, we define methods in the store’s prototype that will deal with the actions. These are called action handlers.Stores automatically emit a change event when an action is dispatched through the store and the action handler ends. In order to suppress the change event you can return false from the action handler.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">handleUpdateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"nx\">locations</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div><p>And then in the constructor, we bind our action handlers to our actions.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">handleUpdateLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">UPDATE_LOCATIONS</span><span class=\"p\">});</span></code></pre></div><p>Finally, we export our newly created store.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">LocationStore</span><span class=\"p\">,</span> <span class=\"s1\">'LocationStore'</span><span class=\"p\">);</span></code></pre></div><hr><h2 id=\"using-your-view\">Using your View</h2><p>We won’t spend too much time on all the parts of the view since it is more about React than it is Flux, however, the important piece is how you listen to stores and get data out of it.</p><p>Getting the state out of your store is simple, every alt store has a method which returns its state. The state is copied over as a value when returned so you accidentally don’t mutate it by reference. We can use React’s <code class=\"highlighter-rouge\">getInitialState</code> to set the initial state using the store’s state.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">getInitialState</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">();</span><span class=\"p\">},</span></code></pre></div><p>But then we’ll want to listen to changes once the state in the store is updated. In your react component on <code class=\"highlighter-rouge\">componentDidMount</code> you can add an event handler using <code class=\"highlighter-rouge\">LocationStore.listen</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>And, don’t forget to remove your event listener.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentWillUnmount</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">unlisten</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>A few <a href=\"https://github.com/goatslacker/alt/tree/master/mixins\">mixins</a> are available to make this boilerplate go away.</p><hr><h2 id=\"fetching-data\">Fetching Data</h2><p>One of the most common questions people have when they are new to flux is: where should async go?</p><p>There is no right answer right now and don’t feel bad if you’re putting it in actions or in stores. In this tutorial we’ll be calling async from the actions and the data fetching will exist in a new folder <code class=\"highlighter-rouge\">utils</code>. This tutorial will handle fetching the data and failure states.</p><p>So we create <code class=\"highlighter-rouge\">utils/LocationsFetcher.js</code>. We can use something like <a href=\"https://github.com/github/fetch\">fetch</a> to fetch some data from a server, but for the purposes of this tutorial we’ll just simulate an XHR with good ol’ <code class=\"highlighter-rouge\">setTimeout</code> and <code class=\"highlighter-rouge\">Promise</code> so we copy fetch’s API.</p><p>Here’s some mock data we’ll be using</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">mockData</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Abu Dhabi'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Berlin'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Bogota'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Buenos Aires'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Cairo'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Chicago'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Lima'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'London'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Miami'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Moscow'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Mumbai'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Paris'</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'San Francisco'</span> <span class=\"p\">}</span><span class=\"p\">];</span></code></pre></div><p>So let’s create the LocationsFetcher.</p><p><code class=\"highlighter-rouge\">utils/LocationsFetcher.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">LocationsFetcher</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">fetch</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// returning a Promise because that is what fetch does.</span><span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">// simulate an asynchronous action where data is fetched on</span><span class=\"c1\">// a remote server somewhere.</span><span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// resolve with some mock data</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">mockData</span><span class=\"p\">);</span><span class=\"p\">},</span> <span class=\"mi\">250</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div><p>Next, wel’ll need to change the actions to use this new method we created. We will add an action called <code class=\"highlighter-rouge\">fetchLocations</code> which will fetch the locations and then call <code class=\"highlighter-rouge\">updateLocations</code> when it successfully completes. A new action is also added, <code class=\"highlighter-rouge\">locationsFailed</code> which deals with the locations not being available. Add these methods to the class.</p><p><code class=\"highlighter-rouge\">actions/LocationActions.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">fetchLocations</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// we dispatch an event here so we can have \"loading\" state.</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">();</span><span class=\"nx\">LocationsFetcher</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">()</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"c1\">// we can access other actions within our action through `this.actions`</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">actions</span><span class=\"p\">.</span><span class=\"nx\">updateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">);</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">actions</span><span class=\"p\">.</span><span class=\"nx\">locationsFailed</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">locationsFailed</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Next we’ll update our store to handle these new actions. It’s just a matter of adding the new actions and their handlers to <code class=\"highlighter-rouge\">bindListeners</code>. We’ll be adding a new piece of state though, ‘errorMessage’ to deal with any potential error messages.</p><p><code class=\"highlighter-rouge\">stores/LocationStore.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">class</span> <span class=\"nx\">LocationStore</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">handleUpdateLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">UPDATE_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleFetchLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FETCH_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleLocationsFailed</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">LOCATIONS_FAILED</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">handleUpdateLocations</span><span class=\"p\">(</span><span class=\"nx\">locations</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"nx\">locations</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"nx\">handleFetchLocations</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// reset the array while we're fetching new locations so React can</span><span class=\"c1\">// be smart and render a spinner for us since the data is empty.</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"p\">}</span><span class=\"nx\">handleLocationsFailed</span><span class=\"p\">(</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">=</span> <span class=\"nx\">errorMessage</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><p>And finally, the view will change slightly. We’ll be displaying an error message if it exists and showing a spinner if the content is loading.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">LocationStore</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onChange</span><span class=\"p\">);</span><span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">fetchLocations</span><span class=\"p\">();</span><span class=\"p\">},</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Something</span> <span class=\"nx\">is</span> <span class=\"nx\">wrong</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"s2\">\"/my-cool-spinner.gif\"</span> <span class=\"o\">/&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>        <span class=\"p\">);</span><span class=\"p\">})}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><hr><h2 id=\"data-dependencies\">Data Dependencies</h2><p>One of the best features of using Flux’s dispatcher is the ability to explicitly declare data dependencies between stores.</p><p>Dealing with data dependencies is often tricky and time consuming. This is one of the reasons why flux was originally built.</p><p>Flux comes with this method called <code class=\"highlighter-rouge\">waitFor</code> which signals to the dispatcher that this store depends on another store for its data.</p><p>Say we have a new <code class=\"highlighter-rouge\">FavoritesStore</code> where you’ll be able to mark your favorite locations. We want to update the LocationStore only after the FavoriteStore gets its update.</p><p>First lets add a new action to our LocationActions.</p><p><code class=\"highlighter-rouge\">actions/LocationActions.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">favoriteLocation</span><span class=\"p\">(</span><span class=\"nx\">locationId</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">locationId</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Next, lets build our FavoritesStore.</p><p><code class=\"highlighter-rouge\">stores/FavoritesStore.js</code></p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">alt</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../alt'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">LocationActions</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../actions/LocationActions'</span><span class=\"p\">);</span><span class=\"kr\">class</span> <span class=\"nx\">FavoritesStore</span> <span class=\"p\">{</span><span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">addFavoriteLocation</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FAVORITE_LOCATION</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">addFavoriteLocation</span><span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">alt</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">FavoritesStore</span><span class=\"p\">,</span> <span class=\"s1\">'FavoritesStore'</span><span class=\"p\">);</span></code></pre></div><p>And finally lets set the waitFor dependency in our LocationStore. But first, make sure you bind the new action to a new action handler in the store.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindListeners</span><span class=\"p\">({</span><span class=\"na\">handleUpdateLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">UPDATE_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleFetchLocations</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FETCH_LOCATIONS</span><span class=\"p\">,</span><span class=\"na\">handleLocationsFailed</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">LOCATIONS_FAILED</span><span class=\"p\">,</span><span class=\"na\">setFavorites</span><span class=\"p\">:</span> <span class=\"nx\">LocationActions</span><span class=\"p\">.</span><span class=\"nx\">FAVORITE_LOCATION</span><span class=\"p\">});</span></code></pre></div><p>And lets create the action handler with <code class=\"highlighter-rouge\">waitFor</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">resetAllFavorites</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span><span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span><span class=\"na\">has_favorite</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">};</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">setFavorites</span><span class=\"p\">(</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">waitFor</span><span class=\"p\">(</span><span class=\"nx\">FavoritesStore</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">favoritedLocations</span> <span class=\"o\">=</span> <span class=\"nx\">FavoritesStore</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">().</span><span class=\"nx\">locations</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resetAllFavorites</span><span class=\"p\">();</span><span class=\"nx\">favoritedLocations</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">location</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"c1\">// find each location in the array</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">// set has_favorite to true</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">id</span> <span class=\"o\">===</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">locations</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">has_favorite</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"p\">}</span></code></pre></div><hr><h2 id=\"conclusion\">Conclusion</h2><p>In this guide you’ve learned about creating actions, creating a store, tying your view to the store updates, dealing with asynchronous data, and dealing with store dependencies.</p><p>You can check out the code for the final result <a href=\"https://github.com/goatslacker/alt-tutorial\">here</a>.</p><p>If you have any questions feel free to reach out to me on twitter <a href=\"https://twitter.com/goatslacker\">@goatslacker</a>, or hit up the <a href=\"https://gitter.im/goatslacker/alt\">Alt Support channel</a>, and there’s also a great community around react and flux over at <a href=\"http://reactiflux.com/\">Reactiflux</a>.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Using Test Driven Development with React.js to Add Multi-Select to the Drag and Drop Component",
      "pubDate": "2015-02-07",
      "link": "https://reactjsnews.com/using-tdd-with-reactjs",
      "guid": "https://reactjsnews.com/using-tdd-with-reactjs",
      "author": "",
      "thumbnail": "",
      "description":"<p><a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">Test Driven Development (TDD)</a> is a very powerful and popular development methodology. Testing <a href=\"http://facebook.github.io/react/\">React.js</a> components is most easily accomplished with <a href=\"https://facebook.github.io/jest/\">Jest</a>. However, I rarely see articles that cover the process with lots of examples, especially for React components. This article seeks to do just that. From requirements to all tests green, we will walk through the whole process.</p><h2 id=\"background\">Background</h2><p>In our <a href=\"https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/\">last article</a>, we added some Jest based tests to our Container. I highly recommend reading that article and the preceding articles, especially the article on <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Complex Drag and Drop Lists Using React</a>. We will be building on both of these articles for this installment.</p><p>For reference, the series so far is:</p><ul><li><a href=\"https://reactjsnews.com/using-tdd-with-reactjs/\">Using TDD with React.js</a> [this article]</li><li><a href=\"https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/\">Testing the Drag and Drop Component with React.js and Jest</a></li><li><a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Complex Drag and Drop Lists Using React</a></li><li><a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">Setting up Rails for React and Jest</a></li></ul><p><em>All of the code is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</em></p><h2 id=\"starting-with-tests\">Starting with Tests</h2><p>To expand on the last article, we will be using Test Driven Development <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> to enhance our Container. This type of development starts with a test, then creates code to make the test pass. Once the test passes, the code can be refactored with confidence.</p><p>First, a little role playing. The project manager stopped by our desk and said we need some new functionality. They want our list container to support multi-select drag and drop. After some thought, we come up with some new requirements we can test.</p><ul><li>clicking on an item should mark it as selected</li><li>clicking on a selected item should mark it as not selected</li><li>it should still mark an item as selected when dragging it with no click required</li><li>it should not mark a previously selected item as not selected when dragging it</li><li>it should add all of the items to the datatransfer</li><li>it should add all of the dragged items to the container</li><li>it should remove all of the selected items from the original container when requested</li></ul><p>With these requirements in hand, let’s get started.</p><h2 id=\"selectingde-selecting-items\">Selecting/De-Selecting Items</h2><p>Since we are using TDD now, we will start with the tests. First up, clicking on an item.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Selecting Items\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">;</span><span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"nx\">item</span>      <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'highlights item as selected when clicked'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'does not highlight items when they are un-selected'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><p>These are both fairly simple to understand and appropriately red when running <code class=\"highlighter-rouge\">npm test Container</code>. Next up, dragging. We already test that items are selected when dragged. But we should make sure that selected items are not un-selected when dragged.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Drag Start\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// ...</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should keep previously selected items as selected when dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"c1\">// ...</span><span class=\"p\">});</span></code></pre></div><p>This test also fails because we do not yet handle the click event. So let’s turn these tests green.</p><h3 id=\"set\">Set</h3><p>The basic data structure for a collection of unique items is a Set. It just so happens that ECMAScript 6 has such a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set data structure</a>. Even better, there is a <a href=\"http://en.wikipedia.org/wiki/Polyfill\">polyfill</a> available as a Node package, <a href=\"https://www.npmjs.com/package/es6-set\">es6-set</a>. So, up at the top of <code class=\"highlighter-rouge\">Container.jsx</code>, we should be able to add <code class=\"highlighter-rouge\">var Set = require('es6-set');</code> and include ‘es6-set’ in our <code class=\"highlighter-rouge\">package.json</code> file. Right? Wrong!</p><p>It turns out that at least the ‘es6-set’ package is extremely incompatible with Jest. Just including the library, without even instantiating a single Set, causes Jest to crash and burn. After hours of debugging, no solution was in sight. It seems to be an issue with node packages included by other node packages.</p><p>The solution we ultimately decided upon was the creation of a SimpleSet. SimpleSet uses the an almost native ECMAScript 6 Set object when available and a simple subset when not. The implementation is available on GitHub: <a href=\"https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/support/SimpleSet.js\">SimpleSet</a> and <a href=\"https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/__tests__/support/SimpleSet-test.js\">SimpleSet-test</a>.</p><p>We did add one function that we consider missing from the ECMAScript 6 spec, toArray(). Technically, ES6 Set has <code class=\"highlighter-rouge\">Array.from()</code>. However, <code class=\"highlighter-rouge\">Array.from()</code> only has support in the latest versions of Firefox. We did not consider that an acceptable solution, even for future looking ES6.</p><p>Now that we have a SimpleSet implementation, we include it by adding <code class=\"highlighter-rouge\">var Set = require('./support/SimpleSet');</code> at the top of our <code class=\"highlighter-rouge\">Container.jsx</code> file. We also need to include <code class=\"highlighter-rouge\">\"support/\"</code> in the <code class=\"highlighter-rouge\">unmockedModulePathPatterns</code> section of the package.json, otherwise Jest will auto-mock the SimpleSet module when it is required.</p><p>* This article was 95% written, and 100% code locked, before I learned about <a href=\"https://www.npmjs.com/package/react-immutable-render-mixin\">Immutable.js</a>. Immutable.js is a superior solution. It has a Set and List implementation. Combining those with the <a href=\"https://www.npmjs.com/package/react-immutable-render-mixin\">react-immutable-render-mixin</a> makes for a very powerful combination. Expect more on this topic in a future article.</p><h3 id=\"adding-multi-select-support\">Adding Multi-Select Support</h3><p>Now that we have a Set implementation, we need to replace the old <code class=\"highlighter-rouge\">state.selected</code> with the new Set. Switching from a single <code class=\"highlighter-rouge\">selected</code> to a <code class=\"highlighter-rouge\">Set</code> for selected items will require the following changes to <code class=\"highlighter-rouge\">Container.jsx</code>.</p><ul><li><p><code class=\"highlighter-rouge\">NONE_SELECTED</code> - delete this variable completely</p></li><li><p><code class=\"highlighter-rouge\">getInitialState()</code> - replace <code class=\"highlighter-rouge\">NONE_SELECTED</code> with <code class=\"highlighter-rouge\">new Set()</code></p></li><li><p><code class=\"highlighter-rouge\">renderListElement()</code> - add two new props to the <code class=\"highlighter-rouge\">&lt;li /&gt;</code> component</p><ul><li><code class=\"highlighter-rouge\">onClick={this.onClickOnListItem}</code> - to capture the click event</li><li><code class=\"highlighter-rouge\">data-key={key}</code> - needed lookup the item when clicked</li></ul></li><li><p><code class=\"highlighter-rouge\">onClickOnListItem()</code> [new function]</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onClickOnListItem</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'data-key'</span><span class=\"p\">));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleSelectedItem</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"p\">});</span><span class=\"p\">},</span></code></pre></div><p>Notice that we are using <code class=\"highlighter-rouge\">getAttribute('data-key')</code> because Jest does not support the <code class=\"highlighter-rouge\">dataset</code> property of elements.</p></li><li><p><code class=\"highlighter-rouge\">toggleSelectedItem()</code> [new function]</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">toggleSelectedItem</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div></li></ul><p>With these changes, the tests for selecting items should go green.</p><h2 id=\"starting-drag-operations\">Starting Drag Operations</h2><p>Now that we have item selection working, we need to turn our attention to requirements for when dragging operations begin. Again, we are going to start with our tests. Fortunately, these tests are pretty self explanatory.</p><ul><li><p>it should still mark an item as selected when dragging it with no click required (existing test, no changes required)</p></li><li><p>it should not mark a previously selected item as not selected when dragging it</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should keep previously selected items as selected when dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></li><li><p>it should add all of the items to the datatransfer</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should put all selected items into the data transfer\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">item2</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item2</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockDataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">).</span><span class=\"nx\">toBeCalledWith</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">,</span> <span class=\"s1\">'[\"apple\",\"banana\"]'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></li></ul><p>These tests depend on a beforeEach that sets</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    mockDataTransfer = { setData: jest.genMockFunction() }container        = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)item             = getItemFromContainer(container, 0);</code></pre></div><p>Running the tests will, as expected, produce nice red responses.</p><h3 id=\"making-drag-start-operations-green\">Making Drag Start Operations Green</h3><p>Now we need to turn that red to green. Looking at our first set of errors leads to <code class=\"highlighter-rouge\">onDragStart</code>. It is doing many bad things, from trying to set <code class=\"highlighter-rouge\">selected = selectedIndex</code> to not including all of the items. So we can start by changing that function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onDragStart</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'data-key'</span><span class=\"p\">));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">);</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">effectAllowed</span> <span class=\"o\">=</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">;</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">,</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getSelectedItems</span><span class=\"p\">()));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"p\">});</span><span class=\"p\">},</span></code></pre></div><p>First, instead of straight assignment, we add the selected index to the selected set. We still limit the drop effect, but now we stringify all the selected items with the help of a <code class=\"highlighter-rouge\">getSelectedItems()</code> function. Finally we set the new state.</p><p><code class=\"highlighter-rouge\">getSelectedItems()</code> is fairly simple. It just copies out the selected items into an array, sorts them, and maps the resulting ids to the actual items.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">getSelectedItems</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">toArray</span><span class=\"p\">().</span><span class=\"nx\">sort</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemIndex</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">itemIndex</span><span class=\"p\">];</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>A colleague asked me, “why are you sorting the selected items?” We sort the array because Set does not specify or guarantee an order to the items it contains. So, we sort the array to guarantee the component works the same on every possible implementation and environment. This produces an array of items that matches the order of the items as they are displayed.</p><p>Also, we now have another set of green tests again. However, our drag and drop tests are still failing.</p><h2 id=\"drop-operations\">Drop Operations</h2><p>The drag over operations did not change, but we do need to address the differences in drop operations. Our requirements translate fairly well to tests that are already in our spec, they just need to be updated.</p><h3 id=\"it-should-add-all-of-the-dragged-items-to-the-container\">It Should Add All of the Dragged Items to the Container</h3><p>Starting with our test:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'adds dropped items to currently selected drop zone'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">randomDropWords</span> <span class=\"o\">=</span> <span class=\"s1\">'[\"peaches\", \"cream\"]'</span><span class=\"p\">;</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">randomDropWords</span><span class=\"p\">;</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">drop</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">([</span><span class=\"s2\">\"peaches\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cream\"</span><span class=\"p\">]));</span><span class=\"p\">});</span></code></pre></div><p>In the original test we only added “peaches”. This time we are adding <code class=\"highlighter-rouge\">[\"peaches\", \"cream\"]</code>. The only other thing that changes is we expect items to equal a slightly longer list. It is still red, but now we can make the changes required to turn this red to green, and they are fairly straight forward.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onDrop</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">));</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">correctSelectedAfterDrop</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span><span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">,</span><span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>First we change the splice function to add in all of the data with a little trick. Instead of calling <code class=\"highlighter-rouge\">this.state.items</code> directly, we call <code class=\"highlighter-rouge\">Array.prototype.splice.apply</code>. Then we pass in <code class=\"highlighter-rouge\">this.state.items</code> as the <code class=\"highlighter-rouge\">this</code> argument for the function and an array for our parameters. If you are unfamiliar with this trick, I highly recommend reading John Resig’s and Bear Bibeault’s excellent book “<a href=\"http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/\">Secrets of the JavaScript Ninja</a>.”</p><p>We setState as before. For now, <code class=\"highlighter-rouge\">correctSelectedAfterDrop = function() {}</code>. Run the tests. . . and green. Well, at least this test went green. We will need to update the <code class=\"highlighter-rouge\">correctSelectedAfterDrop</code> to make the next test pass.</p><h3 id=\"it-should-remove-all-of-the-selected-items-from-the-original-container\">It Should Remove All of the Selected Items from the Original Container</h3><p>The previous test, <code class=\"highlighter-rouge\">it('removes selected items', function() {...}</code>, should still work, but something is wrong with removing the selected items. Looking at <code class=\"highlighter-rouge\">onDragEnd</code>, it obviously needs some changes. It is still splicing a single item, based on a variable that is not a number anymore, and it is trying to set selected to NONE_SELECTED, which does not exist. Let’s take a stab a rewriting this.</p><p><em>The astute reader will also notice that we made a _faux pas</em> in our previous version in that we are setting state variables directly. We are going to clean that up now too._</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onDragEnd</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">dropEffect</span> <span class=\"o\">===</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">removeSelectedItems</span><span class=\"p\">();</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">items</span><span class=\"p\">:</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span><span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">,</span><span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">});</span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"o\">!==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">,</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>We moved the code for removing selected items into a a separate function, <code class=\"highlighter-rouge\">removeSelectedItems()</code>. Then we properly clear the set. We set the state correctly. We also fixed the second if statement to properly clear and set the state when the drag operation was cancelled.</p><p>The new function to remove selected items is a little more complex than the original splice.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">removeSelectedItems</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">toArray</span><span class=\"p\">().</span><span class=\"nx\">sort</span><span class=\"p\">().</span><span class=\"nx\">reverse</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>We start by converting the selected set into an array and, as before, sorting it. We then reverse that sort so we start from the last selected item first. Going from the first would mess up the indices with every item we removed.</p><p>Performance of reverse is unlikely to become a problem with the number of items we have selected, which is probably hundreds at most. However, if ever ever becomes a problem, just remove the <code class=\"highlighter-rouge\">reverse().map()</code> and replace with a for loop iterating from length down to zero. Yes, we could do it now, but that would be “premature optimization.” As Donald Knuth once said “Premature optimization is the root of all evil (or at least most of it) in programming.”</p><p>We could run our test now, but we are forgetting that we took a pass on <code class=\"highlighter-rouge\">correctSelectedAfterDrop()</code> in the <code class=\"highlighter-rouge\">onDrop()</code> function. We need to implement that for real now. Feel free to run the tests, but it will still be red.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">correctSelectedAfterDrop</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">droppedItems</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">bumpSet</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"p\">,</span> <span class=\"nx\">bumpBy</span>  <span class=\"o\">=</span> <span class=\"nx\">droppedItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">itemId</span> <span class=\"o\">&gt;=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">bumpSet</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"nx\">bumpSet</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"nx\">bumpSet</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">itemId</span> <span class=\"o\">+</span> <span class=\"nx\">bumpBy</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>First we start by creating a bumpSet. This is an array of selected indices that are greater than or equal to the dropZone index, <code class=\"highlighter-rouge\">hoverOver</code>. You may remember from an earlier article that we have to correct our selected index pointers for those selected items below the active drop zone because <code class=\"highlighter-rouge\">drop</code> adds new items to the container before we remove the old ones. Once we have identified the item indices that need to change, we remove each of them from the selected set. Finally, we add them back, bumped by the number of items dropped into the container.</p><p>However, we only want to do this if we dropped the items into the container from which they were extracted. This is a bit tricky since the drop event it called on the target container, but not the source container. The solution is to rely on the fact that only one container will have an active drop zone at a time (drop zones are deactivated when the pointer leaves the container). So if we have a drop event and hoverOver is <strong>not</strong> NO_HOVER, then we know we need to modify the selected item indices.</p><p>Now, when we run our tests, we see all green. And when we fire up our browser, it works as expected.</p><h2 id=\"conclusion\">Conclusion</h2><p>This article shows the TDD process for adding a new feature from start (new requirements) to finish (tests updated, added, and passing). As articles go, it is not particularly exciting or ground breaking. However, for developers who have not written (m)any tests, especially for JavaScript code, I have seen precious few articles giving must direction. Hopefully some developers will find it useful.</p><h2 id=\"coming-soon\">Coming Soon</h2><p>I am working on an in-depth walk through of <a href=\"http://facebook.github.io/flux/\">Flux</a> architecture, focusing on the <a href=\"https://github.com/spoike/refluxjs/\">Reflux</a> library. Reflux is one of the simplest implementations of Flux. If everything goes well, I should have that online by the end of February.</p><p>Also, on a side note, a colleague suggested that I start recording these tutorials as screencasts. Before I spend a substantial amount of time, energy, and resources learning how to do that, I would love some feedback on whether anybody would even find it useful.</p>",
      "content":"<p><a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">Test Driven Development (TDD)</a> is a very powerful and popular development methodology. Testing <a href=\"http://facebook.github.io/react/\">React.js</a> components is most easily accomplished with <a href=\"https://facebook.github.io/jest/\">Jest</a>. However, I rarely see articles that cover the process with lots of examples, especially for React components. This article seeks to do just that. From requirements to all tests green, we will walk through the whole process.</p><h2 id=\"background\">Background</h2><p>In our <a href=\"https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/\">last article</a>, we added some Jest based tests to our Container. I highly recommend reading that article and the preceding articles, especially the article on <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Complex Drag and Drop Lists Using React</a>. We will be building on both of these articles for this installment.</p><p>For reference, the series so far is:</p><ul><li><a href=\"https://reactjsnews.com/using-tdd-with-reactjs/\">Using TDD with React.js</a> [this article]</li><li><a href=\"https://reactjsnews.com/testing-drag-and-drop-components-in-react-js/\">Testing the Drag and Drop Component with React.js and Jest</a></li><li><a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Complex Drag and Drop Lists Using React</a></li><li><a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">Setting up Rails for React and Jest</a></li></ul><p><em>All of the code is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</em></p><h2 id=\"starting-with-tests\">Starting with Tests</h2><p>To expand on the last article, we will be using Test Driven Development <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> to enhance our Container. This type of development starts with a test, then creates code to make the test pass. Once the test passes, the code can be refactored with confidence.</p><p>First, a little role playing. The project manager stopped by our desk and said we need some new functionality. They want our list container to support multi-select drag and drop. After some thought, we come up with some new requirements we can test.</p><ul><li>clicking on an item should mark it as selected</li><li>clicking on a selected item should mark it as not selected</li><li>it should still mark an item as selected when dragging it with no click required</li><li>it should not mark a previously selected item as not selected when dragging it</li><li>it should add all of the items to the datatransfer</li><li>it should add all of the dragged items to the container</li><li>it should remove all of the selected items from the original container when requested</li></ul><p>With these requirements in hand, let’s get started.</p><h2 id=\"selectingde-selecting-items\">Selecting/De-Selecting Items</h2><p>Since we are using TDD now, we will start with the tests. First up, clicking on an item.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Selecting Items\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">;</span><span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"nx\">item</span>      <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'highlights item as selected when clicked'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'does not highlight items when they are un-selected'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><p>These are both fairly simple to understand and appropriately red when running <code class=\"highlighter-rouge\">npm test Container</code>. Next up, dragging. We already test that items are selected when dragged. But we should make sure that selected items are not un-selected when dragged.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Drag Start\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// ...</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should keep previously selected items as selected when dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"c1\">// ...</span><span class=\"p\">});</span></code></pre></div><p>This test also fails because we do not yet handle the click event. So let’s turn these tests green.</p><h3 id=\"set\">Set</h3><p>The basic data structure for a collection of unique items is a Set. It just so happens that ECMAScript 6 has such a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set data structure</a>. Even better, there is a <a href=\"http://en.wikipedia.org/wiki/Polyfill\">polyfill</a> available as a Node package, <a href=\"https://www.npmjs.com/package/es6-set\">es6-set</a>. So, up at the top of <code class=\"highlighter-rouge\">Container.jsx</code>, we should be able to add <code class=\"highlighter-rouge\">var Set = require('es6-set');</code> and include ‘es6-set’ in our <code class=\"highlighter-rouge\">package.json</code> file. Right? Wrong!</p><p>It turns out that at least the ‘es6-set’ package is extremely incompatible with Jest. Just including the library, without even instantiating a single Set, causes Jest to crash and burn. After hours of debugging, no solution was in sight. It seems to be an issue with node packages included by other node packages.</p><p>The solution we ultimately decided upon was the creation of a SimpleSet. SimpleSet uses the an almost native ECMAScript 6 Set object when available and a simple subset when not. The implementation is available on GitHub: <a href=\"https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/support/SimpleSet.js\">SimpleSet</a> and <a href=\"https://github.com/HurricaneJames/dex/blob/master/app/assets/javascripts/components/__tests__/support/SimpleSet-test.js\">SimpleSet-test</a>.</p><p>We did add one function that we consider missing from the ECMAScript 6 spec, toArray(). Technically, ES6 Set has <code class=\"highlighter-rouge\">Array.from()</code>. However, <code class=\"highlighter-rouge\">Array.from()</code> only has support in the latest versions of Firefox. We did not consider that an acceptable solution, even for future looking ES6.</p><p>Now that we have a SimpleSet implementation, we include it by adding <code class=\"highlighter-rouge\">var Set = require('./support/SimpleSet');</code> at the top of our <code class=\"highlighter-rouge\">Container.jsx</code> file. We also need to include <code class=\"highlighter-rouge\">\"support/\"</code> in the <code class=\"highlighter-rouge\">unmockedModulePathPatterns</code> section of the package.json, otherwise Jest will auto-mock the SimpleSet module when it is required.</p><p>* This article was 95% written, and 100% code locked, before I learned about <a href=\"https://www.npmjs.com/package/react-immutable-render-mixin\">Immutable.js</a>. Immutable.js is a superior solution. It has a Set and List implementation. Combining those with the <a href=\"https://www.npmjs.com/package/react-immutable-render-mixin\">react-immutable-render-mixin</a> makes for a very powerful combination. Expect more on this topic in a future article.</p><h3 id=\"adding-multi-select-support\">Adding Multi-Select Support</h3><p>Now that we have a Set implementation, we need to replace the old <code class=\"highlighter-rouge\">state.selected</code> with the new Set. Switching from a single <code class=\"highlighter-rouge\">selected</code> to a <code class=\"highlighter-rouge\">Set</code> for selected items will require the following changes to <code class=\"highlighter-rouge\">Container.jsx</code>.</p><ul><li><p><code class=\"highlighter-rouge\">NONE_SELECTED</code> - delete this variable completely</p></li><li><p><code class=\"highlighter-rouge\">getInitialState()</code> - replace <code class=\"highlighter-rouge\">NONE_SELECTED</code> with <code class=\"highlighter-rouge\">new Set()</code></p></li><li><p><code class=\"highlighter-rouge\">renderListElement()</code> - add two new props to the <code class=\"highlighter-rouge\">&lt;li /&gt;</code> component</p><ul><li><code class=\"highlighter-rouge\">onClick={this.onClickOnListItem}</code> - to capture the click event</li><li><code class=\"highlighter-rouge\">data-key={key}</code> - needed lookup the item when clicked</li></ul></li><li><p><code class=\"highlighter-rouge\">onClickOnListItem()</code> [new function]</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onClickOnListItem</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'data-key'</span><span class=\"p\">));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toggleSelectedItem</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"p\">});</span><span class=\"p\">},</span></code></pre></div><p>Notice that we are using <code class=\"highlighter-rouge\">getAttribute('data-key')</code> because Jest does not support the <code class=\"highlighter-rouge\">dataset</code> property of elements.</p></li><li><p><code class=\"highlighter-rouge\">toggleSelectedItem()</code> [new function]</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">toggleSelectedItem</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div></li></ul><p>With these changes, the tests for selecting items should go green.</p><h2 id=\"starting-drag-operations\">Starting Drag Operations</h2><p>Now that we have item selection working, we need to turn our attention to requirements for when dragging operations begin. Again, we are going to start with our tests. Fortunately, these tests are pretty self explanatory.</p><ul><li><p>it should still mark an item as selected when dragging it with no click required (existing test, no changes required)</p></li><li><p>it should not mark a previously selected item as not selected when dragging it</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should keep previously selected items as selected when dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></li><li><p>it should add all of the items to the datatransfer</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should put all selected items into the data transfer\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">item2</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item2</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockDataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">).</span><span class=\"nx\">toBeCalledWith</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">,</span> <span class=\"s1\">'[\"apple\",\"banana\"]'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></li></ul><p>These tests depend on a beforeEach that sets</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    mockDataTransfer = { setData: jest.genMockFunction() }container        = TestUtils.renderIntoDocument(&lt;Container itemTemplate={CustomTemplate} items={randomWords} /&gt;)item             = getItemFromContainer(container, 0);</code></pre></div><p>Running the tests will, as expected, produce nice red responses.</p><h3 id=\"making-drag-start-operations-green\">Making Drag Start Operations Green</h3><p>Now we need to turn that red to green. Looking at our first set of errors leads to <code class=\"highlighter-rouge\">onDragStart</code>. It is doing many bad things, from trying to set <code class=\"highlighter-rouge\">selected = selectedIndex</code> to not including all of the items. So we can start by changing that function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onDragStart</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'data-key'</span><span class=\"p\">));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">selectedIndex</span><span class=\"p\">);</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">effectAllowed</span> <span class=\"o\">=</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">;</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">,</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getSelectedItems</span><span class=\"p\">()));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"p\">});</span><span class=\"p\">},</span></code></pre></div><p>First, instead of straight assignment, we add the selected index to the selected set. We still limit the drop effect, but now we stringify all the selected items with the help of a <code class=\"highlighter-rouge\">getSelectedItems()</code> function. Finally we set the new state.</p><p><code class=\"highlighter-rouge\">getSelectedItems()</code> is fairly simple. It just copies out the selected items into an array, sorts them, and maps the resulting ids to the actual items.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">getSelectedItems</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">toArray</span><span class=\"p\">().</span><span class=\"nx\">sort</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemIndex</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">itemIndex</span><span class=\"p\">];</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>A colleague asked me, “why are you sorting the selected items?” We sort the array because Set does not specify or guarantee an order to the items it contains. So, we sort the array to guarantee the component works the same on every possible implementation and environment. This produces an array of items that matches the order of the items as they are displayed.</p><p>Also, we now have another set of green tests again. However, our drag and drop tests are still failing.</p><h2 id=\"drop-operations\">Drop Operations</h2><p>The drag over operations did not change, but we do need to address the differences in drop operations. Our requirements translate fairly well to tests that are already in our spec, they just need to be updated.</p><h3 id=\"it-should-add-all-of-the-dragged-items-to-the-container\">It Should Add All of the Dragged Items to the Container</h3><p>Starting with our test:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'adds dropped items to currently selected drop zone'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">randomDropWords</span> <span class=\"o\">=</span> <span class=\"s1\">'[\"peaches\", \"cream\"]'</span><span class=\"p\">;</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">randomDropWords</span><span class=\"p\">;</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">drop</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">([</span><span class=\"s2\">\"peaches\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cream\"</span><span class=\"p\">]));</span><span class=\"p\">});</span></code></pre></div><p>In the original test we only added “peaches”. This time we are adding <code class=\"highlighter-rouge\">[\"peaches\", \"cream\"]</code>. The only other thing that changes is we expect items to equal a slightly longer list. It is still red, but now we can make the changes required to turn this red to green, and they are fairly straight forward.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onDrop</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">));</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">));</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">correctSelectedAfterDrop</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span><span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">,</span><span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>First we change the splice function to add in all of the data with a little trick. Instead of calling <code class=\"highlighter-rouge\">this.state.items</code> directly, we call <code class=\"highlighter-rouge\">Array.prototype.splice.apply</code>. Then we pass in <code class=\"highlighter-rouge\">this.state.items</code> as the <code class=\"highlighter-rouge\">this</code> argument for the function and an array for our parameters. If you are unfamiliar with this trick, I highly recommend reading John Resig’s and Bear Bibeault’s excellent book “<a href=\"http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/\">Secrets of the JavaScript Ninja</a>.”</p><p>We setState as before. For now, <code class=\"highlighter-rouge\">correctSelectedAfterDrop = function() {}</code>. Run the tests. . . and green. Well, at least this test went green. We will need to update the <code class=\"highlighter-rouge\">correctSelectedAfterDrop</code> to make the next test pass.</p><h3 id=\"it-should-remove-all-of-the-selected-items-from-the-original-container\">It Should Remove All of the Selected Items from the Original Container</h3><p>The previous test, <code class=\"highlighter-rouge\">it('removes selected items', function() {...}</code>, should still work, but something is wrong with removing the selected items. Looking at <code class=\"highlighter-rouge\">onDragEnd</code>, it obviously needs some changes. It is still splicing a single item, based on a variable that is not a number anymore, and it is trying to set selected to NONE_SELECTED, which does not exist. Let’s take a stab a rewriting this.</p><p><em>The astute reader will also notice that we made a _faux pas</em> in our previous version in that we are setting state variables directly. We are going to clean that up now too._</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">onDragEnd</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">dropEffect</span> <span class=\"o\">===</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">removeSelectedItems</span><span class=\"p\">();</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">items</span><span class=\"p\">:</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span><span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">,</span><span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">});</span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"o\">!==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">,</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>We moved the code for removing selected items into a a separate function, <code class=\"highlighter-rouge\">removeSelectedItems()</code>. Then we properly clear the set. We set the state correctly. We also fixed the second if statement to properly clear and set the state when the drag operation was cancelled.</p><p>The new function to remove selected items is a little more complex than the original splice.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">removeSelectedItems</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">toArray</span><span class=\"p\">().</span><span class=\"nx\">sort</span><span class=\"p\">().</span><span class=\"nx\">reverse</span><span class=\"p\">().</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"p\">},</span></code></pre></div><p>We start by converting the selected set into an array and, as before, sorting it. We then reverse that sort so we start from the last selected item first. Going from the first would mess up the indices with every item we removed.</p><p>Performance of reverse is unlikely to become a problem with the number of items we have selected, which is probably hundreds at most. However, if ever ever becomes a problem, just remove the <code class=\"highlighter-rouge\">reverse().map()</code> and replace with a for loop iterating from length down to zero. Yes, we could do it now, but that would be “premature optimization.” As Donald Knuth once said “Premature optimization is the root of all evil (or at least most of it) in programming.”</p><p>We could run our test now, but we are forgetting that we took a pass on <code class=\"highlighter-rouge\">correctSelectedAfterDrop()</code> in the <code class=\"highlighter-rouge\">onDrop()</code> function. We need to implement that for real now. Feel free to run the tests, but it will still be red.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">correctSelectedAfterDrop</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">droppedItems</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">bumpSet</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"p\">,</span> <span class=\"nx\">bumpBy</span>  <span class=\"o\">=</span> <span class=\"nx\">droppedItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">itemId</span> <span class=\"o\">&gt;=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">bumpSet</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"nx\">bumpSet</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"nx\">bumpSet</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">itemId</span> <span class=\"o\">+</span> <span class=\"nx\">bumpBy</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>First we start by creating a bumpSet. This is an array of selected indices that are greater than or equal to the dropZone index, <code class=\"highlighter-rouge\">hoverOver</code>. You may remember from an earlier article that we have to correct our selected index pointers for those selected items below the active drop zone because <code class=\"highlighter-rouge\">drop</code> adds new items to the container before we remove the old ones. Once we have identified the item indices that need to change, we remove each of them from the selected set. Finally, we add them back, bumped by the number of items dropped into the container.</p><p>However, we only want to do this if we dropped the items into the container from which they were extracted. This is a bit tricky since the drop event it called on the target container, but not the source container. The solution is to rely on the fact that only one container will have an active drop zone at a time (drop zones are deactivated when the pointer leaves the container). So if we have a drop event and hoverOver is <strong>not</strong> NO_HOVER, then we know we need to modify the selected item indices.</p><p>Now, when we run our tests, we see all green. And when we fire up our browser, it works as expected.</p><h2 id=\"conclusion\">Conclusion</h2><p>This article shows the TDD process for adding a new feature from start (new requirements) to finish (tests updated, added, and passing). As articles go, it is not particularly exciting or ground breaking. However, for developers who have not written (m)any tests, especially for JavaScript code, I have seen precious few articles giving must direction. Hopefully some developers will find it useful.</p><h2 id=\"coming-soon\">Coming Soon</h2><p>I am working on an in-depth walk through of <a href=\"http://facebook.github.io/flux/\">Flux</a> architecture, focusing on the <a href=\"https://github.com/spoike/refluxjs/\">Reflux</a> library. Reflux is one of the simplest implementations of Flux. If everything goes well, I should have that online by the end of February.</p><p>Also, on a side note, a colleague suggested that I start recording these tutorials as screencasts. Before I spend a substantial amount of time, energy, and resources learning how to do that, I would love some feedback on whether anybody would even find it useful.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "React Conf Recap",
      "pubDate": "2015-01-31",
      "link": "https://reactjsnews.com/react-conf-recap",
      "guid": "https://reactjsnews.com/react-conf-recap",
      "author": "",
      "thumbnail": "",
      "description":"<p>After live tweeting the whole conference this past week, I feel obligated to write up on it. I’ll be covering the main stuff announced, at any point feel free to leave a comment or a reply on Twitter <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a> with any questions. I try my best to respond to everyone.</p><p>##React Native</p><p>This is the most talked about thing that has come from this conference. The React team has been working on a way to solve problems with building native apps. React Native allows you to use React like you normally would, but with new native-specific components. It will allow you to code once and ship an android and iOS app simultaneously. Not only does this help further the team’s “Learn once, write everywhere” concept, it is even more practical than that. This tweet sums it up nicely.</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-0\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560509563485843456\"></twitterwidget><p>If you don’t get it, you really shouldn’t be using React. On a more serious note, the coolest points about RN is live reloading. No waiting for it to compile your app after making a code change. The project is still in its infancy, there isn’t really a complete routing solution, which is understandable considering it’s not even public yet. The good news is that the <a href=\"https://github.com/rackt/react-router\">react-router</a> team has verbally committed to making it compatible with RN.</p><p>If you’re curious about what these React Native components look like, I posted a picture from the conference:</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-1\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560861371697332225\"></twitterwidget><p>One of the top features here is the fact that <a href=\"http://twitter.com/vjeux\">@Vjeux</a> brought over full <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">flexbox</a> compatibility into React Native. So you can style things the way you’re used to doing on the web.</p><p>Everytime I remember another awesome feature that RN has, I keep wanting to say that it’s the best feature, they’re all just so awesome. The next thing it can do is use any npm module you’re already using. It’ll work out of the box!</p><p>If you were curious about how good the gestures are in a React Native app, Pete Hunt sums it up pretty well.</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-2\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560881445325926401\"></twitterwidget><p>Another good tweet from an iOS developer confirms that RN is really good.</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-3\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560675254654078976\"></twitterwidget><p>You can see a deep dive into RN <a href=\"https://www.youtube.com/watch?v=7rDsRXj9-cU\">on youtube</a>.</p><p>##Relay &amp; GraphQL</p><p>Relay was mentioned a little, but after talking to some members on the team, I found out it’ll be months before it’s actually released. This is a shame because it solves the missing piece with Flux. It is a full framework that uses React and GraphQL. GraphQL, is a new way to fetch data from your backend and is meant to be a replacement for REST. What’s really nice about it is that inside of your components you define the data you’re checking. Not that much is known other than the fact that you can delay certain data from loading in your app if you need to. Facebook loads posts and then after that is finished, in a non-blocking way of course, then comments are fetched. You’ll also be able to slowly migrate flux apps over to Relay. I’m very interested in seeing what this framework will have to offer.</p><p>##What’s NextYou can see all of the conference talks <a href=\"https://www.youtube.com/playlist?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr\">on youtube</a>. I hope you liked my recap of the conference.</p><p>After asking people on Twitter if there’s any React jobs available I got an overwhelming response. I’m currently working on a job board built using React that’ll hopefully be up soon. For now I’ll continue to send out jobs and other secret stuff in the newsletter. You can subscribe to that in the sidebar!</p><script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
      "content":"<p>After live tweeting the whole conference this past week, I feel obligated to write up on it. I’ll be covering the main stuff announced, at any point feel free to leave a comment or a reply on Twitter <a href=\"http://twitter.com/reactjsnews\">@ReactJSNews</a> with any questions. I try my best to respond to everyone.</p><p>##React Native</p><p>This is the most talked about thing that has come from this conference. The React team has been working on a way to solve problems with building native apps. React Native allows you to use React like you normally would, but with new native-specific components. It will allow you to code once and ship an android and iOS app simultaneously. Not only does this help further the team’s “Learn once, write everywhere” concept, it is even more practical than that. This tweet sums it up nicely.</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-0\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560509563485843456\"></twitterwidget><p>If you don’t get it, you really shouldn’t be using React. On a more serious note, the coolest points about RN is live reloading. No waiting for it to compile your app after making a code change. The project is still in its infancy, there isn’t really a complete routing solution, which is understandable considering it’s not even public yet. The good news is that the <a href=\"https://github.com/rackt/react-router\">react-router</a> team has verbally committed to making it compatible with RN.</p><p>If you’re curious about what these React Native components look like, I posted a picture from the conference:</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-1\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560861371697332225\"></twitterwidget><p>One of the top features here is the fact that <a href=\"http://twitter.com/vjeux\">@Vjeux</a> brought over full <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">flexbox</a> compatibility into React Native. So you can style things the way you’re used to doing on the web.</p><p>Everytime I remember another awesome feature that RN has, I keep wanting to say that it’s the best feature, they’re all just so awesome. The next thing it can do is use any npm module you’re already using. It’ll work out of the box!</p><p>If you were curious about how good the gestures are in a React Native app, Pete Hunt sums it up pretty well.</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-2\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560881445325926401\"></twitterwidget><p>Another good tweet from an iOS developer confirms that RN is really good.</p><twitterwidget class=\"twitter-tweet twitter-tweet-rendered\" id=\"twitter-widget-3\" style=\"position: static; visibility: visible; display: block; transform: rotate(0deg); max-width: 100%; width: 500px; min-width: 220px; margin-top: 10px; margin-bottom: 10px;\" data-tweet-id=\"560675254654078976\"></twitterwidget><p>You can see a deep dive into RN <a href=\"https://www.youtube.com/watch?v=7rDsRXj9-cU\">on youtube</a>.</p><p>##Relay &amp; GraphQL</p><p>Relay was mentioned a little, but after talking to some members on the team, I found out it’ll be months before it’s actually released. This is a shame because it solves the missing piece with Flux. It is a full framework that uses React and GraphQL. GraphQL, is a new way to fetch data from your backend and is meant to be a replacement for REST. What’s really nice about it is that inside of your components you define the data you’re checking. Not that much is known other than the fact that you can delay certain data from loading in your app if you need to. Facebook loads posts and then after that is finished, in a non-blocking way of course, then comments are fetched. You’ll also be able to slowly migrate flux apps over to Relay. I’m very interested in seeing what this framework will have to offer.</p><p>##What’s NextYou can see all of the conference talks <a href=\"https://www.youtube.com/playlist?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr\">on youtube</a>. I hope you liked my recap of the conference.</p><p>After asking people on Twitter if there’s any React jobs available I got an overwhelming response. I’m currently working on a job board built using React that’ll hopefully be up soon. For now I’ll continue to send out jobs and other secret stuff in the newsletter. You can subscribe to that in the sidebar!</p><script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Testing Drag and Drop Components in React.js",
      "pubDate": "2015-01-25",
      "link": "https://reactjsnews.com/testing-drag-and-drop-components-in-react-js",
      "guid": "https://reactjsnews.com/testing-drag-and-drop-components-in-react-js",
      "author": "",
      "thumbnail": "",
      "description": "<p>Welcome back! <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Last time</a> we left off with a nice little Container component that allowed dragging and dropping items both internally and between components. However, despite having the ability with our <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">setup</a>, we did not write a single test. The time has come to fix that shortcoming, with lots and lots of examples.</p><p><em>Note: All of the code is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</em></p><h2 id=\"general-concepts\">General Concepts</h2><p>Test Driven Development (<a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a>) is a development philosophy based on the concept of rapid iteration and automated testing. The TDD process starts with a test to describe a feature or bug. The test runs, and fails. Code is written and then, hopefully, the test passes (goes green). Then the developer can refactor that code knowing that as long as the test stays green, everything should be good.</p><p>As a general rule, TDD attempts to do <a href=\"http://en.wikipedia.org/wiki/Black-box_testing\">black-box testing</a> whenever possible. Put in simple terms, it means we should not need to know the internals of the function we are testing. This helps make our tests less fragile when refactoring code. Of course, when writing tests before code, this is not a problem because we cannot know anything about the internal code until after the test is written.</p><p>Overall, TDD improves both design and maintainability of projects. However, a lot of projects, like our Container, were developed without tests. In fact most of us probably spend the majority of our time maintaining and enhancing legacy applications that have no or poor tests. Best practices for dealing with test-poor legacy apps dictate that we wrap some tests around existing features and requirements before enhancing with TDD. And that is exactly what we are going to do in this article.</p><h2 id=\"our-testing-toolkit-jest-and-react-test-utilities\">Our Testing Toolkit: Jest and React Test Utilities</h2><p><a href=\"https://facebook.github.io/jest/\">Jest</a> is the testing engine designed by Facebook to go with React. It is based on <a href=\"https://github.com/jasmine/jasmine\">Jasmine</a>, so very familiar to anybody who has done Jasmine tests before. Much of the actual test code we write will be standard Jasmine. You will find a lot of useful testing information in the Jasmine <a href=\"http://jasmine.github.io/2.1/introduction.html\">Introduction</a>, especially the section on <a href=\"http://jasmine.github.io/2.1/introduction.html#section-Included_Matchers\">included matchers</a>.</p><p>However, unlike Jasmine, Jest is run from the command line and backed by a fake DOM. This makes using Jest with <a href=\"http://en.wikipedia.org/wiki/Continuous_integration\">continuous integration</a> systems such as <a href=\"http://jenkins-ci.org/\">Jenkins</a> easier. It also means Jest can spin up multiple processes and run the tests faster.</p><p>Jest’s biggest advantage is probably “automocking.” Modules imported via CommonJS <code class=\"highlighter-rouge\">require()</code> are automatically mocked. Automocking makes it very easy to test a single module at a time. It also means we need to be careful with some libraries that should not be mocked out. We will cover this in greater detail later.</p><p><a href=\"http://facebook.github.io/react/\">React</a> provides some nice <a href=\"http://facebook.github.io/react/docs/test-utils.html\">testing utilities</a>. They are located in the “React with Add-Ons” implementation, and accessed via <code class=\"highlighter-rouge\">React.addons.TestUtils</code>. Be sure to read through the <a href=\"http://facebook.github.io/react/docs/test-utils.html\">documentation</a> as the ‘Simulate’ and ‘find’ / ‘scry’ methods will be used a lot.</p><p>Finally, one small caveat. Jest is billed as “Painless JavaScript Unit Testing.” However, Jest and React TestUtils are frequently a pain. Throughout this article, I will point out some of places that Jest complicated our lives and made us write code just for testing. That said, it is a lot better than it could have been and definitely worth the effort. A big thanks goes out to the devs on the Jest and React projects who have made this as easy as it is.</p><h2 id=\"getting-started\">Getting Started</h2><p>This article picks up where <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">“Complex Drag and Drop Lists Using React”</a> left off. It is recommended reading prior to this article, but not absolutely required. The code for that article is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v1.0\">Dex v1.0 tag</a>. The code for this article is available in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</p><p>We are using a Rails based project structure because that was how we setup our basic demo project in <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">“Setting up Rails with React and Jest”</a>. Tests are located in the <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests__/</code> directory. The test file is named <code class=\"highlighter-rouge\">[Component]-test.jsx</code>, where <code class=\"highlighter-rouge\">[Component]</code> is the name of the component we are testing. So, the tests for Container will be in <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests__/Container-test.jsx</code>, and can run it with <code class=\"highlighter-rouge\">npm test Container</code>. It should be relatively easy to map this structure to whatever setup is being used.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># Directory Structure/app/assets/javascripts/components/__tests__Container-test.jsxContainer.jsx</code></pre></div><p>Tests are run from the command line via <code class=\"highlighter-rouge\">npm test</code> or <code class=\"highlighter-rouge\">npm test [Component]</code>.</p><h2 id=\"requirements\">Requirements</h2><p>The first step of testing a legacy app is to figure out the requirements of the original code. Reviewing the code, there are a few that come to mind quickly. Try to avoid getting too bogged down thinking of requirements, just get a good representation for now. It is easy to add tests for other requirements as they become apparent, which they usually will when working through the initial list.</p><ul><li>when given a list of items, it should render them all to the screen</li><li>when given a list of items and a template, it should render the list using the template for each item</li><li>items should be marked as draggable</li><li>dragging an item should highlight the item being dragged</li><li>dragging an item should call setData in the datatransfer with the right type and data being dragged</li><li>dragging over a dropZone should highlight the drop zone</li><li>dragging over the top half of an item should active the pervious drop zone</li><li>dragging over the bottom half of an item should active the next drop zone</li><li>dragging out of the container should clear any active drop zones</li><li>dropping should add the item to the list</li><li>dropping should remove selected items from the original list</li></ul><p>As stated previously, there are probably more, but this is a good start. Next we will start building out tests and validating that each one goes green.</p><h2 id=\"the-tests\">The Tests</h2><p>Jest tests follow the standard ‘describe/it’ syntax from Jasmine. Also, remember that Jest does automocking, so we need to tell it not to mock our test target. The file will start with something like the following.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../Container'</span><span class=\"p\">);</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Container'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// it('should put some tests in here', function() {});</span><span class=\"p\">});</span></code></pre></div><p><em>Side note: Jest provides an <code class=\"highlighter-rouge\">it.only()</code> function to run a single test. This is highly useful when trying to fix a single test at a time.</em></p><h3 id=\"when-given-a-list-of-items-it-should-render-them-all-to-the-screen\">When given a list of items, it should render them all to the screen.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should display items, by default, in a text template (span element)'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">));</span><span class=\"p\">});</span></code></pre></div><p>First, we start with the <code class=\"highlighter-rouge\">it()</code> function. Like <code class=\"highlighter-rouge\">describe()</code>, <code class=\"highlighter-rouge\">it()</code> expects two parameters, a description and a function. We told Jest not to automock <code class=\"highlighter-rouge\">Container</code> earlier, so <code class=\"highlighter-rouge\">require()</code> works like normal. The <code class=\"highlighter-rouge\">Container</code> is then rendered into the fake DOM with the React <code class=\"highlighter-rouge\">TestUtils.renderIntoDocument()</code> function. By using a <code class=\"highlighter-rouge\">jsx</code> extension, the <code class=\"highlighter-rouge\">Container-test.jsx</code> will automatically convert <code class=\"highlighter-rouge\">&lt;Container items={randomWords} /&gt;</code> into plain JavaScript. The returned <code class=\"highlighter-rouge\">container</code> is the component that was rendered, and is the basis for all further testing.</p><p>Jest tests pass if all expectations pass or if there are no expectations. An expectation is set with the <code class=\"highlighter-rouge\">expect()</code> function. Here, we expect that the <code class=\"highlighter-rouge\">Container</code> rendered the words to the page. <code class=\"highlighter-rouge\">container.getDOMNode()</code> gets the DOM node. The <code class=\"highlighter-rouge\">textContent</code> property contains all the text content that is rendered inside the node. <code class=\"highlighter-rouge\">expect</code> then takes a matcher, in this case <code class=\"highlighter-rouge\">toBe()</code>.</p><h3 id=\"when-given-a-list-of-items-and-a-template-it-should-render-the-list-using-the-template-for-each-item\">When given a list of items and a template, it should render the list using the template for each item.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CustomTemplate</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'CustomTemplate'</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">.</span><span class=\"nx\">isRequired</span> <span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"customFinder\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;; </span><span class=\"err\">}</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should display items with a custom template'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Just like the last test, we start with <code class=\"highlighter-rouge\">renderIntoDocument</code>. However, this time we add the <code class=\"highlighter-rouge\">itemTemplate={CustomTemplate}</code> property. The CustomTemplate is very similar to the default TextTemplate. The only difference between the default <code class=\"highlighter-rouge\">TextTemplate</code> defined in <code class=\"highlighter-rouge\">Container.jsx</code> is that we add <code class=\"highlighter-rouge\">className=\"customFinder\"</code> to make it easy to find our rendered elements.</p><p>The second line of our test uses this classname along with the <code class=\"highlighter-rouge\">TestUtils.scryRenderedDOMComponentsWithClass()</code> function to retrieve the rendered items. <code class=\"highlighter-rouge\">map()</code> is a standard Array function that iterates over the results of <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithClass()</code> and creates an array of the returned items.</p><p>Finally, we run our actual <code class=\"highlighter-rouge\">expect()</code> test. This time we check that <code class=\"highlighter-rouge\">items</code> is equal to the original array we passed to the <code class=\"highlighter-rouge\">Container</code>. This works because we pulled out the actual item nodes and iterated each one into an array with map.</p><h3 id=\"items-should-be-marked-as-draggable\">Items should be marked as draggable.</h3><p>As we saw in the previous article, setting the <code class=\"highlighter-rouge\">draggable</code> attribute is required for HTML5 Drag and Drop. That means we should probably guarantee that any refactoring does not forget to include it.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should mark items as draggable'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'draggable'</span><span class=\"p\">)).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><p>As with the last test, this one starts by creating a <code class=\"highlighter-rouge\">container</code>. We then use <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithTag()</code> to grab all of the ‘li’ components, keeping the second one (the first component is a drop zone). Finally, we test for the <code class=\"highlighter-rouge\">draggable</code> attribute, expecting it <code class=\"highlighter-rouge\">toBeTruthy()</code>.</p><p>Of course, now that we think about it, it is probably important to be sure that drop zones are not accidentally marked as draggable. Normally, we would not test whether something was not marked. However, drop zones are very similar to items, so it makes sense. It also helps to reinforce that drop zones are always present and not generated during drag operations.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should not mark drop zones as draggable'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">dropZone</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'draggable'</span><span class=\"p\">)).</span><span class=\"nx\">toBeFalsy</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><h3 id=\"dragging-an-item-should-highlight-the-item-being-dragged\">Dragging an item should highlight the item being dragged.</h3><p>In the original article we “highlighted” an item using the <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a> technique of embedded styles. <del>Now, we should be able to test this by calling <code class=\"highlighter-rouge\">getDOMNode().style</code> or <code class=\"highlighter-rouge\">props.style</code>, but neither seems to work. They both failed to return the style we set in our Container.jsx file.</del></p><p><del>Instead, the solution we chose was the good old <code class=\"highlighter-rouge\">className</code> property. It is always painful to change working code just for the sake of testing, but sometimes there is no other choice. We can call this pain point #1.</del></p><p>For historical, <em>and stupidity</em> reasons, we modified the code to add a className attribute and test for that attirbute. We are keeping that solution here. See the <strong>Changes</strong> section at the bottom for an explanation.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'highlights item as selected when being dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">setData</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">genMockFunction</span><span class=\"p\">()</span> <span class=\"p\">};</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"kd\">function</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nx\">itemId</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"p\">}</span></code></pre></div><p>We do a couple things differently in this test. First we pull the <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithTag</code> logic into a separate function. This is both more readable and <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRYer</a>. Then we make sure the class name is blank initially. Next we simulate a dragStart event so the container only marks dragged items as selected. Then we check whether the className was applied. While we do not actually know that it was highlighted, we know a specific class was added, and presumably that class will trigger some highlighting.</p><p>So, what about the <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">dataTransfer:</span><span class=\"w\"> </span><span class=\"err\">mockDataTransfer</span><span class=\"w\"> </span><span class=\"p\">}</span></code> property. <code class=\"highlighter-rouge\">Simulate.dragSTart</code> takes an event properties parameter. In this case, we happen to know that our <code class=\"highlighter-rouge\">dragStart</code> function handler requires a <code class=\"highlighter-rouge\">dataTransfer.setData()</code> function, so we add a mock function. It slightly breaks black-box testing to know we need to supply a dataTransfer, but it is the only way to test. It would be much better if the React TestUtils supplied the required properties for the events they are simulating, but we can call that pain point #2.</p><p>While we are talking about “pain points”, I should mention one other. Jest does not support the HTMLElement <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset\"><code class=\"highlighter-rouge\">dataset</code></a> property. It is probably better that we do not use it anyway because Internet Explorer did not support it until IE11. Also, as the Mozilla Developer Network points out in “Issues” section of the “<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\">Using data attributes</a>” guide that there is a performance penalty when using <code class=\"highlighter-rouge\">dataset</code>.</p><p>Bottom line, we need to make a few code changes so our tests can pass. First, replace all instances of <code class=\"highlighter-rouge\">dataset.key</code> with <code class=\"highlighter-rouge\">getAttribute('data-key')</code>. Second, we need to add the <code class=\"highlighter-rouge\">className</code> prop to the selected item in <code class=\"highlighter-rouge\">renderListItem</code>’s <code class=\"highlighter-rouge\">&lt;li /&gt;</code> component.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>`className={this.state.selected.has(key) ? 'container-selected' : ''}`</code></pre></div><p>With these code changes, our tests now pass.</p><h3 id=\"dragging-an-item-should-call-setdata-in-the-datatransfer-with-the-right-type-and-data-being-dragged\">Dragging an item should call setData in the datatransfer with the right type and data being dragged.</h3><p>As we saw in the last test, React TestUtils <code class=\"highlighter-rouge\">Simulate</code> functions do not replicate the <code class=\"highlighter-rouge\">dataTransfer</code> event property, but we can mock it on a per call basis. To work with HTML5 Drag and Drop, we must call <code class=\"highlighter-rouge\">dataTransfer.setData()</code>, so it is probably a really good idea to make sure the call was made.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CONTAINER_TYPE</span> <span class=\"o\">=</span> <span class=\"s1\">'custom_container_type'</span><span class=\"p\">;</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should set the data transfer with the correct type and the items to being dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">setData</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">genMockFunction</span><span class=\"p\">()</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockDataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">).</span><span class=\"nx\">toBeCalledWith</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">,</span> <span class=\"s1\">'[\"apple\"]'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>This test is almost the same as the last one. In fact, many devs would combine this test with the last test, but I have found it makes requirements easier to determine if the tests are lower level. However it is arranged, it is important to check that the <code class=\"highlighter-rouge\">mockDataTransfer.setData()</code> function was called with the right data type, <code class=\"highlighter-rouge\">'custom_container_type'</code>, and the proper JSON representation of the data. For convenience later, we extract the dataType <code class=\"highlighter-rouge\">'custom_container_type'</code> into the global variable, <code class=\"highlighter-rouge\">CONTAINER_TYPE</code>.</p><h3 id=\"dragging-over-a-dropzone-should-highlight-the-drop-zone\">Dragging over a dropZone should highlight the drop zone.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span> <span class=\"o\">=</span> <span class=\"s1\">'container-dropZone-active'</span><span class=\"p\">;</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'shows the current dropzone when hovering over drop zone'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">dropZone</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"p\">};</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"kd\">function</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nx\">itemId</span><span class=\"p\">];</span><span class=\"p\">}</span></code></pre></div><p>~~Just like our test to see if selected items were highlighted, we run into pain point #1 (no access to style properties) all over again. Again, using the className solution works. This time we simulate a <code class=\"highlighter-rouge\">dragOver</code> event. ~~</p><p>We are keeping the <code class=\"highlighter-rouge\">className</code> solution becuase it is already done, but style is definitely accessible.</p><p>Again, we need to change our code to make the test pass. This time, add the <code class=\"highlighter-rouge\">className={this.state.hoverOver === index ? 'container-dropZone-active' : ''}</code> to the renderDropZone’s <code class=\"highlighter-rouge\">&lt;li /&gt;</code> component.</p><p>And now we realize another requirement we had forgotten about in the original list. Part of the HTML5 drag and drop spec is that, by default, drop is not allowed. The spec requires calling <code class=\"highlighter-rouge\">event.preventDefault()</code> on the dragEnter and/or dragOver operations. Also, our container only allows drops for certain types. Fortunately, we know how to mock functions for the simulated event.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mockEvent = {dataTransfer: { types: [CONTAINER_TYPE] },preventDefault: jest.genMockFunction()}</code></pre></div><p>We can test that this was called using the expect <code class=\"highlighter-rouge\">toBeCalled()</code> matcher.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>expect(mockEvent.preventDefault).toBeCalled();</code></pre></div><p>We only allow drops when a drop zone is activated, so it is perfectly acceptable to make this a second expectation of the current test. If you are really paranoid, you could create another test with a bad container type to verify the mock event <code class=\"highlighter-rouge\">preventDefault()</code> function was <code class=\"highlighter-rouge\">not.toBeCalled()</code> and that the drop zone was not activated.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should not activate a dropzone when the container type is wrong'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">dropZone</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'bad_type'</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"p\">};</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeCalled</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><h3 id=\"dragging-over-the-top-half-of-an-item-should-active-the-pervious-drop-zone\">Dragging over the top half of an item should active the pervious drop zone.</h3><p>At this point we have started repeating ourselves. So first we are going to make use of the very helpful <code class=\"highlighter-rouge\">beforeEach()</code> function. <code class=\"highlighter-rouge\">beforeEach()</code> will run before each of the tests in a <code class=\"highlighter-rouge\">describe()</code> block. This gives us a way of setting up some common variables and making sure they are the same for each test. As a side note, Jasmine has three other <a href=\"http://jasmine.github.io/2.1/introduction.html#section-Setup_and_Teardown\">Setup and Teardown</a> functions that you might find useful.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">dropZoneAbove</span><span class=\"p\">,</span> <span class=\"nx\">dropZoneBelow</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">;</span><span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span>     <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">]</span> <span class=\"p\">},</span><span class=\"na\">preventDefault</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">genMockFunction</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"nx\">container</span>     <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">overItem</span>      <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"nx\">dropZoneAbove</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"nx\">dropZoneBelow</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"p\">});</span></code></pre></div><p>Do not forget to refactor the previous tests in the same describe block to use the variables defined in beforeEach, otherwise there is unnecessary duplicate code.</p><p>Now, run the tests again. If every thing is still green, it is time to check that dragging over the top half of an item activates the drop zone above that item.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'shows previous drop zone when hovering over top half of item'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetTop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">).</span><span class=\"nx\">toBeCalled</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><p>Notice that we are specifying the mouse position (<code class=\"highlighter-rouge\">clientY</code>) and item dimensions (<code class=\"highlighter-rouge\">offsetTop</code> and <code class=\"highlighter-rouge\">offsetHeight</code>). Interestingly, this test did pass in this environment. However, it might throw errors in other environments because those values are used but not defined. Also, Be sure to note that we have three expectations for this test. The first two check that the right drop zone was activated. The last checks that this method of activating a drop zone also calls prevent default.</p><h3 id=\"dragging-over-the-bottom-half-of-an-item-should-active-the-next-drop-zone\">Dragging over the bottom half of an item should active the next drop zone.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'shows next drop zone when hovering over bottom half of item'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetTop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">).</span><span class=\"nx\">toBeCalled</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><p>This test looks almost identical to the last test. The only change is our mouse position (<code class=\"highlighter-rouge\">clientY</code>) is now 7. We define the item to be 10px high with <code class=\"highlighter-rouge\">offsetHeight</code>, so this puts the drag event in the bottom half of the item.</p><p>Unlike the last test, this one will fail without the mouse position and item dimensions. In environments where the code does not throw an error, the wrong drop zone will be activated. Providing the mouse position and element height fix this problem.</p><h3 id=\"dragging-out-of-the-container-should-clear-any-active-drop-zones\">Dragging out of the container should clear any active drop zones.</h3><p>This was an important fix from the last article. Otherwise drop zones remain active after dragging the item out of the container, even when just dragging over a container.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should clear any active drop zones when the dragged item leaves the container\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">containerElement</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'ul'</span><span class=\"p\">).</span><span class=\"nx\">getDOMNode</span><span class=\"p\">();</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientX</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">=</span> <span class=\"mi\">101</span><span class=\"p\">;</span><span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span> <span class=\"o\">=</span> <span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetLeft</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">=</span> <span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetWidth</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragLeave</span><span class=\"p\">(</span><span class=\"nx\">containerElement</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>First, our <code class=\"highlighter-rouge\">container</code> is the React element, not the list element where we attached the <code class=\"highlighter-rouge\">onDragLeave</code> event handler. That means we need to capture the <code class=\"highlighter-rouge\">'ul'</code> element to <code class=\"highlighter-rouge\">containerElement</code>. This is done with <code class=\"highlighter-rouge\">findRenderedDOMComponentWithTag()</code>. So far we have been using the <code class=\"highlighter-rouge\">scry</code> versions of these functions. <code class=\"highlighter-rouge\">scry</code> will find all, <code class=\"highlighter-rouge\">find</code> will find the single instance and throw an error if it is unable.</p><p>Next, we simulate a dragOver event and check that it activated one of the drop zones.</p><p>Then we setup the mouse coordinates and bounding dimensions of the list. We know from the code that these are important, but we also know from the HTML5 spec that they will be provided.</p><p>Finally, we simulate the drag leave and check that the number of active drop zones is now back to zero.</p><h3 id=\"dropping-should-add-the-item-to-the-list\">Dropping should add the item to the list.</h3><p>For our drop testing we will use a new beforeEach setup.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">overItem</span>  <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span><span class=\"nx\">mockEvent</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>This will give us a container, with <code class=\"highlighter-rouge\">overItem</code> pointing to the last dropZone and a basic mockEvent. Then we can test whether dropping adds the item.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'adds dropped items to currently selected drop zone'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s1\">'\"peaches\"'</span><span class=\"p\">;</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">drop</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">([</span><span class=\"s2\">\"peaches\"</span><span class=\"p\">]));</span><span class=\"p\">});</span></code></pre></div><p>First, we add a mock getData function that just returns <code class=\"highlighter-rouge\">\"peaches\"</code>. Then we simulate a drag over to activate a drop zone, and we simulate a drop event to put that data into the container. Finally, we extract the items and see if our new item has been appended to the end.</p><h3 id=\"dropping-should-remove-selected-items-from-the-original-list\">Dropping should remove selected items from the original list.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'removes selected items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">dropEffect</span> <span class=\"o\">=</span> <span class=\"s2\">\"move\"</span><span class=\"p\">;</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s2\">\"[\"\"</span> <span class=\"o\">+</span> <span class=\"nx\">randomWords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\"\"]\"</span><span class=\"p\">;</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">drop</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragEnd</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"c1\">// array where first item is now last</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]));</span><span class=\"p\">});</span></code></pre></div><p>This time we grab the first item in the container. We setup the mockEvent dataTransfer with that item’s information. Then we simulate all of the events that normally happen, including the dragEnd. Then we check that the result is the list with with the first item removed and pinned to the end (<code class=\"highlighter-rouge\">randomWords.slice(1).concat(randomWords[0])</code>).</p><h2 id=\"conclusion\">Conclusion</h2><p>This article should have provided a decent description of testing a complex React component with Jest. We covered basic Jasmine syntax (<code class=\"highlighter-rouge\">describe</code>, <code class=\"highlighter-rouge\">it</code>, <code class=\"highlighter-rouge\">it.only</code>, <code class=\"highlighter-rouge\">expect</code>, <code class=\"highlighter-rouge\">toBe</code>, <code class=\"highlighter-rouge\">toEqual</code>, <code class=\"highlighter-rouge\">toBeCalled</code>, <code class=\"highlighter-rouge\">not</code>, <code class=\"highlighter-rouge\">beforeEach</code>). We covered how to actually run the tests <code class=\"highlighter-rouge\">npm test</code>. We saw quite a few of the React test utilities (<code class=\"highlighter-rouge\">Simulate.[click, dragStart, dragOver, dragLeave, drop, dragEnd]</code>, <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithClass</code>, <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithTag</code>, <code class=\"highlighter-rouge\">findRenderedDOMComponentWithTag</code>). We covered mocking the event data object, and some of the pain that it causes. And we gave lots of working test code as examples in the process.</p><p>This article also provides a decent starting point for the next article, <a href=\"https://reactjsnews.com/using-tdd-with-reactjs/\">Using Test Driven Development with React.js</a>. In fact, that article was originally part of this article. As the length of this article grew, it was clear it needed to be broken up a bit. On the bright side, that means there is already a draft, so it should be up in the next couple days.</p><h2 id=\"changes\">Changes</h2><p>So, as often happens, the solution to a problem comes to us when doing <em>other</em> things. And, as is often the case, that solution humbles us and makes us feel stupid. This is one such solution.</p><p>Originally, I argued that the <code class=\"highlighter-rouge\">style</code> property was unavailable. This ruined the otherwise beautiful CSS in JS paradigm. I was wrong.</p><p>The <code class=\"highlighter-rouge\">style</code> property is perfectly available via <code class=\"highlighter-rouge\">item.props.style</code>. However, what is not available is the <code class=\"highlighter-rouge\">ObjectMerge</code> module, because we forgot to tell Jest not to auto-mock it. Since it was mocked, it does not actually merge anything. Solution, <code class=\"highlighter-rouge\">jest.dontMock()</code> or move the ObjectMerge.jsxand Object.Assign.js to the <code class=\"highlighter-rouge\">support/</code> directory, which is on the <code class=\"highlighter-rouge\">unmockedModulePathPatterns</code> in package.json.</p><p>I always try to look on the bright side of things, and there is a bright side to this story. My pain and humiliation serves as a <a href=\"http://www.despair.com/mistakes.html\">cautionary tale</a> of the to others. Auto-mocking is great, but it has some gotchas.</p>",
      "content": "<p>Welcome back! <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">Last time</a> we left off with a nice little Container component that allowed dragging and dropping items both internally and between components. However, despite having the ability with our <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">setup</a>, we did not write a single test. The time has come to fix that shortcoming, with lots and lots of examples.</p><p><em>Note: All of the code is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</em></p><h2 id=\"general-concepts\">General Concepts</h2><p>Test Driven Development (<a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a>) is a development philosophy based on the concept of rapid iteration and automated testing. The TDD process starts with a test to describe a feature or bug. The test runs, and fails. Code is written and then, hopefully, the test passes (goes green). Then the developer can refactor that code knowing that as long as the test stays green, everything should be good.</p><p>As a general rule, TDD attempts to do <a href=\"http://en.wikipedia.org/wiki/Black-box_testing\">black-box testing</a> whenever possible. Put in simple terms, it means we should not need to know the internals of the function we are testing. This helps make our tests less fragile when refactoring code. Of course, when writing tests before code, this is not a problem because we cannot know anything about the internal code until after the test is written.</p><p>Overall, TDD improves both design and maintainability of projects. However, a lot of projects, like our Container, were developed without tests. In fact most of us probably spend the majority of our time maintaining and enhancing legacy applications that have no or poor tests. Best practices for dealing with test-poor legacy apps dictate that we wrap some tests around existing features and requirements before enhancing with TDD. And that is exactly what we are going to do in this article.</p><h2 id=\"our-testing-toolkit-jest-and-react-test-utilities\">Our Testing Toolkit: Jest and React Test Utilities</h2><p><a href=\"https://facebook.github.io/jest/\">Jest</a> is the testing engine designed by Facebook to go with React. It is based on <a href=\"https://github.com/jasmine/jasmine\">Jasmine</a>, so very familiar to anybody who has done Jasmine tests before. Much of the actual test code we write will be standard Jasmine. You will find a lot of useful testing information in the Jasmine <a href=\"http://jasmine.github.io/2.1/introduction.html\">Introduction</a>, especially the section on <a href=\"http://jasmine.github.io/2.1/introduction.html#section-Included_Matchers\">included matchers</a>.</p><p>However, unlike Jasmine, Jest is run from the command line and backed by a fake DOM. This makes using Jest with <a href=\"http://en.wikipedia.org/wiki/Continuous_integration\">continuous integration</a> systems such as <a href=\"http://jenkins-ci.org/\">Jenkins</a> easier. It also means Jest can spin up multiple processes and run the tests faster.</p><p>Jest’s biggest advantage is probably “automocking.” Modules imported via CommonJS <code class=\"highlighter-rouge\">require()</code> are automatically mocked. Automocking makes it very easy to test a single module at a time. It also means we need to be careful with some libraries that should not be mocked out. We will cover this in greater detail later.</p><p><a href=\"http://facebook.github.io/react/\">React</a> provides some nice <a href=\"http://facebook.github.io/react/docs/test-utils.html\">testing utilities</a>. They are located in the “React with Add-Ons” implementation, and accessed via <code class=\"highlighter-rouge\">React.addons.TestUtils</code>. Be sure to read through the <a href=\"http://facebook.github.io/react/docs/test-utils.html\">documentation</a> as the ‘Simulate’ and ‘find’ / ‘scry’ methods will be used a lot.</p><p>Finally, one small caveat. Jest is billed as “Painless JavaScript Unit Testing.” However, Jest and React TestUtils are frequently a pain. Throughout this article, I will point out some of places that Jest complicated our lives and made us write code just for testing. That said, it is a lot better than it could have been and definitely worth the effort. A big thanks goes out to the devs on the Jest and React projects who have made this as easy as it is.</p><h2 id=\"getting-started\">Getting Started</h2><p>This article picks up where <a href=\"https://reactjsnews.com/complex-drag-and-drop-lists-using-react/\">“Complex Drag and Drop Lists Using React”</a> left off. It is recommended reading prior to this article, but not absolutely required. The code for that article is available on GitHub in the <a href=\"https://github.com/HurricaneJames/dex/tree/v1.0\">Dex v1.0 tag</a>. The code for this article is available in the <a href=\"https://github.com/HurricaneJames/dex/tree/v2.0\">Dex v2.0 tag</a>.</p><p>We are using a Rails based project structure because that was how we setup our basic demo project in <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">“Setting up Rails with React and Jest”</a>. Tests are located in the <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests__/</code> directory. The test file is named <code class=\"highlighter-rouge\">[Component]-test.jsx</code>, where <code class=\"highlighter-rouge\">[Component]</code> is the name of the component we are testing. So, the tests for Container will be in <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests__/Container-test.jsx</code>, and can run it with <code class=\"highlighter-rouge\">npm test Container</code>. It should be relatively easy to map this structure to whatever setup is being used.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># Directory Structure/app/assets/javascripts/components/__tests__Container-test.jsxContainer.jsx</code></pre></div><p>Tests are run from the command line via <code class=\"highlighter-rouge\">npm test</code> or <code class=\"highlighter-rouge\">npm test [Component]</code>.</p><h2 id=\"requirements\">Requirements</h2><p>The first step of testing a legacy app is to figure out the requirements of the original code. Reviewing the code, there are a few that come to mind quickly. Try to avoid getting too bogged down thinking of requirements, just get a good representation for now. It is easy to add tests for other requirements as they become apparent, which they usually will when working through the initial list.</p><ul><li>when given a list of items, it should render them all to the screen</li><li>when given a list of items and a template, it should render the list using the template for each item</li><li>items should be marked as draggable</li><li>dragging an item should highlight the item being dragged</li><li>dragging an item should call setData in the datatransfer with the right type and data being dragged</li><li>dragging over a dropZone should highlight the drop zone</li><li>dragging over the top half of an item should active the pervious drop zone</li><li>dragging over the bottom half of an item should active the next drop zone</li><li>dragging out of the container should clear any active drop zones</li><li>dropping should add the item to the list</li><li>dropping should remove selected items from the original list</li></ul><p>As stated previously, there are probably more, but this is a good start. Next we will start building out tests and validating that each one goes green.</p><h2 id=\"the-tests\">The Tests</h2><p>Jest tests follow the standard ‘describe/it’ syntax from Jasmine. Also, remember that Jest does automocking, so we need to tell it not to mock our test target. The file will start with something like the following.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../Container'</span><span class=\"p\">);</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Container'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"c1\">// it('should put some tests in here', function() {});</span><span class=\"p\">});</span></code></pre></div><p><em>Side note: Jest provides an <code class=\"highlighter-rouge\">it.only()</code> function to run a single test. This is highly useful when trying to fix a single test at a time.</em></p><h3 id=\"when-given-a-list-of-items-it-should-render-them-all-to-the-screen\">When given a list of items, it should render them all to the screen.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should display items, by default, in a text template (span element)'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">));</span><span class=\"p\">});</span></code></pre></div><p>First, we start with the <code class=\"highlighter-rouge\">it()</code> function. Like <code class=\"highlighter-rouge\">describe()</code>, <code class=\"highlighter-rouge\">it()</code> expects two parameters, a description and a function. We told Jest not to automock <code class=\"highlighter-rouge\">Container</code> earlier, so <code class=\"highlighter-rouge\">require()</code> works like normal. The <code class=\"highlighter-rouge\">Container</code> is then rendered into the fake DOM with the React <code class=\"highlighter-rouge\">TestUtils.renderIntoDocument()</code> function. By using a <code class=\"highlighter-rouge\">jsx</code> extension, the <code class=\"highlighter-rouge\">Container-test.jsx</code> will automatically convert <code class=\"highlighter-rouge\">&lt;Container items={randomWords} /&gt;</code> into plain JavaScript. The returned <code class=\"highlighter-rouge\">container</code> is the component that was rendered, and is the basis for all further testing.</p><p>Jest tests pass if all expectations pass or if there are no expectations. An expectation is set with the <code class=\"highlighter-rouge\">expect()</code> function. Here, we expect that the <code class=\"highlighter-rouge\">Container</code> rendered the words to the page. <code class=\"highlighter-rouge\">container.getDOMNode()</code> gets the DOM node. The <code class=\"highlighter-rouge\">textContent</code> property contains all the text content that is rendered inside the node. <code class=\"highlighter-rouge\">expect</code> then takes a matcher, in this case <code class=\"highlighter-rouge\">toBe()</code>.</p><h3 id=\"when-given-a-list-of-items-and-a-template-it-should-render-the-list-using-the-template-for-each-item\">When given a list of items and a template, it should render the list using the template for each item.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CustomTemplate</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'CustomTemplate'</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">.</span><span class=\"nx\">isRequired</span> <span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"customFinder\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;; </span><span class=\"err\">}</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should display items with a custom template'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Just like the last test, we start with <code class=\"highlighter-rouge\">renderIntoDocument</code>. However, this time we add the <code class=\"highlighter-rouge\">itemTemplate={CustomTemplate}</code> property. The CustomTemplate is very similar to the default TextTemplate. The only difference between the default <code class=\"highlighter-rouge\">TextTemplate</code> defined in <code class=\"highlighter-rouge\">Container.jsx</code> is that we add <code class=\"highlighter-rouge\">className=\"customFinder\"</code> to make it easy to find our rendered elements.</p><p>The second line of our test uses this classname along with the <code class=\"highlighter-rouge\">TestUtils.scryRenderedDOMComponentsWithClass()</code> function to retrieve the rendered items. <code class=\"highlighter-rouge\">map()</code> is a standard Array function that iterates over the results of <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithClass()</code> and creates an array of the returned items.</p><p>Finally, we run our actual <code class=\"highlighter-rouge\">expect()</code> test. This time we check that <code class=\"highlighter-rouge\">items</code> is equal to the original array we passed to the <code class=\"highlighter-rouge\">Container</code>. This works because we pulled out the actual item nodes and iterated each one into an array with map.</p><h3 id=\"items-should-be-marked-as-draggable\">Items should be marked as draggable.</h3><p>As we saw in the previous article, setting the <code class=\"highlighter-rouge\">draggable</code> attribute is required for HTML5 Drag and Drop. That means we should probably guarantee that any refactoring does not forget to include it.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should mark items as draggable'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'draggable'</span><span class=\"p\">)).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><p>As with the last test, this one starts by creating a <code class=\"highlighter-rouge\">container</code>. We then use <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithTag()</code> to grab all of the ‘li’ components, keeping the second one (the first component is a drop zone). Finally, we test for the <code class=\"highlighter-rouge\">draggable</code> attribute, expecting it <code class=\"highlighter-rouge\">toBeTruthy()</code>.</p><p>Of course, now that we think about it, it is probably important to be sure that drop zones are not accidentally marked as draggable. Normally, we would not test whether something was not marked. However, drop zones are very similar to items, so it makes sense. It also helps to reinforce that drop zones are always present and not generated during drag operations.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should not mark drop zones as draggable'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">dropZone</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'draggable'</span><span class=\"p\">)).</span><span class=\"nx\">toBeFalsy</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><h3 id=\"dragging-an-item-should-highlight-the-item-being-dragged\">Dragging an item should highlight the item being dragged.</h3><p>In the original article we “highlighted” an item using the <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a> technique of embedded styles. <del>Now, we should be able to test this by calling <code class=\"highlighter-rouge\">getDOMNode().style</code> or <code class=\"highlighter-rouge\">props.style</code>, but neither seems to work. They both failed to return the style we set in our Container.jsx file.</del></p><p><del>Instead, the solution we chose was the good old <code class=\"highlighter-rouge\">className</code> property. It is always painful to change working code just for the sake of testing, but sometimes there is no other choice. We can call this pain point #1.</del></p><p>For historical, <em>and stupidity</em> reasons, we modified the code to add a className attribute and test for that attirbute. We are keeping that solution here. See the <strong>Changes</strong> section at the bottom for an explanation.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'highlights item as selected when being dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">setData</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">genMockFunction</span><span class=\"p\">()</span> <span class=\"p\">};</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'container-selected'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"kd\">function</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nx\">itemId</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"p\">}</span></code></pre></div><p>We do a couple things differently in this test. First we pull the <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithTag</code> logic into a separate function. This is both more readable and <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRYer</a>. Then we make sure the class name is blank initially. Next we simulate a dragStart event so the container only marks dragged items as selected. Then we check whether the className was applied. While we do not actually know that it was highlighted, we know a specific class was added, and presumably that class will trigger some highlighting.</p><p>So, what about the <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"err\">dataTransfer:</span><span class=\"w\"> </span><span class=\"err\">mockDataTransfer</span><span class=\"w\"> </span><span class=\"p\">}</span></code> property. <code class=\"highlighter-rouge\">Simulate.dragSTart</code> takes an event properties parameter. In this case, we happen to know that our <code class=\"highlighter-rouge\">dragStart</code> function handler requires a <code class=\"highlighter-rouge\">dataTransfer.setData()</code> function, so we add a mock function. It slightly breaks black-box testing to know we need to supply a dataTransfer, but it is the only way to test. It would be much better if the React TestUtils supplied the required properties for the events they are simulating, but we can call that pain point #2.</p><p>While we are talking about “pain points”, I should mention one other. Jest does not support the HTMLElement <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset\"><code class=\"highlighter-rouge\">dataset</code></a> property. It is probably better that we do not use it anyway because Internet Explorer did not support it until IE11. Also, as the Mozilla Developer Network points out in “Issues” section of the “<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\">Using data attributes</a>” guide that there is a performance penalty when using <code class=\"highlighter-rouge\">dataset</code>.</p><p>Bottom line, we need to make a few code changes so our tests can pass. First, replace all instances of <code class=\"highlighter-rouge\">dataset.key</code> with <code class=\"highlighter-rouge\">getAttribute('data-key')</code>. Second, we need to add the <code class=\"highlighter-rouge\">className</code> prop to the selected item in <code class=\"highlighter-rouge\">renderListItem</code>’s <code class=\"highlighter-rouge\">&lt;li /&gt;</code> component.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>`className={this.state.selected.has(key) ? 'container-selected' : ''}`</code></pre></div><p>With these code changes, our tests now pass.</p><h3 id=\"dragging-an-item-should-call-setdata-in-the-datatransfer-with-the-right-type-and-data-being-dragged\">Dragging an item should call setData in the datatransfer with the right type and data being dragged.</h3><p>As we saw in the last test, React TestUtils <code class=\"highlighter-rouge\">Simulate</code> functions do not replicate the <code class=\"highlighter-rouge\">dataTransfer</code> event property, but we can mock it on a per call basis. To work with HTML5 Drag and Drop, we must call <code class=\"highlighter-rouge\">dataTransfer.setData()</code>, so it is probably a really good idea to make sure the call was made.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CONTAINER_TYPE</span> <span class=\"o\">=</span> <span class=\"s1\">'custom_container_type'</span><span class=\"p\">;</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should set the data transfer with the correct type and the items to being dragged'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">setData</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">genMockFunction</span><span class=\"p\">()</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"nx\">mockDataTransfer</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockDataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">).</span><span class=\"nx\">toBeCalledWith</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">,</span> <span class=\"s1\">'[\"apple\"]'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>This test is almost the same as the last one. In fact, many devs would combine this test with the last test, but I have found it makes requirements easier to determine if the tests are lower level. However it is arranged, it is important to check that the <code class=\"highlighter-rouge\">mockDataTransfer.setData()</code> function was called with the right data type, <code class=\"highlighter-rouge\">'custom_container_type'</code>, and the proper JSON representation of the data. For convenience later, we extract the dataType <code class=\"highlighter-rouge\">'custom_container_type'</code> into the global variable, <code class=\"highlighter-rouge\">CONTAINER_TYPE</code>.</p><h3 id=\"dragging-over-a-dropzone-should-highlight-the-drop-zone\">Dragging over a dropZone should highlight the drop zone.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span> <span class=\"o\">=</span> <span class=\"s1\">'container-dropZone-active'</span><span class=\"p\">;</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'shows the current dropzone when hovering over drop zone'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">dropZone</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"p\">};</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"kd\">function</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">itemId</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nx\">itemId</span><span class=\"p\">];</span><span class=\"p\">}</span></code></pre></div><p>~~Just like our test to see if selected items were highlighted, we run into pain point #1 (no access to style properties) all over again. Again, using the className solution works. This time we simulate a <code class=\"highlighter-rouge\">dragOver</code> event. ~~</p><p>We are keeping the <code class=\"highlighter-rouge\">className</code> solution becuase it is already done, but style is definitely accessible.</p><p>Again, we need to change our code to make the test pass. This time, add the <code class=\"highlighter-rouge\">className={this.state.hoverOver === index ? 'container-dropZone-active' : ''}</code> to the renderDropZone’s <code class=\"highlighter-rouge\">&lt;li /&gt;</code> component.</p><p>And now we realize another requirement we had forgotten about in the original list. Part of the HTML5 drag and drop spec is that, by default, drop is not allowed. The spec requires calling <code class=\"highlighter-rouge\">event.preventDefault()</code> on the dragEnter and/or dragOver operations. Also, our container only allows drops for certain types. Fortunately, we know how to mock functions for the simulated event.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mockEvent = {dataTransfer: { types: [CONTAINER_TYPE] },preventDefault: jest.genMockFunction()}</code></pre></div><p>We can test that this was called using the expect <code class=\"highlighter-rouge\">toBeCalled()</code> matcher.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>expect(mockEvent.preventDefault).toBeCalled();</code></pre></div><p>We only allow drops when a drop zone is activated, so it is perfectly acceptable to make this a second expectation of the current test. If you are really paranoid, you could create another test with a bad container type to verify the mock event <code class=\"highlighter-rouge\">preventDefault()</code> function was <code class=\"highlighter-rouge\">not.toBeCalled()</code> and that the drop zone was not activated.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should not activate a dropzone when the container type is wrong'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">)</span>    <span class=\"p\">,</span> <span class=\"nx\">dropZone</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'bad_type'</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"p\">};</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZone</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeCalled</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><h3 id=\"dragging-over-the-top-half-of-an-item-should-active-the-pervious-drop-zone\">Dragging over the top half of an item should active the pervious drop zone.</h3><p>At this point we have started repeating ourselves. So first we are going to make use of the very helpful <code class=\"highlighter-rouge\">beforeEach()</code> function. <code class=\"highlighter-rouge\">beforeEach()</code> will run before each of the tests in a <code class=\"highlighter-rouge\">describe()</code> block. This gives us a way of setting up some common variables and making sure they are the same for each test. As a side note, Jasmine has three other <a href=\"http://jasmine.github.io/2.1/introduction.html#section-Setup_and_Teardown\">Setup and Teardown</a> functions that you might find useful.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">dropZoneAbove</span><span class=\"p\">,</span> <span class=\"nx\">dropZoneBelow</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">;</span><span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span>     <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">]</span> <span class=\"p\">},</span><span class=\"na\">preventDefault</span><span class=\"p\">:</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">genMockFunction</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"nx\">container</span>     <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">overItem</span>      <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"nx\">dropZoneAbove</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"nx\">dropZoneBelow</span> <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"p\">});</span></code></pre></div><p>Do not forget to refactor the previous tests in the same describe block to use the variables defined in beforeEach, otherwise there is unnecessary duplicate code.</p><p>Now, run the tests again. If every thing is still green, it is time to check that dragging over the top half of an item activates the drop zone above that item.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'shows previous drop zone when hovering over top half of item'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetTop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">).</span><span class=\"nx\">toBeCalled</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><p>Notice that we are specifying the mouse position (<code class=\"highlighter-rouge\">clientY</code>) and item dimensions (<code class=\"highlighter-rouge\">offsetTop</code> and <code class=\"highlighter-rouge\">offsetHeight</code>). Interestingly, this test did pass in this environment. However, it might throw errors in other environments because those values are used but not defined. Also, Be sure to note that we have three expectations for this test. The first two check that the right drop zone was activated. The last checks that this method of activating a drop zone also calls prevent default.</p><h3 id=\"dragging-over-the-bottom-half-of-an-item-should-active-the-next-drop-zone\">Dragging over the bottom half of an item should active the next drop zone.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'shows next drop zone when hovering over bottom half of item'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetTop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">overItem</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneAbove</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">dropZoneBelow</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">).</span><span class=\"nx\">toBeCalled</span><span class=\"p\">();</span><span class=\"p\">});</span></code></pre></div><p>This test looks almost identical to the last test. The only change is our mouse position (<code class=\"highlighter-rouge\">clientY</code>) is now 7. We define the item to be 10px high with <code class=\"highlighter-rouge\">offsetHeight</code>, so this puts the drag event in the bottom half of the item.</p><p>Unlike the last test, this one will fail without the mouse position and item dimensions. In environments where the code does not throw an error, the wrong drop zone will be activated. Providing the mouse position and element height fix this problem.</p><h3 id=\"dragging-out-of-the-container-should-clear-any-active-drop-zones\">Dragging out of the container should clear any active drop zones.</h3><p>This was an important fix from the last article. Otherwise drop zones remain active after dragging the item out of the container, even when just dragging over a container.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s2\">\"should clear any active drop zones when the dragged item leaves the container\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">containerElement</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'ul'</span><span class=\"p\">).</span><span class=\"nx\">getDOMNode</span><span class=\"p\">();</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientX</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">=</span> <span class=\"mi\">101</span><span class=\"p\">;</span><span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span> <span class=\"o\">=</span> <span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetLeft</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">=</span> <span class=\"nx\">containerElement</span><span class=\"p\">.</span><span class=\"nx\">offsetWidth</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragLeave</span><span class=\"p\">(</span><span class=\"nx\">containerElement</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">CONTAINER_DROP_ZONE_ACTIVE</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>First, our <code class=\"highlighter-rouge\">container</code> is the React element, not the list element where we attached the <code class=\"highlighter-rouge\">onDragLeave</code> event handler. That means we need to capture the <code class=\"highlighter-rouge\">'ul'</code> element to <code class=\"highlighter-rouge\">containerElement</code>. This is done with <code class=\"highlighter-rouge\">findRenderedDOMComponentWithTag()</code>. So far we have been using the <code class=\"highlighter-rouge\">scry</code> versions of these functions. <code class=\"highlighter-rouge\">scry</code> will find all, <code class=\"highlighter-rouge\">find</code> will find the single instance and throw an error if it is unable.</p><p>Next, we simulate a dragOver event and check that it activated one of the drop zones.</p><p>Then we setup the mouse coordinates and bounding dimensions of the list. We know from the code that these are important, but we also know from the HTML5 spec that they will be provided.</p><p>Finally, we simulate the drag leave and check that the number of active drop zones is now back to zero.</p><h3 id=\"dropping-should-add-the-item-to-the-list\">Dropping should add the item to the list.</h3><p>For our drop testing we will use a new beforeEach setup.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Container</span> <span class=\"nx\">itemTemplate</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">CustomTemplate</span><span class=\"p\">}</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">overItem</span>  <span class=\"o\">=</span> <span class=\"nx\">getDropZone</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span><span class=\"nx\">mockEvent</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">dataTransfer</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">types</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CONTAINER_TYPE</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>This will give us a container, with <code class=\"highlighter-rouge\">overItem</code> pointing to the last dropZone and a basic mockEvent. Then we can test whether dropping adds the item.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'adds dropped items to currently selected drop zone'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s1\">'\"peaches\"'</span><span class=\"p\">;</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">drop</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">([</span><span class=\"s2\">\"peaches\"</span><span class=\"p\">]));</span><span class=\"p\">});</span></code></pre></div><p>First, we add a mock getData function that just returns <code class=\"highlighter-rouge\">\"peaches\"</code>. Then we simulate a drag over to activate a drop zone, and we simulate a drop event to put that data into the container. Finally, we extract the items and see if our new item has been appended to the end.</p><h3 id=\"dropping-should-remove-selected-items-from-the-original-list\">Dropping should remove selected items from the original list.</h3><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'removes selected items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"nx\">getItemFromContainer</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">dropEffect</span> <span class=\"o\">=</span> <span class=\"s2\">\"move\"</span><span class=\"p\">;</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span><span class=\"nx\">mockEvent</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s2\">\"[\"\"</span> <span class=\"o\">+</span> <span class=\"nx\">randomWords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\"\"]\"</span><span class=\"p\">;</span> <span class=\"p\">};</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragStart</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragOver</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">drop</span><span class=\"p\">(</span><span class=\"nx\">overItem</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">dragEnd</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">mockEvent</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithClass</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">,</span> <span class=\"s1\">'customFinder'</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">;</span> <span class=\"p\">});</span><span class=\"c1\">// array where first item is now last</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">randomWords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]));</span><span class=\"p\">});</span></code></pre></div><p>This time we grab the first item in the container. We setup the mockEvent dataTransfer with that item’s information. Then we simulate all of the events that normally happen, including the dragEnd. Then we check that the result is the list with with the first item removed and pinned to the end (<code class=\"highlighter-rouge\">randomWords.slice(1).concat(randomWords[0])</code>).</p><h2 id=\"conclusion\">Conclusion</h2><p>This article should have provided a decent description of testing a complex React component with Jest. We covered basic Jasmine syntax (<code class=\"highlighter-rouge\">describe</code>, <code class=\"highlighter-rouge\">it</code>, <code class=\"highlighter-rouge\">it.only</code>, <code class=\"highlighter-rouge\">expect</code>, <code class=\"highlighter-rouge\">toBe</code>, <code class=\"highlighter-rouge\">toEqual</code>, <code class=\"highlighter-rouge\">toBeCalled</code>, <code class=\"highlighter-rouge\">not</code>, <code class=\"highlighter-rouge\">beforeEach</code>). We covered how to actually run the tests <code class=\"highlighter-rouge\">npm test</code>. We saw quite a few of the React test utilities (<code class=\"highlighter-rouge\">Simulate.[click, dragStart, dragOver, dragLeave, drop, dragEnd]</code>, <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithClass</code>, <code class=\"highlighter-rouge\">scryRenderedDOMComponentsWithTag</code>, <code class=\"highlighter-rouge\">findRenderedDOMComponentWithTag</code>). We covered mocking the event data object, and some of the pain that it causes. And we gave lots of working test code as examples in the process.</p><p>This article also provides a decent starting point for the next article, <a href=\"https://reactjsnews.com/using-tdd-with-reactjs/\">Using Test Driven Development with React.js</a>. In fact, that article was originally part of this article. As the length of this article grew, it was clear it needed to be broken up a bit. On the bright side, that means there is already a draft, so it should be up in the next couple days.</p><h2 id=\"changes\">Changes</h2><p>So, as often happens, the solution to a problem comes to us when doing <em>other</em> things. And, as is often the case, that solution humbles us and makes us feel stupid. This is one such solution.</p><p>Originally, I argued that the <code class=\"highlighter-rouge\">style</code> property was unavailable. This ruined the otherwise beautiful CSS in JS paradigm. I was wrong.</p><p>The <code class=\"highlighter-rouge\">style</code> property is perfectly available via <code class=\"highlighter-rouge\">item.props.style</code>. However, what is not available is the <code class=\"highlighter-rouge\">ObjectMerge</code> module, because we forgot to tell Jest not to auto-mock it. Since it was mocked, it does not actually merge anything. Solution, <code class=\"highlighter-rouge\">jest.dontMock()</code> or move the ObjectMerge.jsxand Object.Assign.js to the <code class=\"highlighter-rouge\">support/</code> directory, which is on the <code class=\"highlighter-rouge\">unmockedModulePathPatterns</code> in package.json.</p><p>I always try to look on the bright side of things, and there is a bright side to this story. My pain and humiliation serves as a <a href=\"http://www.despair.com/mistakes.html\">cautionary tale</a> of the to others. Auto-mocking is great, but it has some gotchas.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Serverside React Rendering: Isomorphic JavaScript with ReactJS + Node",
      "pubDate": "2015-01-01",
      "link": "https://reactjsnews.com/isomorphic-javascript-with-react-node",
      "guid": "https://reactjsnews.com/isomorphic-javascript-with-react-node",
      "author": "",
      "thumbnail": "",
      "description":"<h3 id=\"what-is-isomorphic-javascript-\">What is Isomorphic JavaScript ?</h3><p>Shared JavaScript that runs on both the client &amp; server.</p><h4 id=\"whats-the-point\">What’s the point?</h4><p>JavaScript driven MVCs (angular, ember, backbone, etc.) render on DOM load, this can be really slowwwww &amp; can make for a bad user experience.</p><p>Another major problem is that they aren’t indexable by search engines (without paying $$ for a third party service like <a href=\"https://prerender.io/\">https://prerender.io/</a>). If your app is serving any kind of data that people might be searching for, <strong>this is a bad thing</strong>.</p><p>When you render JavaScript on the server side you can solve these problems and be super cool while doing so!</p><h4 id=\"isomorphic-javascript-benefits\">Isomorphic Javascript Benefits:</h4><ul><li>Better overall user experience</li><li>Search engine indexable</li><li>Easier code maintenance</li><li>Free progressive enhancements</li></ul><p>I’ve built a live example of isomorphic JS for you to check out here: <a href=\"https://github.com/DavidWells/isomorphic-react-example\">https://github.com/DavidWells/isomorphic-react-example</a></p><p>The demo uses the <a href=\"http://dynamictyped.github.io/Griddle/\">griddle react</a> component to show how you can have apps with large data sets indexed by search engines and thus easier to find by potential users in search engines.</p><h3 id=\"tutorial--video\">Tutorial &amp; Video!</h3><iframe width=\"640\" height=\"480\" src=\"//www.youtube.com/embed/8wfY4TGtMUo\" frameborder=\"0\" allowfullscreen=\"\"></iframe><p>In /server.js install the jsx transpiler:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// Make sure to include the JSX transpilerrequire(\"node-jsx\").install();</code></pre></div><p>Then change components to Node friendly syntax where you module.exports the component if it’s in a seperate file</p><p>Also make sure to <code class=\"highlighter-rouge\">React.createFactory</code> your component for it to be rendered server side</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cm\">/** @jsx React.DOM */</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">);</span><span class=\"cm\">/* create factory with griddle component */</span><span class=\"kd\">var</span> <span class=\"nx\">Griddle</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createFactory</span><span class=\"p\">(</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'griddle-react'</span><span class=\"p\">));</span><span class=\"kd\">var</span> <span class=\"nx\">fakeData</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../data/fakeData.js'</span><span class=\"p\">).</span><span class=\"nx\">fakeData</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">columnMeta</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../data/columnMeta.js'</span><span class=\"p\">).</span><span class=\"nx\">columnMeta</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">resultsPerPage</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">ReactApp</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">componentDidMount</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">fakeData</span><span class=\"p\">);</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">\"table-area\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Griddle</span> <span class=\"nx\">results</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">fakeData</span><span class=\"p\">}</span> <span class=\"nx\">columnMetadata</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">columnMeta</span><span class=\"p\">}</span> <span class=\"nx\">resultsPerPage</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">resultsPerPage</span><span class=\"p\">}</span> <span class=\"nx\">tableClassName</span><span class=\"o\">=</span><span class=\"s2\">\"table\"</span><span class=\"o\">/&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>        <span class=\"p\">)</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"cm\">/* Module.exports instead of normal dom mounting */</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">ReactApp</span> <span class=\"o\">=</span> <span class=\"nx\">ReactApp</span><span class=\"p\">;</span><span class=\"cm\">/* Normal mounting happens inside of /main.js and is bundled with browerify */</span></code></pre></div><p>Now the magic happens with routes using <code class=\"highlighter-rouge\">React.renderToString</code> inside /app/routes/coreRoutes.js:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">ReactApp</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createFactory</span><span class=\"p\">(</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../components/ReactApp'</span><span class=\"p\">).</span><span class=\"nx\">ReactApp</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span><span class=\"c1\">// React.renderToString takes your component </span><span class=\"c1\">// and generates the markup</span><span class=\"kd\">var</span> <span class=\"nx\">reactHtml</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">renderToString</span><span class=\"p\">(</span><span class=\"nx\">ReactApp</span><span class=\"p\">({}));</span><span class=\"c1\">// Output html rendered by react</span><span class=\"c1\">// console.log(myAppHtml);</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"s1\">'index.ejs'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">reactOutput</span><span class=\"p\">:</span> <span class=\"nx\">reactHtml</span><span class=\"p\">});</span><span class=\"p\">});</span><span class=\"p\">};</span></code></pre></div><p>The <code class=\"highlighter-rouge\">reactOutput</code> variable is then passed into the template:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!doctype html&gt;</span><span class=\"nt\">&lt;html&gt;</span><span class=\"nt\">&lt;head&gt;</span><span class=\"nt\">&lt;title&gt;</span>React Isomorphic Server Side Rendering Example<span class=\"nt\">&lt;/title&gt;</span><span class=\"nt\">&lt;link</span> <span class=\"na\">href=</span><span class=\"s\">'/styles.css'</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;/head&gt;</span><span class=\"nt\">&lt;body&gt;</span><span class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">\"main-title\"</span><span class=\"nt\">&gt;</span>React Isomorphic Server Side Rendering Example<span class=\"nt\">&lt;/h1&gt;</span><span class=\"c\">&lt;!-- reactOutput is the server compiled React Dom Nodes --&gt;</span><span class=\"c\">&lt;!-- comment out reactOutput to see empty non indexable source in browser --&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"react-main-mount\"</span><span class=\"nt\">&gt;</span><span class=\"err\">&lt;</span>%- reactOutput %&gt;<span class=\"nt\">&lt;/div&gt;</span><span class=\"c\">&lt;!-- comment out main.js to ONLY see server side rendering --&gt;</span><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"/main.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span><span class=\"nt\">&lt;/body&gt;</span><span class=\"nt\">&lt;/html&gt;</span></code></pre></div><h3 id=\"demo-install-instructions\">Demo Install Instructions</h3><p>If you would like to download the code and try it for yourself:</p><ol><li>Clone the repo: <code class=\"highlighter-rouge\">git clone git@github.com:HelloClicky/helloClicky.git</code></li><li>Install packages: <code class=\"highlighter-rouge\">npm install</code></li><li>Launch: <code class=\"highlighter-rouge\">node server.js</code></li><li>Visit in your browser at: <code class=\"highlighter-rouge\">http://localhost:4444</code></li><li>To see serverside rendering, comment out main.js from the /views/index.ejs file. This will show what is rendered purely from the server side.</li></ol><p>Build changes with <code class=\"highlighter-rouge\">gulp</code></p><h3 id=\"other-isomorphic-tutorials--resources\">Other Isomorphic Tutorials &amp; Resources</h3><h5 id=\"server-client-with-react\">Server-Client with React</h5><ul><li><a href=\"http://eflorenzano.com/blog/2014/04/09/react-part-1-getting-started/\">Server/Client With React, Part 1: Getting Started</a></li><li><a href=\"http://eflorenzano.com/blog/2014/04/10/react-part-2-build-system/\">Server/Client With React, Part 2: The Build System</a></li><li><a href=\"http://eflorenzano.com/blog/2014/04/11/react-part-3-frontend-server/\">Server/Client With React, Part 3: Frontend Server</a></li></ul><h5 id=\"server-side-rendering\">Server Side rendering</h5><ul><li><a href=\"http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/\">Server Side Rendering for ReactJS</a></li><li><a href=\"https://github.com/mhart/react-server-example\">React Server Rendering</a></li><li><a href=\"http://augustl.com/blog/2014/jdk8_react_rendering_on_server/\">JDK8 + Facebook React: Rendering single page apps on the server</a></li><li><a href=\"http://www.phpied.com/server-side-react-with-php/\">Server-side React with PHP – part 1</a></li><li><a href=\"http://www.phpied.com/server-side-react-with-php-part-2/\">Server-side React with PHP – part 2</a></li><li><a href=\"http://bensmithett.com/server-rendered-react-components-in-rails/\">Server-rendered React components in Rails</a></li></ul><h3 id=\"new-to-react-check-out-these-tutorials\">New to React? Check out these tutorials</h3><ul><li><a href=\"http://blog.andrewray.me/reactjs-for-stupid-people/\">ReactJS For Stupid People</a></li><li><a href=\"http://blog.andrewray.me/flux-for-stupid-people/\">Flux For Stupid People</a></li></ul>",
      "content":"<h3 id=\"what-is-isomorphic-javascript-\">What is Isomorphic JavaScript ?</h3><p>Shared JavaScript that runs on both the client &amp; server.</p><h4 id=\"whats-the-point\">What’s the point?</h4><p>JavaScript driven MVCs (angular, ember, backbone, etc.) render on DOM load, this can be really slowwwww &amp; can make for a bad user experience.</p><p>Another major problem is that they aren’t indexable by search engines (without paying $$ for a third party service like <a href=\"https://prerender.io/\">https://prerender.io/</a>). If your app is serving any kind of data that people might be searching for, <strong>this is a bad thing</strong>.</p><p>When you render JavaScript on the server side you can solve these problems and be super cool while doing so!</p><h4 id=\"isomorphic-javascript-benefits\">Isomorphic Javascript Benefits:</h4><ul><li>Better overall user experience</li><li>Search engine indexable</li><li>Easier code maintenance</li><li>Free progressive enhancements</li></ul><p>I’ve built a live example of isomorphic JS for you to check out here: <a href=\"https://github.com/DavidWells/isomorphic-react-example\">https://github.com/DavidWells/isomorphic-react-example</a></p><p>The demo uses the <a href=\"http://dynamictyped.github.io/Griddle/\">griddle react</a> component to show how you can have apps with large data sets indexed by search engines and thus easier to find by potential users in search engines.</p><h3 id=\"tutorial--video\">Tutorial &amp; Video!</h3><iframe width=\"640\" height=\"480\" src=\"//www.youtube.com/embed/8wfY4TGtMUo\" frameborder=\"0\" allowfullscreen=\"\"></iframe><p>In /server.js install the jsx transpiler:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// Make sure to include the JSX transpilerrequire(\"node-jsx\").install();</code></pre></div><p>Then change components to Node friendly syntax where you module.exports the component if it’s in a seperate file</p><p>Also make sure to <code class=\"highlighter-rouge\">React.createFactory</code> your component for it to be rendered server side</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cm\">/** @jsx React.DOM */</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">);</span><span class=\"cm\">/* create factory with griddle component */</span><span class=\"kd\">var</span> <span class=\"nx\">Griddle</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createFactory</span><span class=\"p\">(</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'griddle-react'</span><span class=\"p\">));</span><span class=\"kd\">var</span> <span class=\"nx\">fakeData</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../data/fakeData.js'</span><span class=\"p\">).</span><span class=\"nx\">fakeData</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">columnMeta</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../data/columnMeta.js'</span><span class=\"p\">).</span><span class=\"nx\">columnMeta</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">resultsPerPage</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">ReactApp</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">componentDidMount</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">fakeData</span><span class=\"p\">);</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">\"table-area\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Griddle</span> <span class=\"nx\">results</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">fakeData</span><span class=\"p\">}</span> <span class=\"nx\">columnMetadata</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">columnMeta</span><span class=\"p\">}</span> <span class=\"nx\">resultsPerPage</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">resultsPerPage</span><span class=\"p\">}</span> <span class=\"nx\">tableClassName</span><span class=\"o\">=</span><span class=\"s2\">\"table\"</span><span class=\"o\">/&gt;</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>        <span class=\"p\">)</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"cm\">/* Module.exports instead of normal dom mounting */</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">ReactApp</span> <span class=\"o\">=</span> <span class=\"nx\">ReactApp</span><span class=\"p\">;</span><span class=\"cm\">/* Normal mounting happens inside of /main.js and is bundled with browerify */</span></code></pre></div><p>Now the magic happens with routes using <code class=\"highlighter-rouge\">React.renderToString</code> inside /app/routes/coreRoutes.js:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">ReactApp</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createFactory</span><span class=\"p\">(</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../components/ReactApp'</span><span class=\"p\">).</span><span class=\"nx\">ReactApp</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span><span class=\"c1\">// React.renderToString takes your component </span><span class=\"c1\">// and generates the markup</span><span class=\"kd\">var</span> <span class=\"nx\">reactHtml</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">renderToString</span><span class=\"p\">(</span><span class=\"nx\">ReactApp</span><span class=\"p\">({}));</span><span class=\"c1\">// Output html rendered by react</span><span class=\"c1\">// console.log(myAppHtml);</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"s1\">'index.ejs'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">reactOutput</span><span class=\"p\">:</span> <span class=\"nx\">reactHtml</span><span class=\"p\">});</span><span class=\"p\">});</span><span class=\"p\">};</span></code></pre></div><p>The <code class=\"highlighter-rouge\">reactOutput</code> variable is then passed into the template:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!doctype html&gt;</span><span class=\"nt\">&lt;html&gt;</span><span class=\"nt\">&lt;head&gt;</span><span class=\"nt\">&lt;title&gt;</span>React Isomorphic Server Side Rendering Example<span class=\"nt\">&lt;/title&gt;</span><span class=\"nt\">&lt;link</span> <span class=\"na\">href=</span><span class=\"s\">'/styles.css'</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;/head&gt;</span><span class=\"nt\">&lt;body&gt;</span><span class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">\"main-title\"</span><span class=\"nt\">&gt;</span>React Isomorphic Server Side Rendering Example<span class=\"nt\">&lt;/h1&gt;</span><span class=\"c\">&lt;!-- reactOutput is the server compiled React Dom Nodes --&gt;</span><span class=\"c\">&lt;!-- comment out reactOutput to see empty non indexable source in browser --&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"react-main-mount\"</span><span class=\"nt\">&gt;</span><span class=\"err\">&lt;</span>%- reactOutput %&gt;<span class=\"nt\">&lt;/div&gt;</span><span class=\"c\">&lt;!-- comment out main.js to ONLY see server side rendering --&gt;</span><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"/main.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span><span class=\"nt\">&lt;/body&gt;</span><span class=\"nt\">&lt;/html&gt;</span></code></pre></div><h3 id=\"demo-install-instructions\">Demo Install Instructions</h3><p>If you would like to download the code and try it for yourself:</p><ol><li>Clone the repo: <code class=\"highlighter-rouge\">git clone git@github.com:HelloClicky/helloClicky.git</code></li><li>Install packages: <code class=\"highlighter-rouge\">npm install</code></li><li>Launch: <code class=\"highlighter-rouge\">node server.js</code></li><li>Visit in your browser at: <code class=\"highlighter-rouge\">http://localhost:4444</code></li><li>To see serverside rendering, comment out main.js from the /views/index.ejs file. This will show what is rendered purely from the server side.</li></ol><p>Build changes with <code class=\"highlighter-rouge\">gulp</code></p><h3 id=\"other-isomorphic-tutorials--resources\">Other Isomorphic Tutorials &amp; Resources</h3><h5 id=\"server-client-with-react\">Server-Client with React</h5><ul><li><a href=\"http://eflorenzano.com/blog/2014/04/09/react-part-1-getting-started/\">Server/Client With React, Part 1: Getting Started</a></li><li><a href=\"http://eflorenzano.com/blog/2014/04/10/react-part-2-build-system/\">Server/Client With React, Part 2: The Build System</a></li><li><a href=\"http://eflorenzano.com/blog/2014/04/11/react-part-3-frontend-server/\">Server/Client With React, Part 3: Frontend Server</a></li></ul><h5 id=\"server-side-rendering\">Server Side rendering</h5><ul><li><a href=\"http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/\">Server Side Rendering for ReactJS</a></li><li><a href=\"https://github.com/mhart/react-server-example\">React Server Rendering</a></li><li><a href=\"http://augustl.com/blog/2014/jdk8_react_rendering_on_server/\">JDK8 + Facebook React: Rendering single page apps on the server</a></li><li><a href=\"http://www.phpied.com/server-side-react-with-php/\">Server-side React with PHP – part 1</a></li><li><a href=\"http://www.phpied.com/server-side-react-with-php-part-2/\">Server-side React with PHP – part 2</a></li><li><a href=\"http://bensmithett.com/server-rendered-react-components-in-rails/\">Server-rendered React components in Rails</a></li></ul><h3 id=\"new-to-react-check-out-these-tutorials\">New to React? Check out these tutorials</h3><ul><li><a href=\"http://blog.andrewray.me/reactjs-for-stupid-people/\">ReactJS For Stupid People</a></li><li><a href=\"http://blog.andrewray.me/flux-for-stupid-people/\">Flux For Stupid People</a></li></ul>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Complex Drag and Drop Lists using React.js",
      "pubDate": "2014-12-29",
      "link": "https://reactjsnews.com/complex-drag-and-drop-lists-using-react",
      "guid": "https://reactjsnews.com/complex-drag-and-drop-lists-using-react",
      "author": "",
      "thumbnail": "",
      "description":"<p><em>Note: All of the code can be found on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a>.</em></p><p>This article covers creating an HTML5 based drag and drop container that accepts items from compatible containers, has nice animations, and only uses React.js (no Flux based architectures).</p><p>Others have written on drag and drop with React.js. It is worth the time to check out some of them. For example, Daniel at webcloud.se has a great article on creating <a href=\"http://webcloud.se/truly-reactive-sortable-component/\">sortable lists with React</a>. He also created a nice <a href=\"https://github.com/danielstocks/react-sortable/\">react-sortable component</a>. Dan Abramov has an awesome react-dnd library up on github, <a href=\"https://github.com/gaearon/react-dnd\">gaearon/react-dnd</a> with <a href=\"http://gaearon.github.io/react-dnd/#/dustbin-simple\">demo</a>. This library has support for a simple sortable list too.</p><p>However, none of the resources seem to cover the case of independent components that allow internal sorting and dragging items between containers. This is not surprising. Such components are very useful, but also fairly specific.</p><p><em>Note: The article was updated on Friday, January 2, 2015 to fix a bug when using non-text data in <code class=\"highlighter-rouge\">onDragStart</code> and <code class=\"highlighter-rouge\">onDrop</code>.</em></p><h2 id=\"requirements\">Requirements</h2><p>Recently, we needed a list component that would support different item types as well as drag and drop. The component is part of a migration from a legacy system into a newer React based system, so the containers needed to be completely independent of each other and added via react_component Rails helper. For various reasons, a Flux based architecture was rejected (at least temporarily, though that might be something we experiment with in the near future).</p><p>The user experience needs to be similar to the JQueryUI sortable-based widget it is replacing. Items need to be draggable inside the container. Additionally, the original compent had been heavily modified so items were draggable between containers. Dragging should also be highly interactive with smooth animations, making it clear what is happening. As a bonus we wanted to make it easy to add drag and drop support on mobile devices, even though they do not support HTML5 drag and drop.</p><h2 id=\"initial-setup\">Initial Setup</h2><p>For this article we start with the basic React/Rails setup discussed in an earlier article on <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">Setting Up Rails for React and JEST</a>. This gives a good start point on a simple Rails based app. However, The main techniques used should work with any setup and it should be fairly easy extrapolating to other setups from there.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># Poor Mans Forkgit clone https://github.com/HurricaneJames/rex dexcd dexrm -rf .gitgit initgit add .git commit -m \"Rex to Dex\"# Install required packagesbundle installnpm install# Start Rails serverrails s</code></pre></div><p>This setup gives us a view template <code class=\"highlighter-rouge\">app/views/pages/index.html.erb</code> and a route, <code class=\"highlighter-rouge\">/pages/index</code>, to get there. All of our components will go into the <code class=\"highlighter-rouge\">app/assets/javascripts/components/</code> directory. Any global components will be added in <code class=\"highlighter-rouge\">app/assets/javascripts/components.js</code>. If you are unfamiliar with Rails, open a web browser and go to <code class=\"highlighter-rouge\">http://localhost:3000/pages/index</code>. At this point, you should see the Rex Demo Component.</p><h2 id=\"adding-containers-to-our-view\">Adding Containers to Our View</h2><p>In pseudo TDD fashion, we are going to assume that code is already written and work backwards. In our setup we have a <code class=\"highlighter-rouge\">app/views/pages/index.html.erb</code> view template that is rendered for the user. Adding components to this template is straight forward thanks to the react-rails <code class=\"highlighter-rouge\">react_component</code> helper.</p><p>Although not required, let’s change the <code class=\"highlighter-rouge\">&lt;h1&gt;</code> element to something more useful and delete the old demo component. Also, the app title in <code class=\"highlighter-rouge\">app/views/layouts/application.html.erb</code> still says Rex. These are minor annoyances, but easily fixed.</p><p>Normally, the data will come from a controller or a helper. Since this is just a demo/prototype, we are going to add some ugly code to our view.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;%# NEVER PUT LOGIC LIKE THIS IN A VIEWrandom_words = [[\"apple\", \"bannana\", \"watermelon\", \"oranges\", \"ice cream\"],[],[\"alpha\", \"beta\", \"gamma\", \"iota\"],[\"hot dog\", \"mustard\", \"guava\"],[\"chocolate\", \"ice cream\", \"cookies\", \"brownies\"],[\"dog\", \"cat\", \"iguana\", \"leopard\", \"bear\"]]%&gt;&lt;% random_words.each_with_index do |random_word_group, index| %&gt;&lt;h2&gt;Container &lt;%= index + 1 %&gt;&lt;/h2&gt;&lt;%= react_component 'Container', { items: random_word_group } %&gt;&lt;% end %&gt;</code></pre></div><p>This creates an array of arrays, <code class=\"highlighter-rouge\">random_words</code>, representing the data for each of our containers. Then the view loops over those and adds an <code class=\"highlighter-rouge\">&lt;h2&gt;</code> element and the <code class=\"highlighter-rouge\">react_component</code> with the random words as an <code class=\"highlighter-rouge\">items</code> prop.</p><p>Updating the browser shows that the view worked as expected. However, there are no React containers. Opening up the development console shows a big red error. <code class=\"highlighter-rouge\">Uncaught ReferenceError: Container is not defined</code>. This is good news, it means the browser tried to add the containers, it just could not find the code.</p><h2 id=\"simple-container-element\">Simple Container Element</h2><p>Now we can add in a container component. First, add the non-existant Container to our <code class=\"highlighter-rouge\">components.js</code> file, <code class=\"highlighter-rouge\">Container = require('./components/Container');</code>. Then, create the container component, <code class=\"highlighter-rouge\">app/assets/javascripts/components/Container.jsx</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">Container</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span> <span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s2\">\"Container\"</span><span class=\"p\">,</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">ul</span> <span class=\"o\">/&gt;</span> <span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Container</span><span class=\"p\">;</span></code></pre></div><p>Reload the browser and notice that the error went away. Inspecting the DOM shows that React loaded the <code class=\"highlighter-rouge\">&lt;ul&gt;</code> as expected. Next, we will add the items.</p><p>As with all React classes, we will start with props and state.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// in the Container createClass</span><span class=\"nl\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nl\">items</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">.</span><span class=\"nx\">isRequired</span><span class=\"p\">,</span><span class=\"nx\">itemTemplate</span><span class=\"err\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">func</span><span class=\"p\">,</span><span class=\"p\">},</span><span class=\"nx\">getDefaultProps</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[],</span><span class=\"na\">itemTemplate</span><span class=\"p\">:</span> <span class=\"nx\">TextTemplate</span><span class=\"p\">};</span><span class=\"p\">},</span><span class=\"nx\">getInitialState</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span><span class=\"p\">};</span><span class=\"p\">},</span></code></pre></div><p>The Container class will accept two props, <code class=\"highlighter-rouge\">items</code> and <code class=\"highlighter-rouge\">itemTemplate</code>. The <code class=\"highlighter-rouge\">items</code> come from the array we passed in. The <code class=\"highlighter-rouge\">itemTemplate</code> defaults to a <code class=\"highlighter-rouge\">TextTemplate</code> since our <code class=\"highlighter-rouge\">index.html.erb</code> does not provide anything. One of the requirements was that containers be able to support different types of data. Setup like this, each container can support a different view of the data, which is what we needed. If one view per container does not meet the needs of other projects, it is possible to pass in the template as part of the items, or to determine the proper template based on some data in the item.</p><p>The <code class=\"highlighter-rouge\">TextTemplate</code> is just a simple span element. By convention we have specified that all templates accept an <code class=\"highlighter-rouge\">item</code> prop. In this case, that item is just text, so it works perfectly.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/Container.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">TextTemplate</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span> <span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s2\">\"Container-TextTemplate\"</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">.</span><span class=\"nx\">isRequired</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;</span><span class=\"err\">;</span>  <span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>We will also update the <code class=\"highlighter-rouge\">render</code> function to add the new items and template.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">renderListElement</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">key</span><span class=\"p\">}</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">},</span><span class=\"nx\">render</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderListElement</span><span class=\"p\">);</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"container\"</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">container</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Notice the <code class=\"highlighter-rouge\">style={}</code> prop. This is a convention proposed by Christopher “vjeux” Chedeau in his presentation on <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a>. Whether this is a good idea or not is debatable, but it worked well for this demo.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">container</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">maxWidth</span><span class=\"p\">:</span> <span class=\"mi\">550</span><span class=\"p\">,</span><span class=\"na\">background</span><span class=\"p\">:</span> <span class=\"s1\">'#cdc'</span><span class=\"p\">,</span><span class=\"na\">border</span><span class=\"p\">:</span> <span class=\"s1\">'1px solid #777'</span><span class=\"p\">,</span><span class=\"na\">listStyle</span><span class=\"p\">:</span> <span class=\"s1\">'none'</span><span class=\"p\">,</span><span class=\"na\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"na\">padding</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span><span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">backgroundColor</span><span class=\"p\">:</span> <span class=\"s1\">'#df90df'</span><span class=\"p\">,</span><span class=\"na\">margin</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"na\">padding</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><h2 id=\"integrating-html5-drag-events\">Integrating HTML5 Drag Events</h2><p>HTML5 drag and drop is a mess, but a mess that is well supported on modern desktop browsers. There are other libraries that give similar functionality, but they are limited in their own ways. For our project, and thus for this demo, we decided to go with HTML5 drag and drop. The events are not supported in mobile browsers, but libraries like JQuery UI Touch Punch show that it is fairly easy to map touch events to the drag events.</p><p><em>As a side bar, it might be worth checking out <a href=\"http://hammerjs.github.io/\">Hammer.js</a> or <a href=\"https://pornel.net/slip/\">Slip.js</a>. Both add some powerful touch based events that also work with a mouse on the desktop.</em></p><p>HTML5 drag and drop is based on an attribute flag and six events. The attribute flag, <code class=\"highlighter-rouge\">draggable</code> tells the browser that an element is draggable. The six events are dragstart, dragend, dragenter, dragleave, dragover, and drop. React maps those to onDragStart, onDragEnd, onDragEnter, onDragLeave, onDragOver, and onDrop.</p><p>The following code examples come directly from the completed <code class=\"highlighter-rouge\">Container.jsx</code> available on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a> and use the following constants:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>ALLOWED_DROP = \"move\";DRAG_DROP_CONTENT_TYPE = \"custom_container_type\";</code></pre></div><ul><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragstart\"><code class=\"highlighter-rouge\">onDragStart</code></a> is called when a drag event is initiated. The passed in event object has a very important property, <code class=\"highlighter-rouge\">dataTransfer</code>. Unlike most browser events, <code class=\"highlighter-rouge\">dataTransfer</code> must be modified before the end of the function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragStart</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">dataset</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">effectAllowed</span> <span class=\"o\">=</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">;</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">selectedIndex</span><span class=\"p\">]);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"nx\">selectedIndex</span> <span class=\"p\">});</span><span class=\"p\">},</span></code></pre></div><p>Here we set the <code class=\"highlighter-rouge\">dataTransfer.effectAllowed</code> to accept <code class=\"highlighter-rouge\">move</code>. It can be modified to <code class=\"highlighter-rouge\">copy</code>, <code class=\"highlighter-rouge\">copyMove</code>, or several others as required. We also call <code class=\"highlighter-rouge\">dataTransfer.setData</code> with the item we wish to transfer. The data type (<code class=\"highlighter-rouge\">DRAG_DROP_CONTENT_TYPE</code>) is used when checking if a drag event is coming from one of our containers or from something else, for example dragging a file into the browser or a non-compatible element. It will also be used to retrieve the data on a <code class=\"highlighter-rouge\">drop</code> event.</p><p><em>Edit: this works great with text items, but fails miserable with objects. The fix is to use JSON to stringify the data before setting it.</em></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, JSON.stringify(this.state.items[selectedIndex]));</code></pre></div></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragover\"><code class=\"highlighter-rouge\">onDragOver</code></a> is called whenever the user drags anything over an element that is listening for the event. We listen for this event on two elements in our list, drop zones and items.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragOverItem</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">containerAcceptsDropData</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">types</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span> <span class=\"p\">}</span><span class=\"kd\">var</span> <span class=\"nx\">over</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">dataset</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">-</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span> <span class=\"o\">&gt;</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">over</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">over</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">over</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">},</span><span class=\"nx\">onDragOverDropZone</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">containerAcceptsDropData</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">types</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span> <span class=\"p\">}</span><span class=\"kd\">var</span> <span class=\"nx\">dropZoneId</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">dataset</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dropZoneId</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">dropZoneId</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>By default, <code class=\"highlighter-rouge\">onDragOver</code> events will reset the current drag operation to <code class=\"highlighter-rouge\">none</code>, preventing a drop. So the first thing we do is check if we can support any of the dataTransfer types and <code class=\"highlighter-rouge\">preventDefault</code> if we do. Next, by convention, we have added a <code class=\"highlighter-rouge\">data-key</code> attribute to our elements that gives us the index in the item array (<code class=\"highlighter-rouge\">currentTarget.dataset.key</code>). Drop zones then guarante the new key matches the current <code class=\"highlighter-rouge\">hoverOver</code> value.</p><p>Dragging over items is a little more complicated. We would like to intelligently select a drop zone and notify the user when dragging over items. Drop zones are animated to expand when they are selected. It looks better if we expand the drop zone above the item when the pointer is in the top half of the item block and the drop zone below otherwise. By convention, item elements have the same <code class=\"highlighter-rouge\">data-key</code> as the drop zone above them. Therefore, if we are in the bottom half of the item, we bump <code class=\"highlighter-rouge\">over</code> to be the next drop zone and the effect looks good to the user.</p></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragenter\"><code class=\"highlighter-rouge\">onDragEnter</code></a> “is fired when a dragged element or text selection enters a valid drop target.” That is in quotes because it is important. In this case “valid drop target” means the element any element that is listening for <code class=\"highlighter-rouge\">onDragEnter</code>. Note that children of these “valid drop target[s]” also seem to be valid drop targets that will trigger both <code class=\"highlighter-rouge\">onDragEnter</code> and <code class=\"highlighter-rouge\">onDragLeave</code> events, even if we have not attached any listeners. Fortunately, we can ignore <code class=\"highlighter-rouge\">onDragEnter</code> in this demo because we alert the user to drop zones via <code class=\"highlighter-rouge\">onDragOver</code>.</p></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragleave\"><code class=\"highlighter-rouge\">onDragLeave</code></a> is like <code class=\"highlighter-rouge\">onDragEnter</code>, but called on the element that the element was previously over. It also has the same quirk of firing when dragging over children.</p><p>We might be tempted to ignore this one too, but we need it to clean up an ugly user-facing bug. Without <code class=\"highlighter-rouge\">onDragLeave</code>, draging an item from Container 1, over Container 2, and into Container 3 leaves an empty drop zone highlighted in Container 2.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragLeaveContainer</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">clientX</span><span class=\"p\">,</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">clientY</span><span class=\"p\">,</span> <span class=\"nx\">top</span>    <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span><span class=\"p\">,</span> <span class=\"nx\">bottom</span> <span class=\"o\">=</span> <span class=\"nx\">top</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetHeight</span><span class=\"p\">,</span> <span class=\"nx\">left</span>   <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetLeft</span><span class=\"p\">,</span> <span class=\"nx\">right</span>  <span class=\"o\">=</span> <span class=\"nx\">left</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetWidth</span><span class=\"p\">;</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">y</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">top</span> <span class=\"o\">||</span> <span class=\"nx\">y</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">bottom</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">left</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resetHover</span><span class=\"p\">();</span> <span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p><code class=\"highlighter-rouge\">onDragLeaveContainer</code> is added to the container <code class=\"highlighter-rouge\">&lt;ul&gt;</code> component and checks to see if the point was on or outside of the container bounding rectangle. If the pointer is outside the rectangle, we know that the <code class=\"highlighter-rouge\">dragleave</code> event was actually leaving the component and not just entering a child element. When the dragged element leaves the container, we <code class=\"highlighter-rouge\">resetHover</code> which deselected the drop zone.</p></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\"><code class=\"highlighter-rouge\">onDrop</code></a> is called when there was a valid drop event. It is during this event that we add the new element into our list.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDrop</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">data</span>   <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"o\">&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">=</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>First, we grab the data. We already know that <code class=\"highlighter-rouge\">DRAG_DROP_CONTENT_TYPE</code> is supported because we allowed drop with <code class=\"highlighter-rouge\">onDragOver</code>. Then we check that a drop zone is active and splice the dropped data into that section of the array. If the selected drop zone is above the selected item, we bump the selected item pointer so it still points to the originally selected item. If the drop is on a different container, then <code class=\"highlighter-rouge\">selected</code> will be set to <code class=\"highlighter-rouge\">NONE_SELECTED</code> which will be less than <code class=\"highlighter-rouge\">hoverOver</code>. Finally, we reset the drop zone pointer as it is now filled with the new element.</p><p><em>Edit: If the <code class=\"highlighter-rouge\">onDragStart</code> function was updated for objects, then the onDrop will need to deserialize the data.</em></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  var data = JSON.parse(e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE));</code></pre></div></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragend\"><code class=\"highlighter-rouge\">onDragEnd</code></a> is called when the drag operation is over, whether successful or not <em>(see the “Gotchas” section below for an exception to the rule)</em>. It is called on the same element that responded to <code class=\"highlighter-rouge\">onDragStart</code>. It is the very last event called.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragEnd</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">dropEffect</span> <span class=\"o\">===</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">=</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"o\">=</span> <span class=\"nx\">NONE_SELECTED</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">);</span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">sele</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">,</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"nx\">NONE_SELECTED</span> <span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>Here we check if the drop effect was successful, ie. <code class=\"highlighter-rouge\">move</code>. <code class=\"highlighter-rouge\">dropEffect</code> will be set to <code class=\"highlighter-rouge\">none</code> when the drop failed or was cancelled. Assuming the drop was successful, the selected item is spliced out of the item array and discarded. <code class=\"highlighter-rouge\">hoverOver</code> and <code class=\"highlighter-rouge\">selected</code> are reset regardless.</p></li></ul><h2 id=\"binding-the-handlers\">Binding The Handlers</h2><p>Now that the event handlers are in place we should start using them. First, we need to add some additional items to <code class=\"highlighter-rouge\">getInitialState</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>selected:  NONE_SELECTED,hoverOver: NO_HOVER</code></pre></div><p>Then we need to add the <code class=\"highlighter-rouge\">containerAcceptsDropData</code> and <code class=\"highlighter-rouge\">resetHover</code> functions referenced in the handlers.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">containerAcceptsDropData</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">transferTypes</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">transferTypes</span><span class=\"p\">,</span> <span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"p\">},</span><span class=\"nx\">resetHover</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>Finally, we need to update our render function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">render</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderListElements</span><span class=\"p\">();</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"container\"</span><span class=\"nx\">onDrop</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDrop</span><span class=\"p\">}</span><span class=\"nx\">onDragLeave</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragLeaveContainer</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">container</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Render still has responsibility for rendering the list, but now it also listens for <code class=\"highlighter-rouge\">onDrop</code> and <code class=\"highlighter-rouge\">onDragLeave</code> events. Previously, items used the common <code class=\"highlighter-rouge\">items.map</code>. Now, this is extracted to a <code class=\"highlighter-rouge\">renderListElement</code> function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">renderListElements</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"o\">=</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderDropZone</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">));</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderListElement</span><span class=\"p\">(</span><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">itemTemplate</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"p\">}),</span> <span class=\"nx\">i</span><span class=\"p\">));</span><span class=\"p\">}</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderDropZone</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">));</span><span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span><span class=\"p\">},</span></code></pre></div><p>Instead of adding a single <code class=\"highlighter-rouge\">&lt;li&gt;</code> element for each item, we are adding drop zone elements between all items. We also use also create a template for each of the data items and pass that template off to <code class=\"highlighter-rouge\">renderListElement</code>. Outside of this demo, it would probably be better to maintain a cache of itemTemplates instead of recreating them on every render. Fortunately, React’s virtual DOM keeps the performance snappy anyway.</p><p>The actual <code class=\"highlighter-rouge\">&lt;li&gt;</code> is injected by two render functions, <code class=\"highlighter-rouge\">renderListElement</code> and <code class=\"highlighter-rouge\">renderDropZone</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">renderListElement</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">key</span><span class=\"p\">}</span><span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">key</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"o\">===</span><span class=\"nx\">key</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">selectedItem</span> <span class=\"p\">)}</span><span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onClick</span><span class=\"p\">}</span><span class=\"nx\">draggable</span>  <span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span><span class=\"nx\">onDragOver</span> <span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragOverItem</span><span class=\"p\">}</span><span class=\"nx\">onDragStart</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragStart</span><span class=\"p\">}</span><span class=\"nx\">onDragEnd</span>  <span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragEnd</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">},</span><span class=\"nx\">renderDropZone</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"dropzone-\"</span> <span class=\"o\">+</span> <span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">dropZone</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">===</span> <span class=\"nx\">index</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">activeDropZone</span><span class=\"p\">)}</span><span class=\"nx\">onDragOver</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragOverDropZone</span><span class=\"p\">}</span><span class=\"o\">&gt;&lt;</span><span class=\"sr\">/li&gt;</span><span class=\"err\">;</span><span class=\"p\">},</span></code></pre></div><p>Both functions return a <code class=\"highlighter-rouge\">&lt;li&gt;</code> component that has an appropriate <code class=\"highlighter-rouge\">key</code> for React. The component also stores that key in <code class=\"highlighter-rouge\">data-key</code> for easy access in the handlers. We use the style object mentioned above and added a <code class=\"highlighter-rouge\">merge</code> function to add in style properties for selected items and active drop zones.</p><p>List elements are marked as <code class=\"highlighter-rouge\">draggable</code> and listen for <code class=\"highlighter-rouge\">onDragOver</code>, <code class=\"highlighter-rouge\">onDragStart</code>, and <code class=\"highlighter-rouge\">onDragEnd</code> events. Drop zones are not draggable, but they do listen for <code class=\"highlighter-rouge\">onDragOver</code> events so that we can tell the browser the zone is a valid drop target (and highlight the drop zone if it is hidden for some reason).</p><p>The merge function is taken almost directly from the <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a> presentation. However, that presentation uses ES6 Object.assign, which currently only works with Firefox. So we modified it a bit.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">merge</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"p\">{};</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span><span class=\"nx\">objectAssign</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"kd\">function</span> <span class=\"nx\">ToObject</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">'Object.assign cannot be called with null or undefined'</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"kd\">var</span> <span class=\"nx\">objectAssign</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span> <span class=\"o\">||</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">source</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">from</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">keys</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">to</span> <span class=\"o\">=</span> <span class=\"nx\">ToObject</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">s</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">s</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">from</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">s</span><span class=\"p\">];</span><span class=\"nx\">keys</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">from</span><span class=\"p\">));</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">keys</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">to</span><span class=\"p\">[</span><span class=\"nx\">keys</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nx\">from</span><span class=\"p\">[</span><span class=\"nx\">keys</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]];</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"nx\">to</span><span class=\"p\">;</span><span class=\"p\">};</span></code></pre></div><p>The ObjectAssign code was adapted from Sindre Sorhus’s <a href=\"https://github.com/sindresorhus/object-assign\">object-assign</a> code.</p><h2 id=\"user-notification\">User Notification</h2><p>At this point we can drag around items, but it is a little jarring. Stuff appears and disappears rapidly. We can make it better. In a nod to the simplicity of the architecture, the fix only requires modifications to the styles object.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>selectedItem: {backgroundColor: '#333'},dropZone: {height: 2,backgroundColor: 'transparent',transition: 'height 400ms'},activeDropZone: {height: 15,background: '#fff',transition: 'height 150ms'}</code></pre></div><p>The transition properties make the drop zones expand/collapse gracefully. The background colors make it obvoius what is selected and what is a drop zone.</p><p>Finally, we have a nice component that can be used as a basis for more custom components that fit specific project needs.</p><h2 id=\"other-html-5-drag-and-drop-gotchas\">Other HTML 5 Drag and Drop Gotchas</h2><p>HTML5 Drag and Drop has a couple of “gotchas” that should be avoided.</p><ul><li><p>Dragend is not fired if element is moved. This is marked as a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=460801\">bug</a> in Firefox, but Chrome does not fire the event either. Also, the drop animation looks like a cancellation. This was a bug that came up when trying to expand Daniel’s <a href=\"http://webcloud.se/truly-reactive-sortable-component/\">Truly Reactive Sortable Component</a> in earlier tests. We handle it by not moving or removing the selected elements. In the “User Notification” section we highlight selected items in a dark grey color. It would be fairly easy to set the position to absolute and the top/left properties to be far off screen.</p></li><li><p>WebKit does not trigger CSS <code class=\"highlighter-rouge\">:hover</code> when dragging. This “gotcha” is only verified on MacOSX, but that was enough to change directions when it cropped up. This comes up when trying to use <code class=\"highlighter-rouge\">:hover</code> to animate the drop zones, which was the obvious first attempt. Though it worked out well because the final version animates better based on hovering over items too.</p></li></ul><h1 id=\"conclusion\">Conclusion</h1><p>This article describes how to create a very specific sortable/exchangable list component. It is useful for a page with multiple containers of items, each with their own way of rendering data. It does not use any kind of Flux architecture or other means of communicating between containers, making each component very independent. Suggestions on how to expand were offered along the way. Hopefully, it has been useful. Comments, as always, are welcome.</p><p><em>All of the code can be found on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a>.</em></p>",
      "content":"<p><em>Note: All of the code can be found on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a>.</em></p><p>This article covers creating an HTML5 based drag and drop container that accepts items from compatible containers, has nice animations, and only uses React.js (no Flux based architectures).</p><p>Others have written on drag and drop with React.js. It is worth the time to check out some of them. For example, Daniel at webcloud.se has a great article on creating <a href=\"http://webcloud.se/truly-reactive-sortable-component/\">sortable lists with React</a>. He also created a nice <a href=\"https://github.com/danielstocks/react-sortable/\">react-sortable component</a>. Dan Abramov has an awesome react-dnd library up on github, <a href=\"https://github.com/gaearon/react-dnd\">gaearon/react-dnd</a> with <a href=\"http://gaearon.github.io/react-dnd/#/dustbin-simple\">demo</a>. This library has support for a simple sortable list too.</p><p>However, none of the resources seem to cover the case of independent components that allow internal sorting and dragging items between containers. This is not surprising. Such components are very useful, but also fairly specific.</p><p><em>Note: The article was updated on Friday, January 2, 2015 to fix a bug when using non-text data in <code class=\"highlighter-rouge\">onDragStart</code> and <code class=\"highlighter-rouge\">onDrop</code>.</em></p><h2 id=\"requirements\">Requirements</h2><p>Recently, we needed a list component that would support different item types as well as drag and drop. The component is part of a migration from a legacy system into a newer React based system, so the containers needed to be completely independent of each other and added via react_component Rails helper. For various reasons, a Flux based architecture was rejected (at least temporarily, though that might be something we experiment with in the near future).</p><p>The user experience needs to be similar to the JQueryUI sortable-based widget it is replacing. Items need to be draggable inside the container. Additionally, the original compent had been heavily modified so items were draggable between containers. Dragging should also be highly interactive with smooth animations, making it clear what is happening. As a bonus we wanted to make it easy to add drag and drop support on mobile devices, even though they do not support HTML5 drag and drop.</p><h2 id=\"initial-setup\">Initial Setup</h2><p>For this article we start with the basic React/Rails setup discussed in an earlier article on <a href=\"https://reactjsnews.com/setting-up-rails-for-react-and-jest/\">Setting Up Rails for React and JEST</a>. This gives a good start point on a simple Rails based app. However, The main techniques used should work with any setup and it should be fairly easy extrapolating to other setups from there.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># Poor Mans Forkgit clone https://github.com/HurricaneJames/rex dexcd dexrm -rf .gitgit initgit add .git commit -m \"Rex to Dex\"# Install required packagesbundle installnpm install# Start Rails serverrails s</code></pre></div><p>This setup gives us a view template <code class=\"highlighter-rouge\">app/views/pages/index.html.erb</code> and a route, <code class=\"highlighter-rouge\">/pages/index</code>, to get there. All of our components will go into the <code class=\"highlighter-rouge\">app/assets/javascripts/components/</code> directory. Any global components will be added in <code class=\"highlighter-rouge\">app/assets/javascripts/components.js</code>. If you are unfamiliar with Rails, open a web browser and go to <code class=\"highlighter-rouge\">http://localhost:3000/pages/index</code>. At this point, you should see the Rex Demo Component.</p><h2 id=\"adding-containers-to-our-view\">Adding Containers to Our View</h2><p>In pseudo TDD fashion, we are going to assume that code is already written and work backwards. In our setup we have a <code class=\"highlighter-rouge\">app/views/pages/index.html.erb</code> view template that is rendered for the user. Adding components to this template is straight forward thanks to the react-rails <code class=\"highlighter-rouge\">react_component</code> helper.</p><p>Although not required, let’s change the <code class=\"highlighter-rouge\">&lt;h1&gt;</code> element to something more useful and delete the old demo component. Also, the app title in <code class=\"highlighter-rouge\">app/views/layouts/application.html.erb</code> still says Rex. These are minor annoyances, but easily fixed.</p><p>Normally, the data will come from a controller or a helper. Since this is just a demo/prototype, we are going to add some ugly code to our view.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;%# NEVER PUT LOGIC LIKE THIS IN A VIEWrandom_words = [[\"apple\", \"bannana\", \"watermelon\", \"oranges\", \"ice cream\"],[],[\"alpha\", \"beta\", \"gamma\", \"iota\"],[\"hot dog\", \"mustard\", \"guava\"],[\"chocolate\", \"ice cream\", \"cookies\", \"brownies\"],[\"dog\", \"cat\", \"iguana\", \"leopard\", \"bear\"]]%&gt;&lt;% random_words.each_with_index do |random_word_group, index| %&gt;&lt;h2&gt;Container &lt;%= index + 1 %&gt;&lt;/h2&gt;&lt;%= react_component 'Container', { items: random_word_group } %&gt;&lt;% end %&gt;</code></pre></div><p>This creates an array of arrays, <code class=\"highlighter-rouge\">random_words</code>, representing the data for each of our containers. Then the view loops over those and adds an <code class=\"highlighter-rouge\">&lt;h2&gt;</code> element and the <code class=\"highlighter-rouge\">react_component</code> with the random words as an <code class=\"highlighter-rouge\">items</code> prop.</p><p>Updating the browser shows that the view worked as expected. However, there are no React containers. Opening up the development console shows a big red error. <code class=\"highlighter-rouge\">Uncaught ReferenceError: Container is not defined</code>. This is good news, it means the browser tried to add the containers, it just could not find the code.</p><h2 id=\"simple-container-element\">Simple Container Element</h2><p>Now we can add in a container component. First, add the non-existant Container to our <code class=\"highlighter-rouge\">components.js</code> file, <code class=\"highlighter-rouge\">Container = require('./components/Container');</code>. Then, create the container component, <code class=\"highlighter-rouge\">app/assets/javascripts/components/Container.jsx</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">Container</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span> <span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s2\">\"Container\"</span><span class=\"p\">,</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">ul</span> <span class=\"o\">/&gt;</span> <span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Container</span><span class=\"p\">;</span></code></pre></div><p>Reload the browser and notice that the error went away. Inspecting the DOM shows that React loaded the <code class=\"highlighter-rouge\">&lt;ul&gt;</code> as expected. Next, we will add the items.</p><p>As with all React classes, we will start with props and state.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// in the Container createClass</span><span class=\"nl\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nl\">items</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">.</span><span class=\"nx\">isRequired</span><span class=\"p\">,</span><span class=\"nx\">itemTemplate</span><span class=\"err\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">func</span><span class=\"p\">,</span><span class=\"p\">},</span><span class=\"nx\">getDefaultProps</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[],</span><span class=\"na\">itemTemplate</span><span class=\"p\">:</span> <span class=\"nx\">TextTemplate</span><span class=\"p\">};</span><span class=\"p\">},</span><span class=\"nx\">getInitialState</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">,</span><span class=\"p\">};</span><span class=\"p\">},</span></code></pre></div><p>The Container class will accept two props, <code class=\"highlighter-rouge\">items</code> and <code class=\"highlighter-rouge\">itemTemplate</code>. The <code class=\"highlighter-rouge\">items</code> come from the array we passed in. The <code class=\"highlighter-rouge\">itemTemplate</code> defaults to a <code class=\"highlighter-rouge\">TextTemplate</code> since our <code class=\"highlighter-rouge\">index.html.erb</code> does not provide anything. One of the requirements was that containers be able to support different types of data. Setup like this, each container can support a different view of the data, which is what we needed. If one view per container does not meet the needs of other projects, it is possible to pass in the template as part of the items, or to determine the proper template based on some data in the item.</p><p>The <code class=\"highlighter-rouge\">TextTemplate</code> is just a simple span element. By convention we have specified that all templates accept an <code class=\"highlighter-rouge\">item</code> prop. In this case, that item is just text, so it works perfectly.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// app/assets/javascripts/components/Container.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">TextTemplate</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span> <span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s2\">\"Container-TextTemplate\"</span><span class=\"p\">,</span><span class=\"na\">propTypes</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">.</span><span class=\"nx\">isRequired</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;</span><span class=\"err\">;</span>  <span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>We will also update the <code class=\"highlighter-rouge\">render</code> function to add the new items and template.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">renderListElement</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">key</span><span class=\"p\">}</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">},</span><span class=\"nx\">render</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderListElement</span><span class=\"p\">);</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"container\"</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">container</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Notice the <code class=\"highlighter-rouge\">style={}</code> prop. This is a convention proposed by Christopher “vjeux” Chedeau in his presentation on <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a>. Whether this is a good idea or not is debatable, but it worked well for this demo.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">container</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">maxWidth</span><span class=\"p\">:</span> <span class=\"mi\">550</span><span class=\"p\">,</span><span class=\"na\">background</span><span class=\"p\">:</span> <span class=\"s1\">'#cdc'</span><span class=\"p\">,</span><span class=\"na\">border</span><span class=\"p\">:</span> <span class=\"s1\">'1px solid #777'</span><span class=\"p\">,</span><span class=\"na\">listStyle</span><span class=\"p\">:</span> <span class=\"s1\">'none'</span><span class=\"p\">,</span><span class=\"na\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"na\">padding</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span><span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">backgroundColor</span><span class=\"p\">:</span> <span class=\"s1\">'#df90df'</span><span class=\"p\">,</span><span class=\"na\">margin</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"na\">padding</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><h2 id=\"integrating-html5-drag-events\">Integrating HTML5 Drag Events</h2><p>HTML5 drag and drop is a mess, but a mess that is well supported on modern desktop browsers. There are other libraries that give similar functionality, but they are limited in their own ways. For our project, and thus for this demo, we decided to go with HTML5 drag and drop. The events are not supported in mobile browsers, but libraries like JQuery UI Touch Punch show that it is fairly easy to map touch events to the drag events.</p><p><em>As a side bar, it might be worth checking out <a href=\"http://hammerjs.github.io/\">Hammer.js</a> or <a href=\"https://pornel.net/slip/\">Slip.js</a>. Both add some powerful touch based events that also work with a mouse on the desktop.</em></p><p>HTML5 drag and drop is based on an attribute flag and six events. The attribute flag, <code class=\"highlighter-rouge\">draggable</code> tells the browser that an element is draggable. The six events are dragstart, dragend, dragenter, dragleave, dragover, and drop. React maps those to onDragStart, onDragEnd, onDragEnter, onDragLeave, onDragOver, and onDrop.</p><p>The following code examples come directly from the completed <code class=\"highlighter-rouge\">Container.jsx</code> available on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a> and use the following constants:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>ALLOWED_DROP = \"move\";DRAG_DROP_CONTENT_TYPE = \"custom_container_type\";</code></pre></div><ul><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragstart\"><code class=\"highlighter-rouge\">onDragStart</code></a> is called when a drag event is initiated. The passed in event object has a very important property, <code class=\"highlighter-rouge\">dataTransfer</code>. Unlike most browser events, <code class=\"highlighter-rouge\">dataTransfer</code> must be modified before the end of the function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragStart</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">dataset</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">effectAllowed</span> <span class=\"o\">=</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">;</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">selectedIndex</span><span class=\"p\">]);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"nx\">selectedIndex</span> <span class=\"p\">});</span><span class=\"p\">},</span></code></pre></div><p>Here we set the <code class=\"highlighter-rouge\">dataTransfer.effectAllowed</code> to accept <code class=\"highlighter-rouge\">move</code>. It can be modified to <code class=\"highlighter-rouge\">copy</code>, <code class=\"highlighter-rouge\">copyMove</code>, or several others as required. We also call <code class=\"highlighter-rouge\">dataTransfer.setData</code> with the item we wish to transfer. The data type (<code class=\"highlighter-rouge\">DRAG_DROP_CONTENT_TYPE</code>) is used when checking if a drag event is coming from one of our containers or from something else, for example dragging a file into the browser or a non-compatible element. It will also be used to retrieve the data on a <code class=\"highlighter-rouge\">drop</code> event.</p><p><em>Edit: this works great with text items, but fails miserable with objects. The fix is to use JSON to stringify the data before setting it.</em></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  e.dataTransfer.setData(DRAG_DROP_CONTENT_TYPE, JSON.stringify(this.state.items[selectedIndex]));</code></pre></div></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragover\"><code class=\"highlighter-rouge\">onDragOver</code></a> is called whenever the user drags anything over an element that is listening for the event. We listen for this event on two elements in our list, drop zones and items.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragOverItem</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">containerAcceptsDropData</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">types</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span> <span class=\"p\">}</span><span class=\"kd\">var</span> <span class=\"nx\">over</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">dataset</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">clientY</span> <span class=\"o\">-</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span> <span class=\"o\">&gt;</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">over</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">over</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">over</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">},</span><span class=\"nx\">onDragOverDropZone</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">containerAcceptsDropData</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">types</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span> <span class=\"p\">}</span><span class=\"kd\">var</span> <span class=\"nx\">dropZoneId</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">dataset</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dropZoneId</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">dropZoneId</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>By default, <code class=\"highlighter-rouge\">onDragOver</code> events will reset the current drag operation to <code class=\"highlighter-rouge\">none</code>, preventing a drop. So the first thing we do is check if we can support any of the dataTransfer types and <code class=\"highlighter-rouge\">preventDefault</code> if we do. Next, by convention, we have added a <code class=\"highlighter-rouge\">data-key</code> attribute to our elements that gives us the index in the item array (<code class=\"highlighter-rouge\">currentTarget.dataset.key</code>). Drop zones then guarante the new key matches the current <code class=\"highlighter-rouge\">hoverOver</code> value.</p><p>Dragging over items is a little more complicated. We would like to intelligently select a drop zone and notify the user when dragging over items. Drop zones are animated to expand when they are selected. It looks better if we expand the drop zone above the item when the pointer is in the top half of the item block and the drop zone below otherwise. By convention, item elements have the same <code class=\"highlighter-rouge\">data-key</code> as the drop zone above them. Therefore, if we are in the bottom half of the item, we bump <code class=\"highlighter-rouge\">over</code> to be the next drop zone and the effect looks good to the user.</p></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragenter\"><code class=\"highlighter-rouge\">onDragEnter</code></a> “is fired when a dragged element or text selection enters a valid drop target.” That is in quotes because it is important. In this case “valid drop target” means the element any element that is listening for <code class=\"highlighter-rouge\">onDragEnter</code>. Note that children of these “valid drop target[s]” also seem to be valid drop targets that will trigger both <code class=\"highlighter-rouge\">onDragEnter</code> and <code class=\"highlighter-rouge\">onDragLeave</code> events, even if we have not attached any listeners. Fortunately, we can ignore <code class=\"highlighter-rouge\">onDragEnter</code> in this demo because we alert the user to drop zones via <code class=\"highlighter-rouge\">onDragOver</code>.</p></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragleave\"><code class=\"highlighter-rouge\">onDragLeave</code></a> is like <code class=\"highlighter-rouge\">onDragEnter</code>, but called on the element that the element was previously over. It also has the same quirk of firing when dragging over children.</p><p>We might be tempted to ignore this one too, but we need it to clean up an ugly user-facing bug. Without <code class=\"highlighter-rouge\">onDragLeave</code>, draging an item from Container 1, over Container 2, and into Container 3 leaves an empty drop zone highlighted in Container 2.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragLeaveContainer</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">clientX</span><span class=\"p\">,</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">clientY</span><span class=\"p\">,</span> <span class=\"nx\">top</span>    <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetTop</span><span class=\"p\">,</span> <span class=\"nx\">bottom</span> <span class=\"o\">=</span> <span class=\"nx\">top</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetHeight</span><span class=\"p\">,</span> <span class=\"nx\">left</span>   <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetLeft</span><span class=\"p\">,</span> <span class=\"nx\">right</span>  <span class=\"o\">=</span> <span class=\"nx\">left</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">offsetWidth</span><span class=\"p\">;</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">y</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">top</span> <span class=\"o\">||</span> <span class=\"nx\">y</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">bottom</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">left</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resetHover</span><span class=\"p\">();</span> <span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p><code class=\"highlighter-rouge\">onDragLeaveContainer</code> is added to the container <code class=\"highlighter-rouge\">&lt;ul&gt;</code> component and checks to see if the point was on or outside of the container bounding rectangle. If the pointer is outside the rectangle, we know that the <code class=\"highlighter-rouge\">dragleave</code> event was actually leaving the component and not just entering a child element. When the dragged element leaves the container, we <code class=\"highlighter-rouge\">resetHover</code> which deselected the drop zone.</p></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\"><code class=\"highlighter-rouge\">onDrop</code></a> is called when there was a valid drop event. It is during this event that we add the new element into our list.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDrop</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">data</span>   <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">getData</span><span class=\"p\">(</span><span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">);</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"o\">&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">=</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>First, we grab the data. We already know that <code class=\"highlighter-rouge\">DRAG_DROP_CONTENT_TYPE</code> is supported because we allowed drop with <code class=\"highlighter-rouge\">onDragOver</code>. Then we check that a drop zone is active and splice the dropped data into that section of the array. If the selected drop zone is above the selected item, we bump the selected item pointer so it still points to the originally selected item. If the drop is on a different container, then <code class=\"highlighter-rouge\">selected</code> will be set to <code class=\"highlighter-rouge\">NONE_SELECTED</code> which will be less than <code class=\"highlighter-rouge\">hoverOver</code>. Finally, we reset the drop zone pointer as it is now filled with the new element.</p><p><em>Edit: If the <code class=\"highlighter-rouge\">onDragStart</code> function was updated for objects, then the onDrop will need to deserialize the data.</em></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  var data = JSON.parse(e.dataTransfer.getData(DRAG_DROP_CONTENT_TYPE));</code></pre></div></li><li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dragend\"><code class=\"highlighter-rouge\">onDragEnd</code></a> is called when the drag operation is over, whether successful or not <em>(see the “Gotchas” section below for an exception to the rule)</em>. It is called on the same element that responded to <code class=\"highlighter-rouge\">onDragStart</code>. It is the very last event called.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">onDragEnd</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">dataTransfer</span><span class=\"p\">.</span><span class=\"nx\">dropEffect</span> <span class=\"o\">===</span> <span class=\"nx\">ALLOWED_DROP_EFFECT</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">=</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span> <span class=\"o\">=</span> <span class=\"nx\">NONE_SELECTED</span><span class=\"p\">;</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">);</span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">sele</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">,</span> <span class=\"na\">selected</span><span class=\"p\">:</span> <span class=\"nx\">NONE_SELECTED</span> <span class=\"p\">});</span><span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>Here we check if the drop effect was successful, ie. <code class=\"highlighter-rouge\">move</code>. <code class=\"highlighter-rouge\">dropEffect</code> will be set to <code class=\"highlighter-rouge\">none</code> when the drop failed or was cancelled. Assuming the drop was successful, the selected item is spliced out of the item array and discarded. <code class=\"highlighter-rouge\">hoverOver</code> and <code class=\"highlighter-rouge\">selected</code> are reset regardless.</p></li></ul><h2 id=\"binding-the-handlers\">Binding The Handlers</h2><p>Now that the event handlers are in place we should start using them. First, we need to add some additional items to <code class=\"highlighter-rouge\">getInitialState</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>selected:  NONE_SELECTED,hoverOver: NO_HOVER</code></pre></div><p>Then we need to add the <code class=\"highlighter-rouge\">containerAcceptsDropData</code> and <code class=\"highlighter-rouge\">resetHover</code> functions referenced in the handlers.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">containerAcceptsDropData</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">transferTypes</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">transferTypes</span><span class=\"p\">,</span> <span class=\"nx\">DRAG_DROP_CONTENT_TYPE</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"p\">},</span><span class=\"nx\">resetHover</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">!==</span> <span class=\"nx\">NO_HOVER</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">hoverOver</span><span class=\"p\">:</span> <span class=\"nx\">NO_HOVER</span> <span class=\"p\">});</span> <span class=\"p\">}</span><span class=\"p\">},</span></code></pre></div><p>Finally, we need to update our render function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">render</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderListElements</span><span class=\"p\">();</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span> <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"s2\">\"container\"</span><span class=\"nx\">onDrop</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDrop</span><span class=\"p\">}</span><span class=\"nx\">onDragLeave</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragLeaveContainer</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">container</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><p>Render still has responsibility for rendering the list, but now it also listens for <code class=\"highlighter-rouge\">onDrop</code> and <code class=\"highlighter-rouge\">onDragLeave</code> events. Previously, items used the common <code class=\"highlighter-rouge\">items.map</code>. Now, this is extracted to a <code class=\"highlighter-rouge\">renderListElement</code> function.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">renderListElements</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"o\">=</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderDropZone</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">));</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderListElement</span><span class=\"p\">(</span><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">itemTemplate</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"p\">}),</span> <span class=\"nx\">i</span><span class=\"p\">));</span><span class=\"p\">}</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderDropZone</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">));</span><span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span><span class=\"p\">},</span></code></pre></div><p>Instead of adding a single <code class=\"highlighter-rouge\">&lt;li&gt;</code> element for each item, we are adding drop zone elements between all items. We also use also create a template for each of the data items and pass that template off to <code class=\"highlighter-rouge\">renderListElement</code>. Outside of this demo, it would probably be better to maintain a cache of itemTemplates instead of recreating them on every render. Fortunately, React’s virtual DOM keeps the performance snappy anyway.</p><p>The actual <code class=\"highlighter-rouge\">&lt;li&gt;</code> is injected by two render functions, <code class=\"highlighter-rouge\">renderListElement</code> and <code class=\"highlighter-rouge\">renderDropZone</code>.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">renderListElement</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">key</span><span class=\"p\">}</span><span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">key</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selected</span><span class=\"o\">===</span><span class=\"nx\">key</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">selectedItem</span> <span class=\"p\">)}</span><span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onClick</span><span class=\"p\">}</span><span class=\"nx\">draggable</span>  <span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span><span class=\"nx\">onDragOver</span> <span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragOverItem</span><span class=\"p\">}</span><span class=\"nx\">onDragStart</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragStart</span><span class=\"p\">}</span><span class=\"nx\">onDragEnd</span>  <span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragEnd</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"p\">},</span><span class=\"nx\">renderDropZone</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"dropzone-\"</span> <span class=\"o\">+</span> <span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">dropZone</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">hoverOver</span> <span class=\"o\">===</span> <span class=\"nx\">index</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">activeDropZone</span><span class=\"p\">)}</span><span class=\"nx\">onDragOver</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onDragOverDropZone</span><span class=\"p\">}</span><span class=\"o\">&gt;&lt;</span><span class=\"sr\">/li&gt;</span><span class=\"err\">;</span><span class=\"p\">},</span></code></pre></div><p>Both functions return a <code class=\"highlighter-rouge\">&lt;li&gt;</code> component that has an appropriate <code class=\"highlighter-rouge\">key</code> for React. The component also stores that key in <code class=\"highlighter-rouge\">data-key</code> for easy access in the handlers. We use the style object mentioned above and added a <code class=\"highlighter-rouge\">merge</code> function to add in style properties for selected items and active drop zones.</p><p>List elements are marked as <code class=\"highlighter-rouge\">draggable</code> and listen for <code class=\"highlighter-rouge\">onDragOver</code>, <code class=\"highlighter-rouge\">onDragStart</code>, and <code class=\"highlighter-rouge\">onDragEnd</code> events. Drop zones are not draggable, but they do listen for <code class=\"highlighter-rouge\">onDragOver</code> events so that we can tell the browser the zone is a valid drop target (and highlight the drop zone if it is hidden for some reason).</p><p>The merge function is taken almost directly from the <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS</a> presentation. However, that presentation uses ES6 Object.assign, which currently only works with Firefox. So we modified it a bit.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">merge</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"p\">{};</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span><span class=\"nx\">objectAssign</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"kd\">function</span> <span class=\"nx\">ToObject</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">'Object.assign cannot be called with null or undefined'</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"kd\">var</span> <span class=\"nx\">objectAssign</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span> <span class=\"o\">||</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">source</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">from</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">keys</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">to</span> <span class=\"o\">=</span> <span class=\"nx\">ToObject</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">s</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">s</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">from</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">s</span><span class=\"p\">];</span><span class=\"nx\">keys</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">from</span><span class=\"p\">));</span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">keys</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">to</span><span class=\"p\">[</span><span class=\"nx\">keys</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nx\">from</span><span class=\"p\">[</span><span class=\"nx\">keys</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]];</span><span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">return</span> <span class=\"nx\">to</span><span class=\"p\">;</span><span class=\"p\">};</span></code></pre></div><p>The ObjectAssign code was adapted from Sindre Sorhus’s <a href=\"https://github.com/sindresorhus/object-assign\">object-assign</a> code.</p><h2 id=\"user-notification\">User Notification</h2><p>At this point we can drag around items, but it is a little jarring. Stuff appears and disappears rapidly. We can make it better. In a nod to the simplicity of the architecture, the fix only requires modifications to the styles object.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>selectedItem: {backgroundColor: '#333'},dropZone: {height: 2,backgroundColor: 'transparent',transition: 'height 400ms'},activeDropZone: {height: 15,background: '#fff',transition: 'height 150ms'}</code></pre></div><p>The transition properties make the drop zones expand/collapse gracefully. The background colors make it obvoius what is selected and what is a drop zone.</p><p>Finally, we have a nice component that can be used as a basis for more custom components that fit specific project needs.</p><h2 id=\"other-html-5-drag-and-drop-gotchas\">Other HTML 5 Drag and Drop Gotchas</h2><p>HTML5 Drag and Drop has a couple of “gotchas” that should be avoided.</p><ul><li><p>Dragend is not fired if element is moved. This is marked as a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=460801\">bug</a> in Firefox, but Chrome does not fire the event either. Also, the drop animation looks like a cancellation. This was a bug that came up when trying to expand Daniel’s <a href=\"http://webcloud.se/truly-reactive-sortable-component/\">Truly Reactive Sortable Component</a> in earlier tests. We handle it by not moving or removing the selected elements. In the “User Notification” section we highlight selected items in a dark grey color. It would be fairly easy to set the position to absolute and the top/left properties to be far off screen.</p></li><li><p>WebKit does not trigger CSS <code class=\"highlighter-rouge\">:hover</code> when dragging. This “gotcha” is only verified on MacOSX, but that was enough to change directions when it cropped up. This comes up when trying to use <code class=\"highlighter-rouge\">:hover</code> to animate the drop zones, which was the obvious first attempt. Though it worked out well because the final version animates better based on hovering over items too.</p></li></ul><h1 id=\"conclusion\">Conclusion</h1><p>This article describes how to create a very specific sortable/exchangable list component. It is useful for a page with multiple containers of items, each with their own way of rendering data. It does not use any kind of Flux architecture or other means of communicating between containers, making each component very independent. Suggestions on how to expand were offered along the way. Hopefully, it has been useful. Comments, as always, are welcome.</p><p><em>All of the code can be found on <a href=\"https://github.com/HurricaneJames/dex\">GitHub</a>.</em></p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Setting up Rails with React and Jest",
      "pubDate": "2014-12-16",
      "link": "https://reactjsnews.com/setting-up-rails-for-react-and-jest",
      "guid": "https://reactjsnews.com/setting-up-rails-for-react-and-jest",
      "author": "",
      "thumbnail": "",
      "description": "<p><a href=\"http://facebook.github.io/react/\">React</a> is Awesome! <a href=\"http://rubyonrails.org/\">Rails</a> is Awesome! <a href=\"https://facebook.github.io/jest/\">Jest</a> is awesome! Using Jest with React in Rails should be Awesome Cubed… and yet it seems so difficult.</p><p>Recently, the author was in a position where a legacy project wanted to redesign the front-end while keeping the Rails backend. The project decided to go with a React based redesign phased in, piecemeal, over time. Eventually the old JavaScript would just disappear.</p><p>The old JavaScripts had no unit testing, only some integration testing through Cucumber and Selenium. A key requirement of the new front-end was to add unit-testing to the JavaScripts, hopefully getting to a point where the team could practice some <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> (despite DHH’s proclamation that TDD is dead).</p><p>Other guides provided quite a bit of insight on the direction to take. Oliver Lance’s <a href=\"https://medium.com/@olance/rails-react-browserify-e315001d5974\">Rails, React, Browserify: Packaging your React components</a> article was especially useful. However, it did not address testing. Integration tests were possible using Oliver’s setup, but Jest was unusable.</p><p>This article seeks to provide a decent setup for using React in Rails, with all Node packages, Jest test functionality, and react_ujs Rails helpers. We accomplish this using two sweet gems, <a href=\"https://github.com/reactjs/react-rails\">react-rails</a> and <a href=\"https://github.com/browserify-rails/browserify-rails\">browserify-rails</a>, and a little bit of glue.</p><p><em>All of the code used in this article is available on <a href=\"https://github.com/HurricaneJames/rex\">GitHub</a>.</em></p><h1 id=\"basic-rails-setup\">Basic Rails Setup</h1><p>We assume a working knowledge of <a href=\"http://rubyonrails.org/\">Rails</a>. However, as a simple scaffolding upon which to build, we will be using the following setup.</p><ol><li><p><code class=\"highlighter-rouge\">rails new rex -T</code></p></li><li><p>Remove Turbolinks <em>(technically optional)</em></p><ul><li><p>from the <code class=\"highlighter-rouge\">Gemfile</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    # Gemfilesource 'https://rubygems.org'gem 'rails', '4.1.8'gem 'sqlite3'gem 'sass-rails', '~&gt; 4.0.3'gem 'coffee-rails', '~&gt; 4.0.0'gem 'uglifier', '&gt;= 1.3.0'gem 'therubyracer',  platforms: :rubygem 'jquery-rails'gem 'jbuilder', '~&gt; 2.0'gem 'spring',        group: :developmentgem 'thin'</code></pre></div></li><li><p>from <code class=\"highlighter-rouge\">application.js</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    // app/assets/javascripts/application.js//= require jquery//= require jquery_ujs//= require_tree .</code></pre></div></li></ul></li><li><p><code class=\"highlighter-rouge\">cd rex; bundle install</code></p></li><li><p><code class=\"highlighter-rouge\">rails generate controller pages index --no-helper --no-assets --no-controller-specs --no-view-specs</code></p></li><li><p>Update Rails routes root to new <code class=\"highlighter-rouge\">pages#index</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># config/routes.rbRails.application.routes.draw doget 'pages/index'root to: 'pages#index'end</code></pre></div></li></ol><h1 id=\"add-in-react-rails\">Add in React-Rails</h1><p>The best part of <a href=\"https://github.com/reactjs/react-rails\">React-Rails</a> is the React UJS and the view helpers. However, the stable versions of react-rails only contain react.js. Hopefully the react-rails project will correct this shortcoming in the future as react_ujs is the most valuable part of the gem. In the meantime, use the 1.0.0.pre branch directly from <a href=\"https://github.com/\">GitHub</a>.</p><ol><li><p>Add ‘react-rails’ to the Gemfile.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>echo \"gem 'react-rails', '~&gt; 1.0.0.pre', github: 'reactjs/react-rails'\" &gt;&gt; Gemfile</code></pre></div></li><li><p><code class=\"highlighter-rouge\">bundle install</code></p></li><li><p>Add react-rails to the application config.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"err\">#</span> <span class=\"nx\">config</span><span class=\"o\">/</span><span class=\"nx\">application</span><span class=\"p\">.</span><span class=\"nx\">rb</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">react</span><span class=\"p\">.</span><span class=\"nx\">variant</span>      <span class=\"o\">=</span> <span class=\"err\">:</span><span class=\"nx\">production</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">react</span><span class=\"p\">.</span><span class=\"nx\">addons</span>       <span class=\"o\">=</span> <span class=\"kc\">true</span></code></pre></div></li><li><p>Setup react-rails for development mode.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"err\">#</span> <span class=\"nx\">config</span><span class=\"o\">/</span><span class=\"nx\">environments</span><span class=\"o\">/</span><span class=\"nx\">development</span><span class=\"p\">.</span><span class=\"nx\">rb</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">react</span><span class=\"p\">.</span><span class=\"nx\">variant</span> <span class=\"o\">=</span> <span class=\"err\">:</span><span class=\"nx\">development</span></code></pre></div></li><li><p>Add React to application by adding react via two sprocket includes <code class=\"highlighter-rouge\">//= require react</code> and <code class=\"highlighter-rouge\">//= require react_ujs</code>. This will change in the next section, but only slightly.</p><ul><li><p>First, create a new <code class=\"highlighter-rouge\">components.js</code> file which will include all of our React components.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  // app/assets/javascripts/components.js//= require react//= require react_ujs</code></pre></div></li><li><p>Then update <code class=\"highlighter-rouge\">application.js</code> by removing the <code class=\"highlighter-rouge\">require_tree</code> directive and including the new <code class=\"highlighter-rouge\">components.js</code> code.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  // app/assets/javascripts/application.js//= require jquery//= require jquery_ujs//= require components</code></pre></div></li></ul></li></ol><p>At this point it is possible to create React components by placing them in the <code class=\"highlighter-rouge\">components.js</code> file and calling them with <code class=\"highlighter-rouge\">react_component 'ComponentName', {props}</code>. in the Rails views. However, there are some limitations. First, it cannot make use of Jest for testing, though Jasmine and full integration tests should work. Second, it is not possible to <code class=\"highlighter-rouge\">require()</code> any node packages. For example, many React applications will want to include node packages like the <a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise</a> or <a href=\"https://www.npmjs.com/package/reflux\">reflux</a> packages.</p><h1 id=\"browserify-rails\">Browserify-Rails</h1><p>The general solution for adding CommonJS and <code class=\"highlighter-rouge\">require()</code> for React is to use a package like <a href=\"http://browserify.org/\">browserify</a>. Fortunately, there’s a gem for that: <a href=\"https://github.com/browserify-rails/browserify-rails\">browserify-rails</a>. Installation is fairly straight forward.</p><ol><li><p>Verify that <a href=\"http://nodejs.org/\">Node</a> is installed.</p></li><li><p>Add browserify-rails to the gemfile.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>echo \"gem 'browserify-rails', '~&gt;0.5'\" &gt;&gt; Gemfile</code></pre></div></li><li><p><code class=\"highlighter-rouge\">bundle install</code></p></li><li><p>Create a package.json file.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\"></span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"rex-app\"</span><span class=\"p\">,</span><span class=\"w\"></span><span class=\"nt\">\"devDependencies\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span><span class=\"nt\">\"browserify\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"~&gt;6.3\"</span><span class=\"p\">,</span><span class=\"w\"></span><span class=\"nt\">\"browserify-incremental\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"^1.4.0\"</span><span class=\"p\">,</span><span class=\"w\"></span><span class=\"nt\">\"reactify\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"^0.17.1\"</span><span class=\"w\"></span><span class=\"p\">},</span><span class=\"w\"></span><span class=\"nt\">\"engines\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span><span class=\"nt\">\"node\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"&gt;=0.10.0\"</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span></code></pre></div><p><strong>Important!</strong> Any package that needs to be <code class=\"highlighter-rouge\">require()</code>d should be added to the devDependencies of <code class=\"highlighter-rouge\">package.json</code>.</p><p><strong>Update:</strong> 2015-02-11The browserify-rails was updated to use browserify-incremental. This means we need to add ‘browserify-incremental’ to your package.json. Trying to use browserify-rails without browserify-incremental will appear to work fine, but will throw an exception when making changes to JavaScript files and refreshing the page. Please add the following to your package.json file to work with browserify-rails 0.7.2 and above.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    \"browserify-incremental\": \"^1.4.0\"</code></pre></div></li><li><p><code class=\"highlighter-rouge\">npm install</code></p><ul><li>Note: add <code class=\"highlighter-rouge\">/node_modules</code> to the <code class=\"highlighter-rouge\">.gitignore</code> file if git is being used.</li></ul></li><li><p>Enable converstion of JSX to JS by adding the following param to <code class=\"highlighter-rouge\">config/application.rb</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>config.browserify_rails.commandline_options = \"--transform reactify --extension=\".jsx\"\"</code></pre></div></li><li><p>Create a <code class=\"highlighter-rouge\">components/</code> directory in <code class=\"highlighter-rouge\">app/assets/javascripts/</code>. All React components will go in this directory.</p></li><li><p>Add components.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">//app/assets/javascripts/components/DemoComponent.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">DemoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'Demo Component'</span><span class=\"p\">,</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Demo</span> <span class=\"nx\">Component</span><span class=\"o\">&lt;</span><span class=\"sr\">/div&gt;</span><span class=\"err\">;</span>  <span class=\"p\">}</span><span class=\"p\">});</span><span class=\"c1\">// each file will export exactly one component</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">DemoComponent</span><span class=\"p\">;</span></code></pre></div></li><li><p>Update <code class=\"highlighter-rouge\">components.js</code> to link required modules from the components directory.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// note that this is a global assignment, it will be discussed further belowDemoComponent = require('./components/DemoComponent');</code></pre></div></li><li><p>Add the demo component into our view.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;h1&gt;/app/views/pages/index.html.erb&lt;/h1&gt;&lt;%= react_component 'DemoComponent', {} %&gt;</code></pre></div></li></ol><p>This setup gives us <code class=\"highlighter-rouge\">require()</code>. However, there are some things to note. First, do not <code class=\"highlighter-rouge\">require('react')</code> via CommonJS <code class=\"highlighter-rouge\">require()</code>. React is being loaded globaly by react-rails via the sprocket <code class=\"highlighter-rouge\">//= require react</code> directive. A second inclusion will cause React to throw errors. Second, each and every single component that should be available globally needs to be <code class=\"highlighter-rouge\">require()</code>d in <code class=\"highlighter-rouge\">components.js</code>. CommonJS does not have an equivalent to the sprocket <code class=\"highlighter-rouge\">//= require_tree</code> directive.</p><h1 id=\"fixing-browserifyreact-rails\">Fixing Browserify/React-Rails</h1><p>Problem, <code class=\"highlighter-rouge\">require('react')</code> is necessary if we want to use Jest. The solution so far provides <code class=\"highlighter-rouge\">require()</code> for other libraries, but not <code class=\"highlighter-rouge\">require('react')</code>. So, how to get this crucial last requirement. Presently, the only workable solution is to ignore the <code class=\"highlighter-rouge\">react.js</code> asset provided by react-rails and use the Node version instead.</p><ol><li><p>Replace <code class=\"highlighter-rouge\">//= require react</code> with <code class=\"highlighter-rouge\">require('react')</code> in <code class=\"highlighter-rouge\">component.js</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>//app/assets/javascripts/components.js//= require_self//= require react_ujsReact = require('react');// put components hereDemoComponent = require('./components/DemoComponent');</code></pre></div><p><code class=\"highlighter-rouge\">//= require_self</code> is called before <code class=\"highlighter-rouge\">//= require react_ujs</code>. This allows <code class=\"highlighter-rouge\">react.js</code> to be loaded from node modules instead of react-rails.</p></li><li><p>Update <code class=\"highlighter-rouge\">package.json</code> with the following in <code class=\"highlighter-rouge\">devDependencies</code>:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"react\": \"^0.12.0\",\"react-tools\": \"^0.12.1\"</code></pre></div></li><li><p>Run <code class=\"highlighter-rouge\">npm install</code> again.</p></li><li><p>Add <code class=\"highlighter-rouge\">var React = require('react');</code> to your top of each of your components. For example:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">//app/assets/javascripts/components/DemoComponent.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">DemoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'Demo Component'</span><span class=\"p\">,</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Demo</span> <span class=\"nx\">Component</span><span class=\"o\">&lt;</span><span class=\"sr\">/div&gt;</span><span class=\"err\">;</span>  <span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">DemoComponent</span><span class=\"p\">;</span></code></pre></div></li></ol><p>Now we can <code class=\"highlighter-rouge\">require('react')</code>, export the component via <code class=\"highlighter-rouge\">module.exports</code>, and inject components with <code class=\"highlighter-rouge\">react_component</code> Rails view helpers.</p><h1 id=\"jest\">Jest</h1><p>We can finally get going with <a href=\"https://facebook.github.io/jest/\">Jest</a>. Jest is based on Jasmine and used by Facebook to test React. It automatically mocks out all modules except those being tested, it can run tests in parallel, and it runs in a fake DOM implementation. Bottom line, Jest is awesome.</p><p>However, Jest really wants a CommonJS structure where everything is included via <code class=\"highlighter-rouge\">require()</code>. That is why we had to go through all the trouble in the previous sections. Fortunately, now that the hard work is done, making Jest work is relatively easy. It requires updating <code class=\"highlighter-rouge\">package.json</code>, creating a new directory, and adding a couple of script files.</p><ol><li><p>Create a directory for the tests in <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests__</code>.</p><p>Note that Rails generally puts tests in a <code class=\"highlighter-rouge\">test/</code> or <code class=\"highlighter-rouge\">spec/</code> directory. However, it is easier to put Jest tests in a <code class=\"highlighter-rouge\">__tests__</code> directory under the actual components. Otherwise, the test <code class=\"highlighter-rouge\">require()</code> statements end up with lots of brittle, ugly <code class=\"highlighter-rouge\">../../../app/assets/javascripts/components/[component]</code>s.</p><p>Placing the tests here has one slight complication though. Sprocket’s <code class=\"highlighter-rouge\">//= require_tree</code> will include the tests as part of the build. This should not be an issue as the <code class=\"highlighter-rouge\">components/</code> directory should not be part of any <code class=\"highlighter-rouge\">//= require_tree</code> directive anyway, as that also would break the CommonJS structure we use.</p></li><li><p>Create a file <code class=\"highlighter-rouge\">app/assets/components/javascripts/__tests__/preprocessor.js</code> to convert any JSX to JS (remember that browserify-rails does this via reactify when running via Rails).</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">//app/assets/javascripts/components/__tests__/preprocessor.js</span><span class=\"kd\">var</span> <span class=\"nx\">ReactTools</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react-tools'</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">process</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">ReactTools</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div></li><li><p>Add and configure Jest in the <code class=\"highlighter-rouge\">package.json</code></p></li></ol><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    \"devDependencies\": {\"jest-cli\": \"^0.5.4\",},\"scripts\": {\"test\": \"node ./node_modules/jest-cli/bin/jest.js\"},\"jest\": {\"rootDir\": \"./app/assets/javascripts/components\",\"scriptPreprocessor\": \"&lt;rootDir&gt;/__tests__/preprocessor.js\",\"moduleFileExtensions\": [ \"js\", \"jsx\"],\"unmockedModulePathPatterns\": [\"react\"],\"testFileExtensions\": [\"js\", \"jsx\"],\"testPathIgnorePatterns\": [ \"preprocessor.js\" ]}* `rootDir` points to the components directory (Jest will automatically load the __tests__ path by default).* `scriptPreprocessor` points to our JSX preprocessor script.* `umockedModulePathPatterns` tells Jest not to mock out React, which we need for our components to work.* `testPathIgnorePatterns` tells Jest to ignore our JSX preprocessor. Placing `preprocessor.js` in a different directory would eliminate the need for this directive. However, this feels cleaner.</code></pre></div><p><strong>Update:</strong> 2015-09-21The original version of this post used <code class=\"highlighter-rouge\">\"jest-cli\": \"^0.2.0\"</code>, which <a href=\"https://github.com/facebook/jest/issues/378\">began producing errors</a> with certain versions of Node. The version has been updated to <code class=\"highlighter-rouge\">\"jest-cli\": \"^0.5.4\",</code> which solves that issue. However due a decision by the JSDOM package to support io.js rather than node when they were separated, this requires version using Node v4.0.0 or higher. When it comed to Jest, your options are:</p><ul><li>Jest 0.4 with Node 0.10</li><li>Jest 0.5 with io.js 2+ or Node v4.0+</li><li>In the future it will be Jest 0.6+ with Node 4.0+ only.</li></ul><p>You can read more about this in <a href=\"https://github.com/facebook/jest/issues/243\">this github issue</a>.</p><ol><li><p><code class=\"highlighter-rouge\">npm install</code></p></li><li><p>Create a test for our demo component.</p></li></ol><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>    <span class=\"c1\">// app/assets/javascripts/components/__tests__/DemoComponent-test.jsx</span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../DemoComponent'</span><span class=\"p\">);</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'DemoComponent'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should tell use it is a demo component'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">TestUtils</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">addons</span><span class=\"p\">.</span><span class=\"nx\">TestUtils</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">DemoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../DemoComponent'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">demoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">DemoComponent</span><span class=\"o\">/&gt;</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">demoComponent</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'Demo Component'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><ol><li>Run tests with <code class=\"highlighter-rouge\">npm test</code>.</li></ol><p>Now it is possible to run Jest based tests, <code class=\"highlighter-rouge\">require()</code> CommonJS packages, and inject React via Rails views.</p><h1 id=\"gotchas-with-jquery-and-other-gem-based-assets\">Gotchas with jQuery and other Gem-based Assets</h1><p>The basic Rails application uses the <code class=\"highlighter-rouge\">jquery-rails</code> gem. <code class=\"highlighter-rouge\">jquery-rails</code> has the same problem with <code class=\"highlighter-rouge\">require('jquery')</code> that <code class=\"highlighter-rouge\">react-rails</code> has with <code class=\"highlighter-rouge\">require('react')</code>. This will be a problem with any application that adds assets via gems and tries to use both <code class=\"highlighter-rouge\">//= require</code> and <code class=\"highlighter-rouge\">require()</code> for that asset. Fortunately, jQuery is resilient to multiple includes, so the only real concern is bloat.</p><p>The maintainers of <code class=\"highlighter-rouge\">browserify-rails</code> know about the <a href=\"https://github.com/browserify-rails/browserify-rails/issues/9\">problem</a>. Hopefully, a solution is implemented soon. In the mean time, one potential solution is to remove the <code class=\"highlighter-rouge\">jquery-rails</code> gem, <code class=\"highlighter-rouge\">//= require jquery</code> and <code class=\"highlighter-rouge\">//= require jquery_ujs</code>. Another solution, if your project needs these gems, is to add jQuery to <code class=\"highlighter-rouge\">application.js</code> the way react.js is added to <code class=\"highlighter-rouge\">components.js</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>//= require_self//= require jquery_ujs//= components$ = jQuery = require('jquery');</code></pre></div><p>Then add jQuery to the devDependencies of <code class=\"highlighter-rouge\">package.json</code>. <em>(Remember that all <code class=\"highlighter-rouge\">require()</code>d packages must be in package.json and <code class=\"highlighter-rouge\">npm install</code>ed)</em>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"devDependencies\": {\"jquery\": \"^2.1.1\"}</code></pre></div><h1 id=\"conclusion\">Conclusion</h1><p>We have setup Rails to work with React, Node packages, and Jest. To use this setup, simply add React components to the <code class=\"highlighter-rouge\">app/assets/javascript/components/</code> directory and put any global components that the <code class=\"highlighter-rouge\">react_component</code> view helper might need in <code class=\"highlighter-rouge\">app/assets/javascripts/components.js</code>. Tests are simple Jest tests in the <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests/</code> directory. Rspec/Cucumber integration tests should work as expected too.</p><p>Hopefully, this article has been useful to help setup a foundation for using React and Jest in your Rails application.</p>",
      "content": "<p><a href=\"http://facebook.github.io/react/\">React</a> is Awesome! <a href=\"http://rubyonrails.org/\">Rails</a> is Awesome! <a href=\"https://facebook.github.io/jest/\">Jest</a> is awesome! Using Jest with React in Rails should be Awesome Cubed… and yet it seems so difficult.</p><p>Recently, the author was in a position where a legacy project wanted to redesign the front-end while keeping the Rails backend. The project decided to go with a React based redesign phased in, piecemeal, over time. Eventually the old JavaScript would just disappear.</p><p>The old JavaScripts had no unit testing, only some integration testing through Cucumber and Selenium. A key requirement of the new front-end was to add unit-testing to the JavaScripts, hopefully getting to a point where the team could practice some <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> (despite DHH’s proclamation that TDD is dead).</p><p>Other guides provided quite a bit of insight on the direction to take. Oliver Lance’s <a href=\"https://medium.com/@olance/rails-react-browserify-e315001d5974\">Rails, React, Browserify: Packaging your React components</a> article was especially useful. However, it did not address testing. Integration tests were possible using Oliver’s setup, but Jest was unusable.</p><p>This article seeks to provide a decent setup for using React in Rails, with all Node packages, Jest test functionality, and react_ujs Rails helpers. We accomplish this using two sweet gems, <a href=\"https://github.com/reactjs/react-rails\">react-rails</a> and <a href=\"https://github.com/browserify-rails/browserify-rails\">browserify-rails</a>, and a little bit of glue.</p><p><em>All of the code used in this article is available on <a href=\"https://github.com/HurricaneJames/rex\">GitHub</a>.</em></p><h1 id=\"basic-rails-setup\">Basic Rails Setup</h1><p>We assume a working knowledge of <a href=\"http://rubyonrails.org/\">Rails</a>. However, as a simple scaffolding upon which to build, we will be using the following setup.</p><ol><li><p><code class=\"highlighter-rouge\">rails new rex -T</code></p></li><li><p>Remove Turbolinks <em>(technically optional)</em></p><ul><li><p>from the <code class=\"highlighter-rouge\">Gemfile</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    # Gemfilesource 'https://rubygems.org'gem 'rails', '4.1.8'gem 'sqlite3'gem 'sass-rails', '~&gt; 4.0.3'gem 'coffee-rails', '~&gt; 4.0.0'gem 'uglifier', '&gt;= 1.3.0'gem 'therubyracer',  platforms: :rubygem 'jquery-rails'gem 'jbuilder', '~&gt; 2.0'gem 'spring',        group: :developmentgem 'thin'</code></pre></div></li><li><p>from <code class=\"highlighter-rouge\">application.js</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    // app/assets/javascripts/application.js//= require jquery//= require jquery_ujs//= require_tree .</code></pre></div></li></ul></li><li><p><code class=\"highlighter-rouge\">cd rex; bundle install</code></p></li><li><p><code class=\"highlighter-rouge\">rails generate controller pages index --no-helper --no-assets --no-controller-specs --no-view-specs</code></p></li><li><p>Update Rails routes root to new <code class=\"highlighter-rouge\">pages#index</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># config/routes.rbRails.application.routes.draw doget 'pages/index'root to: 'pages#index'end</code></pre></div></li></ol><h1 id=\"add-in-react-rails\">Add in React-Rails</h1><p>The best part of <a href=\"https://github.com/reactjs/react-rails\">React-Rails</a> is the React UJS and the view helpers. However, the stable versions of react-rails only contain react.js. Hopefully the react-rails project will correct this shortcoming in the future as react_ujs is the most valuable part of the gem. In the meantime, use the 1.0.0.pre branch directly from <a href=\"https://github.com/\">GitHub</a>.</p><ol><li><p>Add ‘react-rails’ to the Gemfile.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>echo \"gem 'react-rails', '~&gt; 1.0.0.pre', github: 'reactjs/react-rails'\" &gt;&gt; Gemfile</code></pre></div></li><li><p><code class=\"highlighter-rouge\">bundle install</code></p></li><li><p>Add react-rails to the application config.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"err\">#</span> <span class=\"nx\">config</span><span class=\"o\">/</span><span class=\"nx\">application</span><span class=\"p\">.</span><span class=\"nx\">rb</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">react</span><span class=\"p\">.</span><span class=\"nx\">variant</span>      <span class=\"o\">=</span> <span class=\"err\">:</span><span class=\"nx\">production</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">react</span><span class=\"p\">.</span><span class=\"nx\">addons</span>       <span class=\"o\">=</span> <span class=\"kc\">true</span></code></pre></div></li><li><p>Setup react-rails for development mode.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"err\">#</span> <span class=\"nx\">config</span><span class=\"o\">/</span><span class=\"nx\">environments</span><span class=\"o\">/</span><span class=\"nx\">development</span><span class=\"p\">.</span><span class=\"nx\">rb</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">react</span><span class=\"p\">.</span><span class=\"nx\">variant</span> <span class=\"o\">=</span> <span class=\"err\">:</span><span class=\"nx\">development</span></code></pre></div></li><li><p>Add React to application by adding react via two sprocket includes <code class=\"highlighter-rouge\">//= require react</code> and <code class=\"highlighter-rouge\">//= require react_ujs</code>. This will change in the next section, but only slightly.</p><ul><li><p>First, create a new <code class=\"highlighter-rouge\">components.js</code> file which will include all of our React components.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  // app/assets/javascripts/components.js//= require react//= require react_ujs</code></pre></div></li><li><p>Then update <code class=\"highlighter-rouge\">application.js</code> by removing the <code class=\"highlighter-rouge\">require_tree</code> directive and including the new <code class=\"highlighter-rouge\">components.js</code> code.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>  // app/assets/javascripts/application.js//= require jquery//= require jquery_ujs//= require components</code></pre></div></li></ul></li></ol><p>At this point it is possible to create React components by placing them in the <code class=\"highlighter-rouge\">components.js</code> file and calling them with <code class=\"highlighter-rouge\">react_component 'ComponentName', {props}</code>. in the Rails views. However, there are some limitations. First, it cannot make use of Jest for testing, though Jasmine and full integration tests should work. Second, it is not possible to <code class=\"highlighter-rouge\">require()</code> any node packages. For example, many React applications will want to include node packages like the <a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise</a> or <a href=\"https://www.npmjs.com/package/reflux\">reflux</a> packages.</p><h1 id=\"browserify-rails\">Browserify-Rails</h1><p>The general solution for adding CommonJS and <code class=\"highlighter-rouge\">require()</code> for React is to use a package like <a href=\"http://browserify.org/\">browserify</a>. Fortunately, there’s a gem for that: <a href=\"https://github.com/browserify-rails/browserify-rails\">browserify-rails</a>. Installation is fairly straight forward.</p><ol><li><p>Verify that <a href=\"http://nodejs.org/\">Node</a> is installed.</p></li><li><p>Add browserify-rails to the gemfile.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>echo \"gem 'browserify-rails', '~&gt;0.5'\" &gt;&gt; Gemfile</code></pre></div></li><li><p><code class=\"highlighter-rouge\">bundle install</code></p></li><li><p>Create a package.json file.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\"></span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"rex-app\"</span><span class=\"p\">,</span><span class=\"w\"></span><span class=\"nt\">\"devDependencies\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span><span class=\"nt\">\"browserify\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"~&gt;6.3\"</span><span class=\"p\">,</span><span class=\"w\"></span><span class=\"nt\">\"browserify-incremental\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"^1.4.0\"</span><span class=\"p\">,</span><span class=\"w\"></span><span class=\"nt\">\"reactify\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"^0.17.1\"</span><span class=\"w\"></span><span class=\"p\">},</span><span class=\"w\"></span><span class=\"nt\">\"engines\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span><span class=\"nt\">\"node\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"&gt;=0.10.0\"</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span></code></pre></div><p><strong>Important!</strong> Any package that needs to be <code class=\"highlighter-rouge\">require()</code>d should be added to the devDependencies of <code class=\"highlighter-rouge\">package.json</code>.</p><p><strong>Update:</strong> 2015-02-11The browserify-rails was updated to use browserify-incremental. This means we need to add ‘browserify-incremental’ to your package.json. Trying to use browserify-rails without browserify-incremental will appear to work fine, but will throw an exception when making changes to JavaScript files and refreshing the page. Please add the following to your package.json file to work with browserify-rails 0.7.2 and above.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    \"browserify-incremental\": \"^1.4.0\"</code></pre></div></li><li><p><code class=\"highlighter-rouge\">npm install</code></p><ul><li>Note: add <code class=\"highlighter-rouge\">/node_modules</code> to the <code class=\"highlighter-rouge\">.gitignore</code> file if git is being used.</li></ul></li><li><p>Enable converstion of JSX to JS by adding the following param to <code class=\"highlighter-rouge\">config/application.rb</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>config.browserify_rails.commandline_options = \"--transform reactify --extension=\".jsx\"\"</code></pre></div></li><li><p>Create a <code class=\"highlighter-rouge\">components/</code> directory in <code class=\"highlighter-rouge\">app/assets/javascripts/</code>. All React components will go in this directory.</p></li><li><p>Add components.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">//app/assets/javascripts/components/DemoComponent.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">DemoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'Demo Component'</span><span class=\"p\">,</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Demo</span> <span class=\"nx\">Component</span><span class=\"o\">&lt;</span><span class=\"sr\">/div&gt;</span><span class=\"err\">;</span>  <span class=\"p\">}</span><span class=\"p\">});</span><span class=\"c1\">// each file will export exactly one component</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">DemoComponent</span><span class=\"p\">;</span></code></pre></div></li><li><p>Update <code class=\"highlighter-rouge\">components.js</code> to link required modules from the components directory.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// note that this is a global assignment, it will be discussed further belowDemoComponent = require('./components/DemoComponent');</code></pre></div></li><li><p>Add the demo component into our view.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&lt;h1&gt;/app/views/pages/index.html.erb&lt;/h1&gt;&lt;%= react_component 'DemoComponent', {} %&gt;</code></pre></div></li></ol><p>This setup gives us <code class=\"highlighter-rouge\">require()</code>. However, there are some things to note. First, do not <code class=\"highlighter-rouge\">require('react')</code> via CommonJS <code class=\"highlighter-rouge\">require()</code>. React is being loaded globaly by react-rails via the sprocket <code class=\"highlighter-rouge\">//= require react</code> directive. A second inclusion will cause React to throw errors. Second, each and every single component that should be available globally needs to be <code class=\"highlighter-rouge\">require()</code>d in <code class=\"highlighter-rouge\">components.js</code>. CommonJS does not have an equivalent to the sprocket <code class=\"highlighter-rouge\">//= require_tree</code> directive.</p><h1 id=\"fixing-browserifyreact-rails\">Fixing Browserify/React-Rails</h1><p>Problem, <code class=\"highlighter-rouge\">require('react')</code> is necessary if we want to use Jest. The solution so far provides <code class=\"highlighter-rouge\">require()</code> for other libraries, but not <code class=\"highlighter-rouge\">require('react')</code>. So, how to get this crucial last requirement. Presently, the only workable solution is to ignore the <code class=\"highlighter-rouge\">react.js</code> asset provided by react-rails and use the Node version instead.</p><ol><li><p>Replace <code class=\"highlighter-rouge\">//= require react</code> with <code class=\"highlighter-rouge\">require('react')</code> in <code class=\"highlighter-rouge\">component.js</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>//app/assets/javascripts/components.js//= require_self//= require react_ujsReact = require('react');// put components hereDemoComponent = require('./components/DemoComponent');</code></pre></div><p><code class=\"highlighter-rouge\">//= require_self</code> is called before <code class=\"highlighter-rouge\">//= require react_ujs</code>. This allows <code class=\"highlighter-rouge\">react.js</code> to be loaded from node modules instead of react-rails.</p></li><li><p>Update <code class=\"highlighter-rouge\">package.json</code> with the following in <code class=\"highlighter-rouge\">devDependencies</code>:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"react\": \"^0.12.0\",\"react-tools\": \"^0.12.1\"</code></pre></div></li><li><p>Run <code class=\"highlighter-rouge\">npm install</code> again.</p></li><li><p>Add <code class=\"highlighter-rouge\">var React = require('react');</code> to your top of each of your components. For example:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">//app/assets/javascripts/components/DemoComponent.jsx</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">DemoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">displayName</span><span class=\"p\">:</span> <span class=\"s1\">'Demo Component'</span><span class=\"p\">,</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Demo</span> <span class=\"nx\">Component</span><span class=\"o\">&lt;</span><span class=\"sr\">/div&gt;</span><span class=\"err\">;</span>  <span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">DemoComponent</span><span class=\"p\">;</span></code></pre></div></li></ol><p>Now we can <code class=\"highlighter-rouge\">require('react')</code>, export the component via <code class=\"highlighter-rouge\">module.exports</code>, and inject components with <code class=\"highlighter-rouge\">react_component</code> Rails view helpers.</p><h1 id=\"jest\">Jest</h1><p>We can finally get going with <a href=\"https://facebook.github.io/jest/\">Jest</a>. Jest is based on Jasmine and used by Facebook to test React. It automatically mocks out all modules except those being tested, it can run tests in parallel, and it runs in a fake DOM implementation. Bottom line, Jest is awesome.</p><p>However, Jest really wants a CommonJS structure where everything is included via <code class=\"highlighter-rouge\">require()</code>. That is why we had to go through all the trouble in the previous sections. Fortunately, now that the hard work is done, making Jest work is relatively easy. It requires updating <code class=\"highlighter-rouge\">package.json</code>, creating a new directory, and adding a couple of script files.</p><ol><li><p>Create a directory for the tests in <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests__</code>.</p><p>Note that Rails generally puts tests in a <code class=\"highlighter-rouge\">test/</code> or <code class=\"highlighter-rouge\">spec/</code> directory. However, it is easier to put Jest tests in a <code class=\"highlighter-rouge\">__tests__</code> directory under the actual components. Otherwise, the test <code class=\"highlighter-rouge\">require()</code> statements end up with lots of brittle, ugly <code class=\"highlighter-rouge\">../../../app/assets/javascripts/components/[component]</code>s.</p><p>Placing the tests here has one slight complication though. Sprocket’s <code class=\"highlighter-rouge\">//= require_tree</code> will include the tests as part of the build. This should not be an issue as the <code class=\"highlighter-rouge\">components/</code> directory should not be part of any <code class=\"highlighter-rouge\">//= require_tree</code> directive anyway, as that also would break the CommonJS structure we use.</p></li><li><p>Create a file <code class=\"highlighter-rouge\">app/assets/components/javascripts/__tests__/preprocessor.js</code> to convert any JSX to JS (remember that browserify-rails does this via reactify when running via Rails).</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">//app/assets/javascripts/components/__tests__/preprocessor.js</span><span class=\"kd\">var</span> <span class=\"nx\">ReactTools</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react-tools'</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">process</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">ReactTools</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div></li><li><p>Add and configure Jest in the <code class=\"highlighter-rouge\">package.json</code></p></li></ol><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    \"devDependencies\": {\"jest-cli\": \"^0.5.4\",},\"scripts\": {\"test\": \"node ./node_modules/jest-cli/bin/jest.js\"},\"jest\": {\"rootDir\": \"./app/assets/javascripts/components\",\"scriptPreprocessor\": \"&lt;rootDir&gt;/__tests__/preprocessor.js\",\"moduleFileExtensions\": [ \"js\", \"jsx\"],\"unmockedModulePathPatterns\": [\"react\"],\"testFileExtensions\": [\"js\", \"jsx\"],\"testPathIgnorePatterns\": [ \"preprocessor.js\" ]}* `rootDir` points to the components directory (Jest will automatically load the __tests__ path by default).* `scriptPreprocessor` points to our JSX preprocessor script.* `umockedModulePathPatterns` tells Jest not to mock out React, which we need for our components to work.* `testPathIgnorePatterns` tells Jest to ignore our JSX preprocessor. Placing `preprocessor.js` in a different directory would eliminate the need for this directive. However, this feels cleaner.</code></pre></div><p><strong>Update:</strong> 2015-09-21The original version of this post used <code class=\"highlighter-rouge\">\"jest-cli\": \"^0.2.0\"</code>, which <a href=\"https://github.com/facebook/jest/issues/378\">began producing errors</a> with certain versions of Node. The version has been updated to <code class=\"highlighter-rouge\">\"jest-cli\": \"^0.5.4\",</code> which solves that issue. However due a decision by the JSDOM package to support io.js rather than node when they were separated, this requires version using Node v4.0.0 or higher. When it comed to Jest, your options are:</p><ul><li>Jest 0.4 with Node 0.10</li><li>Jest 0.5 with io.js 2+ or Node v4.0+</li><li>In the future it will be Jest 0.6+ with Node 4.0+ only.</li></ul><p>You can read more about this in <a href=\"https://github.com/facebook/jest/issues/243\">this github issue</a>.</p><ol><li><p><code class=\"highlighter-rouge\">npm install</code></p></li><li><p>Create a test for our demo component.</p></li></ol><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>    <span class=\"c1\">// app/assets/javascripts/components/__tests__/DemoComponent-test.jsx</span><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../DemoComponent'</span><span class=\"p\">);</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'DemoComponent'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should tell use it is a demo component'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">TestUtils</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">addons</span><span class=\"p\">.</span><span class=\"nx\">TestUtils</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">DemoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../DemoComponent'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">demoComponent</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">DemoComponent</span><span class=\"o\">/&gt;</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">demoComponent</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"s1\">'Demo Component'</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><ol><li>Run tests with <code class=\"highlighter-rouge\">npm test</code>.</li></ol><p>Now it is possible to run Jest based tests, <code class=\"highlighter-rouge\">require()</code> CommonJS packages, and inject React via Rails views.</p><h1 id=\"gotchas-with-jquery-and-other-gem-based-assets\">Gotchas with jQuery and other Gem-based Assets</h1><p>The basic Rails application uses the <code class=\"highlighter-rouge\">jquery-rails</code> gem. <code class=\"highlighter-rouge\">jquery-rails</code> has the same problem with <code class=\"highlighter-rouge\">require('jquery')</code> that <code class=\"highlighter-rouge\">react-rails</code> has with <code class=\"highlighter-rouge\">require('react')</code>. This will be a problem with any application that adds assets via gems and tries to use both <code class=\"highlighter-rouge\">//= require</code> and <code class=\"highlighter-rouge\">require()</code> for that asset. Fortunately, jQuery is resilient to multiple includes, so the only real concern is bloat.</p><p>The maintainers of <code class=\"highlighter-rouge\">browserify-rails</code> know about the <a href=\"https://github.com/browserify-rails/browserify-rails/issues/9\">problem</a>. Hopefully, a solution is implemented soon. In the mean time, one potential solution is to remove the <code class=\"highlighter-rouge\">jquery-rails</code> gem, <code class=\"highlighter-rouge\">//= require jquery</code> and <code class=\"highlighter-rouge\">//= require jquery_ujs</code>. Another solution, if your project needs these gems, is to add jQuery to <code class=\"highlighter-rouge\">application.js</code> the way react.js is added to <code class=\"highlighter-rouge\">components.js</code>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>//= require_self//= require jquery_ujs//= components$ = jQuery = require('jquery');</code></pre></div><p>Then add jQuery to the devDependencies of <code class=\"highlighter-rouge\">package.json</code>. <em>(Remember that all <code class=\"highlighter-rouge\">require()</code>d packages must be in package.json and <code class=\"highlighter-rouge\">npm install</code>ed)</em>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"devDependencies\": {\"jquery\": \"^2.1.1\"}</code></pre></div><h1 id=\"conclusion\">Conclusion</h1><p>We have setup Rails to work with React, Node packages, and Jest. To use this setup, simply add React components to the <code class=\"highlighter-rouge\">app/assets/javascript/components/</code> directory and put any global components that the <code class=\"highlighter-rouge\">react_component</code> view helper might need in <code class=\"highlighter-rouge\">app/assets/javascripts/components.js</code>. Tests are simple Jest tests in the <code class=\"highlighter-rouge\">app/assets/javascripts/components/__tests/</code> directory. Rspec/Cucumber integration tests should work as expected too.</p><p>Hopefully, this article has been useful to help setup a foundation for using React and Jest in your Rails application.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Building a test suite in React JS",
      "pubDate": "2014-12-08",
      "link": "https://reactjsnews.com/building-a-test-suite-in-react-js",
      "guid": "https://reactjsnews.com/building-a-test-suite-in-react-js",
      "author": "",
      "thumbnail": "",
      "description": "<p>I’m primarily a Rails developer but everyday I seem to be writing more and more front end JavaScript. While writing Ruby, tests are a given part of the process. This is not the case with JavaScript. I’ve always found that odd and I’ve also written enough JavaScript to intimately know how frustrating it can be.</p><p>It’s a delight writing Ruby with a test suite so why is it acceptable that most JavaScript goes into production without automated tests? I believe difficulty and fear are the culprit. It’s hard to get started; the tooling, workflow and even what to test are foreign. Rather than continue to deal with difficult JavaScript applications I decided to learn how to develop a test suite.</p><p>I’ve also been writing a lot of JavaScript with <a href=\"http://facebook.github.io/react/\">React</a>. I could write a length post on why React is great library for building user interfaces, I will one day, but for now I want to mention that my test suite targets React. Another reason to mention this is that React is very conducive to testing, hopefully this becomes more apparent with my examples.</p><p>If React is a bit of a new concept to you I highly suggest taking ten minutes to work through the <a href=\"http://facebook.github.io/react/docs/tutorial.html\">official tutorial</a> - it’s a worthy investment.</p><h2 id=\"application-setup\">Application Setup</h2><p>If you’d like to follow along by writing code (I strongly suggest you do) you need should clone this boilerplate for a quick start.</p><p><code class=\"highlighter-rouge\">git clone https://github.com/jarsbe/react-webpack-boilerplate test-suite</code></p><p><code class=\"highlighter-rouge\">cd test-suite</code></p><p><code class=\"highlighter-rouge\">npm install</code></p><p>Firstly we need something to test. The application we’ll create is simply (stupid) point of sale tool. There will be two components; an <code class=\"highlighter-rouge\">App</code> component which contains a list of items and a <code class=\"highlighter-rouge\">Checkout</code> component which contains a list of all selected items. The <code class=\"highlighter-rouge\">Checkout</code> component also has a counter for the total number of selected items. An item can be selected by clicking on it. I told you it was simple!</p><p>If you are coding along replace the <code class=\"highlighter-rouge\">main.js</code> file with the following code.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">),</span><span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./app'</span><span class=\"p\">);</span><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">);</span></code></pre></div><p>Next remove the <code class=\"highlighter-rouge\">component.js</code> file and create the <code class=\"highlighter-rouge\">app.js</code> and <code class=\"highlighter-rouge\">checkout.js</code> files.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">),</span><span class=\"nx\">Checkout</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./checkout'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">onSelectItem</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">];</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">selectedItems</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span><span class=\"p\">});</span><span class=\"p\">},</span><span class=\"na\">getInitialState</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">selectedItems</span><span class=\"p\">:</span> <span class=\"p\">[]</span><span class=\"p\">};</span><span class=\"p\">},</span><span class=\"na\">getDefaultProps</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Bread'</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Milk'</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Cheese'</span> <span class=\"p\">}]</span><span class=\"p\">};</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"item\"</span> <span class=\"o\">+</span> <span class=\"nx\">i</span><span class=\"p\">}</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onSelectItem</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>    <span class=\"p\">}.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">));</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Checkout</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">App</span><span class=\"p\">;</span></code></pre></div><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">Checkout</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"selectedItem\"</span> <span class=\"o\">+</span> <span class=\"nx\">i</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>    <span class=\"p\">});</span><span class=\"kd\">var</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">listItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Checkout</span><span class=\"p\">;</span></code></pre></div><p>Take 5 minutes to read how the application works. To run the application execute <code class=\"highlighter-rouge\">webpack -w</code> (install <a href=\"https://www.npmjs.org/package/webpack\">webpack</a> if you need it), in another terminal change directory into the site <code class=\"highlighter-rouge\">cd site</code> and run a server <code class=\"highlighter-rouge\">python -m SimpleHTTPServer</code>. Now the application is available on <code class=\"highlighter-rouge\">http://localhost:8000</code>. Time to get testing.</p><h2 id=\"testing-setup\">Testing Setup</h2><p>To build a test suite we need tools. Facebook uses <a href=\"https://facebook.github.io/jest/\">Jest</a>, which is a layer upon <a href=\"http://jasmine.github.io/\">Jasmine</a>. Jest offers automatic mocking and uses <a href=\"https://github.com/tmpvar/jsdom\">JSDom</a> for running tests in the command line (rather than the browser). Automatic mocking is useful since we’ll be testing components in isolation, all of our dependencies will be mocked by Jest. Take a look <a href=\"https://facebook.github.io/jest/docs/automatic-mocking.html\">here</a> for more information on automatic mocking. Along with Jest we need <a href=\"https://www.npmjs.org/package/react-tools\">React Tools</a> to transform any JSX during testing, this is optional but very helpful.</p><p>To install these tools.</p><p><code class=\"highlighter-rouge\">npm install jest-cli react-tools --save-dev</code></p><p>To transform JSX a helper function is required. In a <code class=\"highlighter-rouge\">support</code> folder create a <code class=\"highlighter-rouge\">preprocessor.js</code> file to do the work.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">ReactTools</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react-tools'</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">process</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">ReactTools</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div><p>To use the preprocessor add this configuration inside the <code class=\"highlighter-rouge\">package.json</code> file. It adds test script and informs Jest of the preprocessor function. It also makes sure that React itself is not automatically mocked!</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"scripts\": {\"test\": \"jest\"},\"jest\": {\"scriptPreprocessor\": \"&lt;rootDir&gt;/support/preprocessor.js\",\"unmockedModulePathPatterns\": [\"&lt;rootDir&gt;/node_modules/react\"]}</code></pre></div><p>Next add a folder called <code class=\"highlighter-rouge\">__tests__</code> in the root directory. Jest is magical enough to automatically run any test in any files sitting in this directory.</p><p>Just for sanity run <code class=\"highlighter-rouge\">npm test</code>. Jest should run and everything should pass with flying colours.</p><h2 id=\"testing\">Testing</h2><p>Now the moment we’ve been waiting for, writing tests. Here’s a spoiler - all the hard work has been done. The original goal of this post was to learn how to setup a JavaScript test suite. With that out of the way everything else is an implementation detail but ending it here wouldn’t be much fun, so on to the tests.</p><p>The simplest component is the <code class=\"highlighter-rouge\">Checkout</code>. It accepts only one property <code class=\"highlighter-rouge\">items</code> and generates a list from those <code class=\"highlighter-rouge\">items</code>. The <code class=\"highlighter-rouge\">Checkout</code> also calculates a total <code class=\"highlighter-rouge\">items</code> count.</p><p>To get this component tested create a <code class=\"highlighter-rouge\">checkout-test.js</code> file inside the <code class=\"highlighter-rouge\">__tests__</code> directory. It also needs some boilerplate code like so.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../components/checkout.js'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">),</span><span class=\"nx\">Checkout</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../components/checkout.js'</span><span class=\"p\">),</span><span class=\"nx\">TestUtils</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">addons</span><span class=\"p\">.</span><span class=\"nx\">TestUtils</span><span class=\"p\">;</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Checkout'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'renders each item as a li'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'displays the items count'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><p>Here Jest is told not to mock the <code class=\"highlighter-rouge\">Checkout</code> component then all the necessary dependencies are required. Finally there are two empty tests; one to check each item is rendered, the next to make sure the item count is correct.</p><p>To get these tests running you need to create an instance of the component, give it some items to render and finally select the DOM nodes to test.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Checkout'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">CheckoutElement</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Checkout</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{[{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span> <span class=\"p\">}]}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">CheckoutElement</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">CheckoutElement</span><span class=\"p\">,</span> <span class=\"s1\">'span'</span><span class=\"p\">);</span><span class=\"p\">...}</span></code></pre></div><p>The final piece of the puzzle is to add the expectations to each test.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">...</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'renders each item as a li'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'displays the items count'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Nice and simple. We make sure there are two <code class=\"highlighter-rouge\">li</code> nodes and that the items count is correct. The nice thing about React is that it’s simple to test. The <code class=\"highlighter-rouge\">Checkout</code> component is given data and the tests make sure it renders as expected. You can see this pattern again after testing the <code class=\"highlighter-rouge\">App</code> component.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../components/app.js'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">),</span><span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../components/app.js'</span><span class=\"p\">),</span><span class=\"nx\">TestUtils</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">addons</span><span class=\"p\">.</span><span class=\"nx\">TestUtils</span><span class=\"p\">;</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'App'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">AppElement</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span><span class=\"o\">/&gt;</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">,</span> <span class=\"s1\">'ul'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">);</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'has 3 default items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'has no selected items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'clicking an item'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'adds it to the selected items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><p>These tests follow the same create a component, give it data and expect output pattern. There’s also the added complexity of component state and function calls. Clicking an item in the <code class=\"highlighter-rouge\">App</code> list should add that item to the <code class=\"highlighter-rouge\">Checkout</code> list. This happens via a state change in <code class=\"highlighter-rouge\">App</code>. The only thing we need to test is that clicking on an item adds it to the state’s selected items array.</p><h2 id=\"conclusion\">Conclusion</h2><p>Before embarking on building this test suite I had never tested any JavaScript code. It feels silly that I have put it off for so long after realising how simple and similar (to RSpec) it is. I’m also fully away that React makes this testing quite simple, given the patterns explained above. Hopefully this has helped you banish some of the fear behind testing JavaScript too.</p><p>A few things that helped me was figuring out where to look in the documentation. Since I’m using 3 different tools (Jest, Jasmine &amp; React Tools) it was confusing at first. I got started by looking at <a href=\"https://facebook.github.io/jest/docs/tutorial-react.html#content\">Jest</a> specifically the React section and then reading the API (which is very concise). Next I had a look through both the <a href=\"http://jasmine.github.io/2.0/introduction.html\">Jasmine Guide</a> and the <a href=\"http://facebook.github.io/react/docs/test-utils.html\">React Test Utils</a>. It’s a bit strange looking through 3 sets of documentation, but they work surprisingly well together.</p><p>As a final note you may have noticed everything is using CommonJS like modules. As a Rails developer this is very foreign and almost a reason to avoid testing all together. Don’t fret however, you can have your cake and eat it too. I strongly suggest reading James McCann’s post on incorporating <a href=\"http://www.jamesmccann.nz/2014/11/27/bundling-npm-modules-through-webpack-and-rails-asset-pipeline.html\">Webpack with Rails</a>.</p>",
      "content": "<p>I’m primarily a Rails developer but everyday I seem to be writing more and more front end JavaScript. While writing Ruby, tests are a given part of the process. This is not the case with JavaScript. I’ve always found that odd and I’ve also written enough JavaScript to intimately know how frustrating it can be.</p><p>It’s a delight writing Ruby with a test suite so why is it acceptable that most JavaScript goes into production without automated tests? I believe difficulty and fear are the culprit. It’s hard to get started; the tooling, workflow and even what to test are foreign. Rather than continue to deal with difficult JavaScript applications I decided to learn how to develop a test suite.</p><p>I’ve also been writing a lot of JavaScript with <a href=\"http://facebook.github.io/react/\">React</a>. I could write a length post on why React is great library for building user interfaces, I will one day, but for now I want to mention that my test suite targets React. Another reason to mention this is that React is very conducive to testing, hopefully this becomes more apparent with my examples.</p><p>If React is a bit of a new concept to you I highly suggest taking ten minutes to work through the <a href=\"http://facebook.github.io/react/docs/tutorial.html\">official tutorial</a> - it’s a worthy investment.</p><h2 id=\"application-setup\">Application Setup</h2><p>If you’d like to follow along by writing code (I strongly suggest you do) you need should clone this boilerplate for a quick start.</p><p><code class=\"highlighter-rouge\">git clone https://github.com/jarsbe/react-webpack-boilerplate test-suite</code></p><p><code class=\"highlighter-rouge\">cd test-suite</code></p><p><code class=\"highlighter-rouge\">npm install</code></p><p>Firstly we need something to test. The application we’ll create is simply (stupid) point of sale tool. There will be two components; an <code class=\"highlighter-rouge\">App</code> component which contains a list of items and a <code class=\"highlighter-rouge\">Checkout</code> component which contains a list of all selected items. The <code class=\"highlighter-rouge\">Checkout</code> component also has a counter for the total number of selected items. An item can be selected by clicking on it. I told you it was simple!</p><p>If you are coding along replace the <code class=\"highlighter-rouge\">main.js</code> file with the following code.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">),</span><span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./app'</span><span class=\"p\">);</span><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">);</span></code></pre></div><p>Next remove the <code class=\"highlighter-rouge\">component.js</code> file and create the <code class=\"highlighter-rouge\">app.js</code> and <code class=\"highlighter-rouge\">checkout.js</code> files.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">),</span><span class=\"nx\">Checkout</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'./checkout'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">onSelectItem</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">item</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">];</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">selectedItems</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span><span class=\"p\">});</span><span class=\"p\">},</span><span class=\"na\">getInitialState</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">selectedItems</span><span class=\"p\">:</span> <span class=\"p\">[]</span><span class=\"p\">};</span><span class=\"p\">},</span><span class=\"na\">getDefaultProps</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Bread'</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Milk'</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Cheese'</span> <span class=\"p\">}]</span><span class=\"p\">};</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"item\"</span> <span class=\"o\">+</span> <span class=\"nx\">i</span><span class=\"p\">}</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onSelectItem</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>    <span class=\"p\">}.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">));</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">Checkout</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">App</span><span class=\"p\">;</span></code></pre></div><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">Checkout</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"selectedItem\"</span> <span class=\"o\">+</span> <span class=\"nx\">i</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span>    <span class=\"p\">});</span><span class=\"kd\">var</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">listItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Checkout</span><span class=\"p\">;</span></code></pre></div><p>Take 5 minutes to read how the application works. To run the application execute <code class=\"highlighter-rouge\">webpack -w</code> (install <a href=\"https://www.npmjs.org/package/webpack\">webpack</a> if you need it), in another terminal change directory into the site <code class=\"highlighter-rouge\">cd site</code> and run a server <code class=\"highlighter-rouge\">python -m SimpleHTTPServer</code>. Now the application is available on <code class=\"highlighter-rouge\">http://localhost:8000</code>. Time to get testing.</p><h2 id=\"testing-setup\">Testing Setup</h2><p>To build a test suite we need tools. Facebook uses <a href=\"https://facebook.github.io/jest/\">Jest</a>, which is a layer upon <a href=\"http://jasmine.github.io/\">Jasmine</a>. Jest offers automatic mocking and uses <a href=\"https://github.com/tmpvar/jsdom\">JSDom</a> for running tests in the command line (rather than the browser). Automatic mocking is useful since we’ll be testing components in isolation, all of our dependencies will be mocked by Jest. Take a look <a href=\"https://facebook.github.io/jest/docs/automatic-mocking.html\">here</a> for more information on automatic mocking. Along with Jest we need <a href=\"https://www.npmjs.org/package/react-tools\">React Tools</a> to transform any JSX during testing, this is optional but very helpful.</p><p>To install these tools.</p><p><code class=\"highlighter-rouge\">npm install jest-cli react-tools --save-dev</code></p><p>To transform JSX a helper function is required. In a <code class=\"highlighter-rouge\">support</code> folder create a <code class=\"highlighter-rouge\">preprocessor.js</code> file to do the work.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">ReactTools</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react-tools'</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">process</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">ReactTools</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div><p>To use the preprocessor add this configuration inside the <code class=\"highlighter-rouge\">package.json</code> file. It adds test script and informs Jest of the preprocessor function. It also makes sure that React itself is not automatically mocked!</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>\"scripts\": {\"test\": \"jest\"},\"jest\": {\"scriptPreprocessor\": \"&lt;rootDir&gt;/support/preprocessor.js\",\"unmockedModulePathPatterns\": [\"&lt;rootDir&gt;/node_modules/react\"]}</code></pre></div><p>Next add a folder called <code class=\"highlighter-rouge\">__tests__</code> in the root directory. Jest is magical enough to automatically run any test in any files sitting in this directory.</p><p>Just for sanity run <code class=\"highlighter-rouge\">npm test</code>. Jest should run and everything should pass with flying colours.</p><h2 id=\"testing\">Testing</h2><p>Now the moment we’ve been waiting for, writing tests. Here’s a spoiler - all the hard work has been done. The original goal of this post was to learn how to setup a JavaScript test suite. With that out of the way everything else is an implementation detail but ending it here wouldn’t be much fun, so on to the tests.</p><p>The simplest component is the <code class=\"highlighter-rouge\">Checkout</code>. It accepts only one property <code class=\"highlighter-rouge\">items</code> and generates a list from those <code class=\"highlighter-rouge\">items</code>. The <code class=\"highlighter-rouge\">Checkout</code> also calculates a total <code class=\"highlighter-rouge\">items</code> count.</p><p>To get this component tested create a <code class=\"highlighter-rouge\">checkout-test.js</code> file inside the <code class=\"highlighter-rouge\">__tests__</code> directory. It also needs some boilerplate code like so.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../components/checkout.js'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">),</span><span class=\"nx\">Checkout</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../components/checkout.js'</span><span class=\"p\">),</span><span class=\"nx\">TestUtils</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">addons</span><span class=\"p\">.</span><span class=\"nx\">TestUtils</span><span class=\"p\">;</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Checkout'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'renders each item as a li'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'displays the items count'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><p>Here Jest is told not to mock the <code class=\"highlighter-rouge\">Checkout</code> component then all the necessary dependencies are required. Finally there are two empty tests; one to check each item is rendered, the next to make sure the item count is correct.</p><p>To get these tests running you need to create an instance of the component, give it some items to render and finally select the DOM nodes to test.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Checkout'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">CheckoutElement</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Checkout</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{[{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span> <span class=\"p\">}]}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;</span>  <span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">CheckoutElement</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">CheckoutElement</span><span class=\"p\">,</span> <span class=\"s1\">'span'</span><span class=\"p\">);</span><span class=\"p\">...}</span></code></pre></div><p>The final piece of the puzzle is to add the expectations to each test.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">...</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'renders each item as a li'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'displays the items count'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Nice and simple. We make sure there are two <code class=\"highlighter-rouge\">li</code> nodes and that the items count is correct. The nice thing about React is that it’s simple to test. The <code class=\"highlighter-rouge\">Checkout</code> component is given data and the tests make sure it renders as expected. You can see this pattern again after testing the <code class=\"highlighter-rouge\">App</code> component.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">dontMock</span><span class=\"p\">(</span><span class=\"s1\">'../components/app.js'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">React</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'react/addons'</span><span class=\"p\">),</span><span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../components/app.js'</span><span class=\"p\">),</span><span class=\"nx\">TestUtils</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">addons</span><span class=\"p\">.</span><span class=\"nx\">TestUtils</span><span class=\"p\">;</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'App'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">AppElement</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span><span class=\"o\">/&gt;</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">,</span> <span class=\"s1\">'ul'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">,</span> <span class=\"s1\">'li'</span><span class=\"p\">);</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'has 3 default items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'has no selected items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'clicking an item'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'adds it to the selected items'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">Simulate</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">AppElement</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">selectedItems</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div><p>These tests follow the same create a component, give it data and expect output pattern. There’s also the added complexity of component state and function calls. Clicking an item in the <code class=\"highlighter-rouge\">App</code> list should add that item to the <code class=\"highlighter-rouge\">Checkout</code> list. This happens via a state change in <code class=\"highlighter-rouge\">App</code>. The only thing we need to test is that clicking on an item adds it to the state’s selected items array.</p><h2 id=\"conclusion\">Conclusion</h2><p>Before embarking on building this test suite I had never tested any JavaScript code. It feels silly that I have put it off for so long after realising how simple and similar (to RSpec) it is. I’m also fully away that React makes this testing quite simple, given the patterns explained above. Hopefully this has helped you banish some of the fear behind testing JavaScript too.</p><p>A few things that helped me was figuring out where to look in the documentation. Since I’m using 3 different tools (Jest, Jasmine &amp; React Tools) it was confusing at first. I got started by looking at <a href=\"https://facebook.github.io/jest/docs/tutorial-react.html#content\">Jest</a> specifically the React section and then reading the API (which is very concise). Next I had a look through both the <a href=\"http://jasmine.github.io/2.0/introduction.html\">Jasmine Guide</a> and the <a href=\"http://facebook.github.io/react/docs/test-utils.html\">React Test Utils</a>. It’s a bit strange looking through 3 sets of documentation, but they work surprisingly well together.</p><p>As a final note you may have noticed everything is using CommonJS like modules. As a Rails developer this is very foreign and almost a reason to avoid testing all together. Don’t fret however, you can have your cake and eat it too. I strongly suggest reading James McCann’s post on incorporating <a href=\"http://www.jamesmccann.nz/2014/11/27/bundling-npm-modules-through-webpack-and-rails-asset-pipeline.html\">Webpack with Rails</a>.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "The State of Flux",
      "pubDate": "2014-11-06",
      "link": "https://reactjsnews.com/the-state-of-flux",
      "guid": "https://reactjsnews.com/the-state-of-flux",
      "author": "",
      "thumbnail": "",
      "description": "<p>Facebook announced Flux at F8 in April as an application paradigm to complement React. But Flux has been pretty nebulous, as there hasn’t been much code released. The examples in Facebook’s Flux repository gave a better idea of its overall composition, but there was still a ton of boilerplate involved, and that’s usually where a library comes along to bring some level of abstraction and convenience.</p><p>Assuming a prior knowledge of Flux’s inner workings, here’s a comparison of the following Flux libraries that have been developed by the community:</p><ul><li>Reflux <a href=\"https://github.com/spoike/refluxjs\">https://github.com/spoike/refluxjs</a></li><li>Barracks <a href=\"https://github.com/yoshuawuyts/barracks\">https://github.com/yoshuawuyts/barracks</a></li><li>Delorean <a href=\"http://deloreanjs.com/\">http://deloreanjs.com/</a></li><li>Fluxy <a href=\"https://github.com/jmreidy/fluxy\">https://github.com/jmreidy/fluxy</a></li><li>Fluxxor <a href=\"http://fluxxor.com/\">http://fluxxor.com/</a></li><li>McFly <a href=\"http://kenwheeler.github.io/mcfly/\">http://kenwheeler.github.io/mcfly/</a></li></ul><h2 id=\"in-keeping-with-the-action---dispatcher---store---view-paradigm\">In keeping with the Action - Dispatcher - Store - View paradigm</h2><ul><li>Reflux merges Actions and the Dispatcher together (so Stores listen to Actions, not dispatched events)</li><li>Barracks basically removes Action Creators, and very tightly couples the Dispatcher and its Stores together (so the View dispatches events directly)</li><li>Delorean keeps all the same, but technically doesn’t have singleton Stores</li><li>Fluxy keeps all the same</li><li>Fluxxor keeps all the same</li><li>McFly keeps all the same</li></ul><h2 id=\"in-handling-asynchronous-requests\">In handling asynchronous requests</h2><p>General usage within Flux is straightforward - the one thing that is not exactly intuitive is handling asynchronous requests. This could be considered a Flux design pattern question, but general consensus from engineers at Facebook suggest that asynchronous writes actually do not belong in Stores, but in Action Creators. Asynchronous reads could belong in either.</p><p>I think it is favorable to handle asynchronous requests in actions rather than stores because:</p><ol><li>It is a more consistent pattern to how data flows through the rest of the system</li><li>Multiple stores could be interested in listening to the success or failure of a request (such as a generic error handler store), and you typically don’t want to invoke actions from directly within your stores</li></ol><p>That said, here are a variety of different approaches to handling/facilitating asynchronous requests:</p><ul><li>Reflux does not hinder developers from the above convention in any way - one can simply set up action “listeners,” which could invoke the asynchronous request and invoke other actions upon completion. This pattern has been illustrated <a href=\"https://github.com/WRidder/react-spa/blob/master/src/actions/resourceActions.js#L24-L51\">here</a> or <a href=\"https://gist.github.com/simenbrekken/de69d3ce27ea5934c8b2\">here</a>. Regardless, a solution is not necessarily intuitive as it may be in a library like Fluxy</li><li>Barracks emphasizes the use of waitFor as it actually handles asynchronicity correctly using a concept of middleware chains. This actually seems like it works totally fine for asynchronous writes</li><li>Delorean doesn’t do anything in particular</li><li>Fluxy has a built-in concept of serviceActions that directly facilitates asynchronous requests. A serviceAction will send ${ACTION} upon invocation and subsequently ${ACTION}_COMPLETED or ${ACTION}_FAILED upon completion. Fluxy’s dispatcher also has a dispatcher that actually handles waitFor correctly (as opposed to just staggering the order of synchronous calls as Facebook’s Flux Dispatcher or Yahoo’s Dispatchr do), supported with the Bluebird Promises library</li><li>Fluxxor doesn’t do anything in particular (though it contains some good documentation that arrives at the same conclusions as Fluxy)</li><li>McFly may actually inadvertently not allow multiple events to be dispatched asynchronously from a single action (since it seems to expect a synchronous payload object to be returned). So the action factory may actually hinder putting asynchronous requests in actions and force you to handle it in your stores</li></ul><h2 id=\"added-value\">Added Value</h2><ul><li>Reflux actually offers a ton of convenience methods in unique ways you won’t find in these other libraries. Your stores can listen to other stores and aggregate data across other stores. Creating actions and stores for those actions is particularly easy and can be done without a lot of code. The main impetus for Reflux was that the author didn’t like that stores basically had to compare strings to determine what action had taken place and what it should do, which is very fair. The result is that you don’t have to maintain a list of Constants (or compare strings) everywhere like in the Facebook examples - you basically create actions and you set up listeners on those actions, which honestly makes a lot of sense. A side effect of this is that you don’t need to maintain true Constants - multiple stores can essentially have the same API, the same action names, and there is no conflict as there would be with other Flux implementations.</li><li>Barracks boasts a minimal API surface area, which is actually something to behold - there are only 3 functions exposed. But it seems like, in these 3 functions, you can actually get everything you need</li><li>Delorean boasts that it is framework agnostic (React, Flight, Ractive, etc) and it is small (4K gzipped). It really is the only library that doesn’t seem straight up married to React in its demo code</li><li>Fluxy leverages Mori in stores for immutable data structures, so that your components’ shouldComponentUpdate can be ridiculously fast, but that also means you need to use Mori syntax for everything within your stores. It also keeps a history of your store state, so you basically get the ability to undo for free. As mentioned above, the idea of serviceActions basically gives you asynchronous actions for free, without any extra work</li><li>Fluxxor provides convenience create methods for a lot of setup as well as a StoreWatchMixin so that components can listen to Stores without a lot of boilerplate</li><li>McFly provides helper factories to facilitate the creation of actions and stores. It also contains a typical store listener mixin for components</li></ul><h2 id=\"shortcomings\">Shortcomings</h2><ul><li>Reflux seems a bit bulletproof at this point - it <em>does</em> stray from the “canonical” Facebook Flux architecture, but it still seems fully featured and, to my attention, there are no legitimate architectural concerns</li><li>Barracks makes a pretty large departure from the canonical Flux architecture by getting rid of action creators and tightly coupling the dispatcher and the stores together. This perhaps comes at the expense of flexibility. If your actions only ever affect one store, there’s no real problem, but if you hypothetically had a single action that should be handled by multiple stores, there’s no good, clean way to handle this (though I wonder how much this happens in the real world). Since Barracks is such a departure from all of these other implementations, if you needed something more conventional later, you’d probably have a hard time migrating and end up having to rewrite/rearchitecture much of your code</li><li>Delorean doesn’t stray much from the “canonical” Facebook Flux architecture - the only thing is that its stores aren’t singletons, but that’s rather nitpicky</li><li>Fluxy doesn’t stray much from the “canonical” Facebook Flux architecture</li><li>Fluxxor doesn’t stray much from the “canonical” Facebook Flux architecture</li><li>McFly’s helper factory to create actions basically makes you return one payload that will be dispatched (from the documentation, it looks like it needs to be synchronous)</li></ul><h2 id=\"takeaways\">Takeaways</h2><p>If you want to stick to Flux as purely as possible, use Fluxxor, Delorean, or McFly.</p><p>If you want convenience and novelty, Reflux and Fluxy will give you a pretty fun experience.</p><p>If you are feeling rebellious or want a truly minimal surface area, go with Barracks.</p><h2 id=\"corrections\">Corrections</h2><p>7/17/14: Corrections to Reflux</p><ul><li>Handling asynchronous requests had read: “Reflux’s design doesn’t exactly fit with the above paradigm, since an asynchronous read or write can’t be run from an action. It would have to be run from a Store - if other Stores were interested in whether the action succeeded or failed, you would either have to invoke follow up actions from within the Store or make interested Stores listen to changes in that Store, since that’s also a unique capability of Reflux.”</li><li>Shortcomings had read: “Reflux has a listenTo component mixin to listen to changes in your store, but you still have to do more work than other libraries - you still have to set up both onChange and onInit methods that I’d expect to be equivalent and could be abstracted away if you enforced the presence of a function like getStoreData in either the component or the Store.” Actually, Reflux provides a connect method that removes your need for onChange in general cases. You still may need to declare your initial state.</li><li>Shortcomings had also read: “As aforementioned, Reflux also does not have a straightforward solution to handling asynchronous requests” which was not true and was fixed under the “Handling Asynchronous Requests” section</li></ul>",
      "content": "<p>Facebook announced Flux at F8 in April as an application paradigm to complement React. But Flux has been pretty nebulous, as there hasn’t been much code released. The examples in Facebook’s Flux repository gave a better idea of its overall composition, but there was still a ton of boilerplate involved, and that’s usually where a library comes along to bring some level of abstraction and convenience.</p><p>Assuming a prior knowledge of Flux’s inner workings, here’s a comparison of the following Flux libraries that have been developed by the community:</p><ul><li>Reflux <a href=\"https://github.com/spoike/refluxjs\">https://github.com/spoike/refluxjs</a></li><li>Barracks <a href=\"https://github.com/yoshuawuyts/barracks\">https://github.com/yoshuawuyts/barracks</a></li><li>Delorean <a href=\"http://deloreanjs.com/\">http://deloreanjs.com/</a></li><li>Fluxy <a href=\"https://github.com/jmreidy/fluxy\">https://github.com/jmreidy/fluxy</a></li><li>Fluxxor <a href=\"http://fluxxor.com/\">http://fluxxor.com/</a></li><li>McFly <a href=\"http://kenwheeler.github.io/mcfly/\">http://kenwheeler.github.io/mcfly/</a></li></ul><h2 id=\"in-keeping-with-the-action---dispatcher---store---view-paradigm\">In keeping with the Action - Dispatcher - Store - View paradigm</h2><ul><li>Reflux merges Actions and the Dispatcher together (so Stores listen to Actions, not dispatched events)</li><li>Barracks basically removes Action Creators, and very tightly couples the Dispatcher and its Stores together (so the View dispatches events directly)</li><li>Delorean keeps all the same, but technically doesn’t have singleton Stores</li><li>Fluxy keeps all the same</li><li>Fluxxor keeps all the same</li><li>McFly keeps all the same</li></ul><h2 id=\"in-handling-asynchronous-requests\">In handling asynchronous requests</h2><p>General usage within Flux is straightforward - the one thing that is not exactly intuitive is handling asynchronous requests. This could be considered a Flux design pattern question, but general consensus from engineers at Facebook suggest that asynchronous writes actually do not belong in Stores, but in Action Creators. Asynchronous reads could belong in either.</p><p>I think it is favorable to handle asynchronous requests in actions rather than stores because:</p><ol><li>It is a more consistent pattern to how data flows through the rest of the system</li><li>Multiple stores could be interested in listening to the success or failure of a request (such as a generic error handler store), and you typically don’t want to invoke actions from directly within your stores</li></ol><p>That said, here are a variety of different approaches to handling/facilitating asynchronous requests:</p><ul><li>Reflux does not hinder developers from the above convention in any way - one can simply set up action “listeners,” which could invoke the asynchronous request and invoke other actions upon completion. This pattern has been illustrated <a href=\"https://github.com/WRidder/react-spa/blob/master/src/actions/resourceActions.js#L24-L51\">here</a> or <a href=\"https://gist.github.com/simenbrekken/de69d3ce27ea5934c8b2\">here</a>. Regardless, a solution is not necessarily intuitive as it may be in a library like Fluxy</li><li>Barracks emphasizes the use of waitFor as it actually handles asynchronicity correctly using a concept of middleware chains. This actually seems like it works totally fine for asynchronous writes</li><li>Delorean doesn’t do anything in particular</li><li>Fluxy has a built-in concept of serviceActions that directly facilitates asynchronous requests. A serviceAction will send ${ACTION} upon invocation and subsequently ${ACTION}_COMPLETED or ${ACTION}_FAILED upon completion. Fluxy’s dispatcher also has a dispatcher that actually handles waitFor correctly (as opposed to just staggering the order of synchronous calls as Facebook’s Flux Dispatcher or Yahoo’s Dispatchr do), supported with the Bluebird Promises library</li><li>Fluxxor doesn’t do anything in particular (though it contains some good documentation that arrives at the same conclusions as Fluxy)</li><li>McFly may actually inadvertently not allow multiple events to be dispatched asynchronously from a single action (since it seems to expect a synchronous payload object to be returned). So the action factory may actually hinder putting asynchronous requests in actions and force you to handle it in your stores</li></ul><h2 id=\"added-value\">Added Value</h2><ul><li>Reflux actually offers a ton of convenience methods in unique ways you won’t find in these other libraries. Your stores can listen to other stores and aggregate data across other stores. Creating actions and stores for those actions is particularly easy and can be done without a lot of code. The main impetus for Reflux was that the author didn’t like that stores basically had to compare strings to determine what action had taken place and what it should do, which is very fair. The result is that you don’t have to maintain a list of Constants (or compare strings) everywhere like in the Facebook examples - you basically create actions and you set up listeners on those actions, which honestly makes a lot of sense. A side effect of this is that you don’t need to maintain true Constants - multiple stores can essentially have the same API, the same action names, and there is no conflict as there would be with other Flux implementations.</li><li>Barracks boasts a minimal API surface area, which is actually something to behold - there are only 3 functions exposed. But it seems like, in these 3 functions, you can actually get everything you need</li><li>Delorean boasts that it is framework agnostic (React, Flight, Ractive, etc) and it is small (4K gzipped). It really is the only library that doesn’t seem straight up married to React in its demo code</li><li>Fluxy leverages Mori in stores for immutable data structures, so that your components’ shouldComponentUpdate can be ridiculously fast, but that also means you need to use Mori syntax for everything within your stores. It also keeps a history of your store state, so you basically get the ability to undo for free. As mentioned above, the idea of serviceActions basically gives you asynchronous actions for free, without any extra work</li><li>Fluxxor provides convenience create methods for a lot of setup as well as a StoreWatchMixin so that components can listen to Stores without a lot of boilerplate</li><li>McFly provides helper factories to facilitate the creation of actions and stores. It also contains a typical store listener mixin for components</li></ul><h2 id=\"shortcomings\">Shortcomings</h2><ul><li>Reflux seems a bit bulletproof at this point - it <em>does</em> stray from the “canonical” Facebook Flux architecture, but it still seems fully featured and, to my attention, there are no legitimate architectural concerns</li><li>Barracks makes a pretty large departure from the canonical Flux architecture by getting rid of action creators and tightly coupling the dispatcher and the stores together. This perhaps comes at the expense of flexibility. If your actions only ever affect one store, there’s no real problem, but if you hypothetically had a single action that should be handled by multiple stores, there’s no good, clean way to handle this (though I wonder how much this happens in the real world). Since Barracks is such a departure from all of these other implementations, if you needed something more conventional later, you’d probably have a hard time migrating and end up having to rewrite/rearchitecture much of your code</li><li>Delorean doesn’t stray much from the “canonical” Facebook Flux architecture - the only thing is that its stores aren’t singletons, but that’s rather nitpicky</li><li>Fluxy doesn’t stray much from the “canonical” Facebook Flux architecture</li><li>Fluxxor doesn’t stray much from the “canonical” Facebook Flux architecture</li><li>McFly’s helper factory to create actions basically makes you return one payload that will be dispatched (from the documentation, it looks like it needs to be synchronous)</li></ul><h2 id=\"takeaways\">Takeaways</h2><p>If you want to stick to Flux as purely as possible, use Fluxxor, Delorean, or McFly.</p><p>If you want convenience and novelty, Reflux and Fluxy will give you a pretty fun experience.</p><p>If you are feeling rebellious or want a truly minimal surface area, go with Barracks.</p><h2 id=\"corrections\">Corrections</h2><p>7/17/14: Corrections to Reflux</p><ul><li>Handling asynchronous requests had read: “Reflux’s design doesn’t exactly fit with the above paradigm, since an asynchronous read or write can’t be run from an action. It would have to be run from a Store - if other Stores were interested in whether the action succeeded or failed, you would either have to invoke follow up actions from within the Store or make interested Stores listen to changes in that Store, since that’s also a unique capability of Reflux.”</li><li>Shortcomings had read: “Reflux has a listenTo component mixin to listen to changes in your store, but you still have to do more work than other libraries - you still have to set up both onChange and onInit methods that I’d expect to be equivalent and could be abstracted away if you enforced the presence of a function like getStoreData in either the component or the Store.” Actually, Reflux provides a connect method that removes your need for onChange in general cases. You still may need to declare your initial state.</li><li>Shortcomings had also read: “As aforementioned, Reflux also does not have a straightforward solution to handling asynchronous requests” which was not true and was fixed under the “Handling Asynchronous Requests” section</li></ul>",
      "enclosure": [],
      "categories": []
    }]
  } 
}
