{
  "data": {
    "news": [{
      "title": "React and ag-Grid - the Perfect Match",
      "pubDate": "2016-01-28",
      "link": "https://reactjsnews.com/react-and-ag-grid",
      "guid": "https://reactjsnews.com/react-and-ag-grid",
      "author": "",
      "thumbnail": "",
      "description": "<h3 id=\"and-react\">And React?</h3><p>Now ag-Grid is providing an optional React component and React rendering. ag-Grd is fully in bed with React and treats React as a first class component - meaning if you are using React, ag-Grid is NOT using any other framework to get the job done.</p><p>React Components follow standard DOM interaction patterns using properties, events (callbacks) and an optional API for interacting with the components. React also uses immutability to assist state management. ag-Grid uses the same principles. ag-Grid’s core interface maps directly onto what is required by React making ag-Grid and React match perfectly.</p><p>To demonstrate, lets break down the provided <a href=\"https://github.com/ceolter/ag-grid-react-example\">example React and ag-Grid on Github</a>. (note: the example can be found running <a href=\"https://www.ag-grid.com/best-react-grid/index.php\">here</a>)</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span> <span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"c1\">// listen for events with React callbacks</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"c1\">// binding to properties within React State or Props</span><span class=\"nx\">showToolPanel</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">showToolPanel</span><span class=\"p\">}</span><span class=\"nx\">quickFilterText</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">quickFilterText</span><span class=\"p\">}</span><span class=\"nx\">icons</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">icons</span><span class=\"p\">}</span><span class=\"c1\">// column definitions and row data are immutable, the grid</span><span class=\"c1\">// will update when these lists change</span><span class=\"nx\">columnDefs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">columnDefs</span><span class=\"p\">}</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"c1\">// or provide props the old way with no binding</span><span class=\"nx\">rowSelection</span><span class=\"o\">=</span><span class=\"s2\">\"multiple\"</span><span class=\"nx\">enableSorting</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">enableFilter</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">rowHeight</span><span class=\"o\">=</span><span class=\"s2\">\"22\"</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><h3 id=\"component\">Component</h3><p>The AgGridReact class is the React Component that provides the interface into ag-Grid.</p><h3 id=\"configuration-mapped-to-props\">Configuration mapped to Props</h3><p>All of the configuration for ag-Grid is done through React props, as always taking values from the parent state and props. For example, the data to display is provided as the rowData property:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-properties/index.php\">properties documentation</a> for all the properties.</p><p>ag-Grid, behaving like a typical React application, treats rowData as immutable. So when you replace the rowData with a new array of data, the grid will pick this up automatically.</p><h3 id=\"events-mapped-to-callbacks\">Events mapped to Callbacks</h3><p>The ag-Grid component generates events to inform when things happen in the grid, such as rows are selected, cells are clicked etc. These events map onto React callbacks when you provide the callback through one of the props.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span> <span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-events/index.php\">events documentation</a> for all the events.</p><h3 id=\"api\">API</h3><p>The grid is a stateful component and needs to allow you to change it’s state. For example, the grid keeps state as to what rows are selected, and you need to tell it to change this state by telling it what rows to select. To do this, you use the grid’s API.</p><p>When the grid initialises it fires a ‘ready’ event that, as well as telling you the grid is ready, provides you with a reference to the API.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onReady</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">//store the api</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"c1\">// then sometime  later</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span><span class=\"p\">.</span><span class=\"nx\">selectAll</span><span class=\"p\">();</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/angular-grid-api/index.php\">API documentation</a> for the full API.</p><h3 id=\"in-grid-rendering\">In Grid Rendering</h3><p>And then ag-Grid then goes further, it embraces React for rendering. That means you can use React for custom cell rendering inside the grid. You provide ag-Grid with the React component and it knows what to do with to seamlessly integrate.</p><p>The following shows the skills cellRenderer from the sample application. As you can see, it’s pure React, short, to the point, compact, nice!</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">SkillsCellRenderer</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">skills</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"kd\">var</span> <span class=\"nx\">rowData</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span><span class=\"nx\">RefData</span><span class=\"p\">.</span><span class=\"nx\">IT_SKILLS</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nx\">skill</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rowData</span><span class=\"p\">.</span><span class=\"nx\">skills</span><span class=\"p\">[</span><span class=\"nx\">skill</span><span class=\"p\">])</span> <span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'images/skills/'</span> <span class=\"o\">+</span> <span class=\"nx\">skill</span> <span class=\"o\">+</span> <span class=\"s1\">'.png'</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">16</span><span class=\"p\">}</span> <span class=\"nx\">title</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;</span><span class=\"err\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><h3 id=\"summary\">Summary</h3><p>ag-Grid and React match up perfectly, giving you an enterprise data grid for use inside you React application.</p><p>To find out more about ag-Grid, visit <a href=\"http://www.ag-grid.com/\">www.ag-grid.com</a>",
      "content": "<h3 id=\"and-react\">And React?</h3><p>Now ag-Grid is providing an optional React component and React rendering. ag-Grd is fully in bed with React and treats React as a first class component - meaning if you are using React, ag-Grid is NOT using any other framework to get the job done.</p><p>React Components follow standard DOM interaction patterns using properties, events (callbacks) and an optional API for interacting with the components. React also uses immutability to assist state management. ag-Grid uses the same principles. ag-Grid’s core interface maps directly onto what is required by React making ag-Grid and React match perfectly.</p><p>To demonstrate, lets break down the provided <a href=\"https://github.com/ceolter/ag-grid-react-example\">example React and ag-Grid on Github</a>. (note: the example can be found running <a href=\"https://www.ag-grid.com/best-react-grid/index.php\">here</a>)</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span> <span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"c1\">// listen for events with React callbacks</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"c1\">// binding to properties within React State or Props</span><span class=\"nx\">showToolPanel</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">showToolPanel</span><span class=\"p\">}</span><span class=\"nx\">quickFilterText</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">quickFilterText</span><span class=\"p\">}</span><span class=\"nx\">icons</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">icons</span><span class=\"p\">}</span><span class=\"c1\">// column definitions and row data are immutable, the grid</span><span class=\"c1\">// will update when these lists change</span><span class=\"nx\">columnDefs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">columnDefs</span><span class=\"p\">}</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"c1\">// or provide props the old way with no binding</span><span class=\"nx\">rowSelection</span><span class=\"o\">=</span><span class=\"s2\">\"multiple\"</span><span class=\"nx\">enableSorting</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">enableFilter</span><span class=\"o\">=</span><span class=\"s2\">\"true\"</span><span class=\"nx\">rowHeight</span><span class=\"o\">=</span><span class=\"s2\">\"22\"</span><span class=\"sr\">/</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div><h3 id=\"component\">Component</h3><p>The AgGridReact class is the React Component that provides the interface into ag-Grid.</p><h3 id=\"configuration-mapped-to-props\">Configuration mapped to Props</h3><p>All of the configuration for ag-Grid is done through React props, as always taking values from the parent state and props. For example, the data to display is provided as the rowData property:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">rowData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">rowData</span><span class=\"p\">}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-properties/index.php\">properties documentation</a> for all the properties.</p><p>ag-Grid, behaving like a typical React application, treats rowData as immutable. So when you replace the rowData with a new array of data, the grid will pick this up automatically.</p><h3 id=\"events-mapped-to-callbacks\">Events mapped to Callbacks</h3><p>The ag-Grid component generates events to inform when things happen in the grid, such as rows are selected, cells are clicked etc. These events map onto React callbacks when you provide the callback through one of the props.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onRowSelected</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onRowSelected</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span> <span class=\"nx\">onCellClicked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onCellClicked</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-events/index.php\">events documentation</a> for all the events.</p><h3 id=\"api\">API</h3><p>The grid is a stateful component and needs to allow you to change it’s state. For example, the grid keeps state as to what rows are selected, and you need to tell it to change this state by telling it what rows to select. To do this, you use the grid’s API.</p><p>When the grid initialises it fires a ‘ready’ event that, as well as telling you the grid is ready, provides you with a reference to the API.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">AgGridReact</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onReady</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)}</span><span class=\"p\">...</span><span class=\"nx\">onReady</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">//store the api</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"c1\">// then sometime  later</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">gridApi</span><span class=\"p\">.</span><span class=\"nx\">selectAll</span><span class=\"p\">();</span></code></pre></div><p>Refer to <a href=\"https://www.ag-grid.com/angular-grid-api/index.php\">API documentation</a> for the full API.</p><h3 id=\"in-grid-rendering\">In Grid Rendering</h3><p>And then ag-Grid then goes further, it embraces React for rendering. That means you can use React for custom cell rendering inside the grid. You provide ag-Grid with the React component and it knows what to do with to seamlessly integrate.</p><p>The following shows the skills cellRenderer from the sample application. As you can see, it’s pure React, short, to the point, compact, nice!</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">SkillsCellRenderer</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span><span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">skills</span> <span class=\"o\">=</span> <span class=\"p\">[];</span><span class=\"kd\">var</span> <span class=\"nx\">rowData</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span><span class=\"nx\">RefData</span><span class=\"p\">.</span><span class=\"nx\">IT_SKILLS</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nx\">skill</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rowData</span><span class=\"p\">.</span><span class=\"nx\">skills</span><span class=\"p\">[</span><span class=\"nx\">skill</span><span class=\"p\">])</span> <span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'images/skills/'</span> <span class=\"o\">+</span> <span class=\"nx\">skill</span> <span class=\"o\">+</span> <span class=\"s1\">'.png'</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">16</span><span class=\"p\">}</span> <span class=\"nx\">title</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">skill</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span><span class=\"p\">}</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">skills</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span&gt;</span><span class=\"err\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div><h3 id=\"summary\">Summary</h3><p>ag-Grid and React match up perfectly, giving you an enterprise data grid for use inside you React application.</p><p>To find out more about ag-Grid, visit <a href=\"http://www.ag-grid.com/\">www.ag-grid.com</a>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Bring your animations to life with physics",
      "pubDate": "2016-01-13",
      "link": "https://reactjsnews.com/bring-your-animations-to-life-with-physics",
      "guid": "https://reactjsnews.com/bring-your-animations-to-life-with-physics",
      "author": "",
      "thumbnail": "",
      "description": "<h4 id=\"getting-started-with-animations\">Getting started with animations</h4> <p>To animate is to transition the user interface from one display to another. Animation enhances user experience, providing feeback to user actions and making screens that haven’t been introduced before easier to understand.</p> <p>An example can be seen with this <a href=\"http://www.material-ui.com/#/components/date-picker\">React Material UI datepicker</a>. The animations respond to user input and inform the user with transitions that show they are moving back or forward when they change month or select a date.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336337/ede568fe-bb68-11e5-8750-7cf50c46a7c7.gif\" alt=\"materialpicker\"></p> <p>This post will compare using CSS transitions based on time against using spring phsyics to animate transitions. We will use the example of transitioning a box from left to right (You could imagine this being a month view in a calendar that we slide in and out of view).</p> <script src=\"http://codepen.io/assets/embed/ei.js\"></script><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><h4 id=\"example-with-no-animation\">Example with no Animation</h4> <p>We will build on this example which doesn’t have any animation. Without animation the transition is jarring and doesn’t show the user where the item is moving from and to. Look at the code in the Babel tab and see that we use transform: translateX rather than setting the left position because left, top, right, bottom are positioned by the CPU and cause a repaint while items using translate are positioned by the GPU and therefore more performant.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"GoEKLN\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/GoEKLN\">Check out this Pen!</a> </pre> <h4 id=\"using-timed-css-animations\">Using timed CSS animations</h4> <p>A CSS transition can be added to the properties of an element with the CSS transition property. Per the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/transition\">Mozilla docs for transition</a>, we can pass the duration we want the transition to take and a cubic bezier timing function. In this case I have set the duration to 0.5s and used the default timing function of ease.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"xZrZJp\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/xZrZJp\">Check out this Pen!</a> </pre> <h4 id=\"cubic-bezier\">Cubic Bezier</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12335516/79b72d54-bb64-11e5-8fbe-b2a9e6715ea9.png\" alt=\"Cubic Bezier Curve\"></p> <p>A cubic bezier curve is a timing function that starts at position 0 and time 0 and ends at 1,1. It accepts four arguments (x1, y1, x2, y2), which are the two control points to determine the shape of the curve. As you can see above, the ease function accelerates at the start and then decelerates at the middle, causing the animation to ‘ease’ as it finishes. The ease function is just shorthand for cubic-bezier(0.25,0.1,0.25,1). If you want to prove this, re-run this example after changing line 18 to:</p> <div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">transition</span><span class=\"err\">:</span> <span class=\"s1\">'0.5s cubic-bezier(0.25, 0.1, 0.25, 1)'</span></code></pre> </div> <p>The <a href=\"http://cubic-bezier.com/\">cubic bezier site by Lea Verou</a> is a great resource for experimenting with different timing functions. Below I have compared a linear function against the ease function.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336020/f5c3568c-bb66-11e5-84e8-762a41ba4d58.gif\" alt=\"cubicbeziercom\"></p> <p>Chrome dev tools allow you to experiment with different curves and also control the speed of animations as seen below.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336063/4134261e-bb67-11e5-8bbd-4981028659a7.gif\" alt=\"chromebez\"></p> <h4 id=\"why-you-should-use-spring-physics-in-animations\">Why you should use spring physics in animations</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336758/ff68ac10-bb6a-11e5-9560-15737d665b4d.gif\" alt=\"damped_spring\"></p> <p>As cubic bezier functions only give you two points of control, it doesn’t give the developer enough control to model real life movement. However, by controlling the animation with Javascript, we have full control and can use Hooke’s law which expresses how springs extends and contract. Spring animation is already very popular and can be used to provide lively animations in iOS core animation, and in Facebook’s Pop and Rebound libraries.</p> <p>Look at the cubic bezier animations on the left taken from <a href=\"http://framerjs.com/learn/basics/animation/\">framerjs</a>, compared with the spring animation on the right. The spring animation has a bounce effect - which is not possible with a cubic bezier function. You could acheive this animation with CSS by using key frames, but you would have to hard code the key frame values and duration of the animation.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12362208/f52638fa-bc26-11e5-895e-59c0ad611928.gif\" alt=\"framer\"></p> <p>React Motion implements a terse API for you to use spring animation which can be used on the web and with React Native. You have the option to specify the start value (in this case, 0) and the spring physics values you want to animate to. React Motion runs in a request animation frame. The Motion component will keep calling your function to render your animated component with a style object that has the calculated values for each frame. In the example below I have destructured the x property and rendered it in the component.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"EPwWOg\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/EPwWOg\">Check out this Pen!</a> </pre> <h5 id=\"continuous-fluid-interfaces\">Continuous fluid interfaces</h5> <p>In the excellent talk on the <a href=\"https://www.youtube.com/watch?v=1tavDv5hXpo\">state animation in React</a>, Cheng Lou, the creator, highlighted a quote from a former UIKit engineer at Apple.</p>  <p>In the talk, Cheng used an example of animating an opening menu to illustrate this point - “For example, if you have a menu deploy animation that takes 500 milliseconds, and half-way the user clicks on something, and you toggle it back to its initial hidden state, why should this way back also be 500 milliseconds? And also, what should the curve be: ease-in, linear? It is not very clear”.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12363885/3f87eebc-bc30-11e5-9ceb-40e2ad34700f.gif\" alt=\"calendardemosmall\"></p> <p>The need for a fluid interface is what made me look into react-motion. We are currently building a calendar at <a href=\"http://fergusapp.com/\">Fergus</a> which requires the ability to respond to drag events and clicks moving the calendar in different directions and by different distances. When we prototyped this with CSS transitions, it was janky and felt slow.</p> <p>Compare how fluid the spring motion animation is against the CSS animations by clicking the ‘Run animation’ button multiple times in quick succession.</p> <pre class=\"codepen\" data-height=\"450\" data-type=\"result\" data-href=\"dGVvEJ\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/dGVvEJ\">Check out this Pen!</a> </pre> <h4 id=\"configuring-react-motion\">Configuring React Motion</h4> <p>The React Motion spring takes two arguments: stiffness and damping (which defaut to 120 and 17, respectively). Four <a href=\"https://github.com/chenglou/react-motion/blob/master/src/presets.js\">presets</a> are provided: noWobble, gentle, wobbly, and stiff. By adjusting the stiffness and damping below, you can watch how these factors change the animation.</p> <pre class=\"codepen\" data-height=\"300\" data-type=\"result\" data-href=\"OMxmQL\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/OMxmQL\">Check out this Pen!</a> </pre> <h4 id=\"when-to-use-css-animations\">When to use CSS Animations</h4> <p>As Cheng said in his talk, CSS animations are better for animations that you don’t want to stop or adjust after they are triggered - such as Twitter’s exploding heart animation. This is because CSS animations are more performant. React Motion does incur the cost of having your app re-rendered every animation frame which could be a problem if your application is not performant.</p>",
      "content": "<h4 id=\"getting-started-with-animations\">Getting started with animations</h4> <p>To animate is to transition the user interface from one display to another. Animation enhances user experience, providing feeback to user actions and making screens that haven’t been introduced before easier to understand.</p> <p>An example can be seen with this <a href=\"http://www.material-ui.com/#/components/date-picker\">React Material UI datepicker</a>. The animations respond to user input and inform the user with transitions that show they are moving back or forward when they change month or select a date.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336337/ede568fe-bb68-11e5-8750-7cf50c46a7c7.gif\" alt=\"materialpicker\"></p> <p>This post will compare using CSS transitions based on time against using spring phsyics to animate transitions. We will use the example of transitioning a box from left to right (You could imagine this being a month view in a calendar that we slide in and out of view).</p> <script src=\"http://codepen.io/assets/embed/ei.js\"></script><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><h4 id=\"example-with-no-animation\">Example with no Animation</h4> <p>We will build on this example which doesn’t have any animation. Without animation the transition is jarring and doesn’t show the user where the item is moving from and to. Look at the code in the Babel tab and see that we use transform: translateX rather than setting the left position because left, top, right, bottom are positioned by the CPU and cause a repaint while items using translate are positioned by the GPU and therefore more performant.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"GoEKLN\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/GoEKLN\">Check out this Pen!</a> </pre> <h4 id=\"using-timed-css-animations\">Using timed CSS animations</h4> <p>A CSS transition can be added to the properties of an element with the CSS transition property. Per the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/transition\">Mozilla docs for transition</a>, we can pass the duration we want the transition to take and a cubic bezier timing function. In this case I have set the duration to 0.5s and used the default timing function of ease.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"xZrZJp\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/xZrZJp\">Check out this Pen!</a> </pre> <h4 id=\"cubic-bezier\">Cubic Bezier</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12335516/79b72d54-bb64-11e5-8fbe-b2a9e6715ea9.png\" alt=\"Cubic Bezier Curve\"></p> <p>A cubic bezier curve is a timing function that starts at position 0 and time 0 and ends at 1,1. It accepts four arguments (x1, y1, x2, y2), which are the two control points to determine the shape of the curve. As you can see above, the ease function accelerates at the start and then decelerates at the middle, causing the animation to ‘ease’ as it finishes. The ease function is just shorthand for cubic-bezier(0.25,0.1,0.25,1). If you want to prove this, re-run this example after changing line 18 to:</p> <div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nx\">transition</span><span class=\"err\">:</span> <span class=\"s1\">'0.5s cubic-bezier(0.25, 0.1, 0.25, 1)'</span></code></pre> </div> <p>The <a href=\"http://cubic-bezier.com/\">cubic bezier site by Lea Verou</a> is a great resource for experimenting with different timing functions. Below I have compared a linear function against the ease function.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336020/f5c3568c-bb66-11e5-84e8-762a41ba4d58.gif\" alt=\"cubicbeziercom\"></p> <p>Chrome dev tools allow you to experiment with different curves and also control the speed of animations as seen below.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336063/4134261e-bb67-11e5-8bbd-4981028659a7.gif\" alt=\"chromebez\"></p> <h4 id=\"why-you-should-use-spring-physics-in-animations\">Why you should use spring physics in animations</h4> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336758/ff68ac10-bb6a-11e5-9560-15737d665b4d.gif\" alt=\"damped_spring\"></p> <p>As cubic bezier functions only give you two points of control, it doesn’t give the developer enough control to model real life movement. However, by controlling the animation with Javascript, we have full control and can use Hooke’s law which expresses how springs extends and contract. Spring animation is already very popular and can be used to provide lively animations in iOS core animation, and in Facebook’s Pop and Rebound libraries.</p> <p>Look at the cubic bezier animations on the left taken from <a href=\"http://framerjs.com/learn/basics/animation/\">framerjs</a>, compared with the spring animation on the right. The spring animation has a bounce effect - which is not possible with a cubic bezier function. You could acheive this animation with CSS by using key frames, but you would have to hard code the key frame values and duration of the animation.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12362208/f52638fa-bc26-11e5-895e-59c0ad611928.gif\" alt=\"framer\"></p> <p>React Motion implements a terse API for you to use spring animation which can be used on the web and with React Native. You have the option to specify the start value (in this case, 0) and the spring physics values you want to animate to. React Motion runs in a request animation frame. The Motion component will keep calling your function to render your animated component with a style object that has the calculated values for each frame. In the example below I have destructured the x property and rendered it in the component.</p> <pre class=\"codepen\" data-height=\"150\" data-type=\"result\" data-href=\"EPwWOg\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/EPwWOg\">Check out this Pen!</a> </pre> <h5 id=\"continuous-fluid-interfaces\">Continuous fluid interfaces</h5> <p>In the excellent talk on the <a href=\"https://www.youtube.com/watch?v=1tavDv5hXpo\">state animation in React</a>, Cheng Lou, the creator, highlighted a quote from a former UIKit engineer at Apple.</p>  <p>In the talk, Cheng used an example of animating an opening menu to illustrate this point - “For example, if you have a menu deploy animation that takes 500 milliseconds, and half-way the user clicks on something, and you toggle it back to its initial hidden state, why should this way back also be 500 milliseconds? And also, what should the curve be: ease-in, linear? It is not very clear”.</p> <p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12363885/3f87eebc-bc30-11e5-9ceb-40e2ad34700f.gif\" alt=\"calendardemosmall\"></p> <p>The need for a fluid interface is what made me look into react-motion. We are currently building a calendar at <a href=\"http://fergusapp.com/\">Fergus</a> which requires the ability to respond to drag events and clicks moving the calendar in different directions and by different distances. When we prototyped this with CSS transitions, it was janky and felt slow.</p> <p>Compare how fluid the spring motion animation is against the CSS animations by clicking the ‘Run animation’ button multiple times in quick succession.</p> <pre class=\"codepen\" data-height=\"450\" data-type=\"result\" data-href=\"dGVvEJ\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/dGVvEJ\">Check out this Pen!</a> </pre> <h4 id=\"configuring-react-motion\">Configuring React Motion</h4> <p>The React Motion spring takes two arguments: stiffness and damping (which defaut to 120 and 17, respectively). Four <a href=\"https://github.com/chenglou/react-motion/blob/master/src/presets.js\">presets</a> are provided: noWobble, gentle, wobbly, and stiff. By adjusting the stiffness and damping below, you can watch how these factors change the animation.</p> <pre class=\"codepen\" data-height=\"300\" data-type=\"result\" data-href=\"OMxmQL\" data-user=\"TomClarkson\" data-safe=\"true\"> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/OMxmQL\">Check out this Pen!</a> </pre> <h4 id=\"when-to-use-css-animations\">When to use CSS Animations</h4> <p>As Cheng said in his talk, CSS animations are better for animations that you don’t want to stop or adjust after they are triggered - such as Twitter’s exploding heart animation. This is because CSS animations are more performant. React Motion does incur the cost of having your app re-rendered every animation frame which could be a problem if your application is not performant.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Is There a React Equivalent for Angular’s ng-repeat?",
      "pubDate": "2016-1-3",
      "link": "https://reactjsnews.com/NgRepeat-Equivalent-in-React",
      "guid": "https://reactjsnews.com/NgRepeat-Equivalent-in-React",
      "author": "",
      "thumbnail": "",
      "description": "<p>This post originally appeared on my <a href=\"http://angulartoreact.com/ng-repeat-react-equivalent\">Angular to React</a> site where you’ll find more resources like this to help Angular Developers get up to speed quickly on React.</p><h1 id=\"is-there-a-react-equivalent-for-angulars-ng-repeat\">Is There a React Equivalent for Angular’s ng-repeat?</h1><h4 id=\"yes-react-doesnt-use-a-proprietary-construct-to-iterate-over-a-collection-of-data-instead-it-relies-on-native-javascript-iterators-to-generate-repeating-blocks-of-ui-keep-reading-below-for-code-samples-and-further-explanation\">Yes. React doesn’t use a proprietary construct to iterate over a collection of data. Instead, it relies on native Javascript iterators to generate repeating blocks of UI. Keep reading below for code samples and further explanation.</h4><p>If you’ve been developing Angular applications for any amount of time, you’ve likely used the <code class=\"highlighter-rouge\">ng-repeat</code> directive. Generating repeating blocks of UI from a data structure is a cornerstone of web development regardless of language or framework.</p><p>The AngularJS team wrapped up a really convenient and powerful piece of iterative magic in the <code class=\"highlighter-rouge\">ng-repeat</code> directive. With very little code, you can create dynamic lists that stay in sync with a collection of data. Just so we’re on the same page, here’s what the Angular code looks like:</p><h5 id=\"angularjs-code-sample-for-ng-repeat\">AngularJS Code Sample for <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>Assume you have an array like this:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Matthew\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mat.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Mark\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mrk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Luke\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/luk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/jhn.1\"</span> <span class=\"p\">}</span><span class=\"p\">];</span></code></pre></div><p>In Angular 1.x, to create a <code class=\"highlighter-rouge\">ul</code> with an <code class=\"highlighter-rouge\">li</code> for each item in the array you would put the following code in your controller:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s2\">\"NgRepeatDemoCtrl\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>Then, in your view, you could use the <code class=\"highlighter-rouge\">ng-repeat</code> directive like this:</p><div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span><span class=\"nt\">&lt;li</span> <span class=\"na\">ng-repeat=</span><span class=\"s\">\"item in items\"</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;a</span> <span class=\"na\">ng-href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;/a&gt;</span><span class=\"nt\">&lt;/li&gt;</span><span class=\"nt\">&lt;/ul&gt;</span></code></pre></div><h5 id=\"react-alternative-to-ng-repeat\">React Alternative to <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>To perform the same task in React you just need to think natively. Under the hood <code class=\"highlighter-rouge\">ng-repeat</code> is just using a native Javascript iterator. You can use the same sort of native iterator directly in React. For just example, I’ll use <code class=\"highlighter-rouge\">Array.map</code>. Here’s an example:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">RepeatModule</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">getDefaultProps</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">}</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"s2\">\"{item.name}\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"{item.link}\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>In this example, <code class=\"highlighter-rouge\">Array.map</code> iterates through every item contained in <code class=\"highlighter-rouge\">items</code> and executes a function that returns a DOM element. <em>(Technically, it’s a virtual DOM element, but that’s a different discussion.)</em> &nbsp; Every <code class=\"highlighter-rouge\">li</code> that is returned from inside of the map function gets added to a new array and finally returned as the value of the <code class=\"highlighter-rouge\">Array.map()</code> function. The result of that function is stored in the <code class=\"highlighter-rouge\">listItems</code> variable. When React calls the render method on our component, we generate an array of list items and then insert them into our <code class=\"highlighter-rouge\">ul</code> using a single pair of enclosing curly braces.</p><h5 id=\"try-it-out-yourself-using-this-jsfiddle\">Try It Out Yourself Using <a href=\"http://jsfiddle.net/zqef96hu/2/\">This JSFiddle</a></h5>",
      "content": "<p>This post originally appeared on my <a href=\"http://angulartoreact.com/ng-repeat-react-equivalent\">Angular to React</a> site where you’ll find more resources like this to help Angular Developers get up to speed quickly on React.</p><h1 id=\"is-there-a-react-equivalent-for-angulars-ng-repeat\">Is There a React Equivalent for Angular’s ng-repeat?</h1><h4 id=\"yes-react-doesnt-use-a-proprietary-construct-to-iterate-over-a-collection-of-data-instead-it-relies-on-native-javascript-iterators-to-generate-repeating-blocks-of-ui-keep-reading-below-for-code-samples-and-further-explanation\">Yes. React doesn’t use a proprietary construct to iterate over a collection of data. Instead, it relies on native Javascript iterators to generate repeating blocks of UI. Keep reading below for code samples and further explanation.</h4><p>If you’ve been developing Angular applications for any amount of time, you’ve likely used the <code class=\"highlighter-rouge\">ng-repeat</code> directive. Generating repeating blocks of UI from a data structure is a cornerstone of web development regardless of language or framework.</p><p>The AngularJS team wrapped up a really convenient and powerful piece of iterative magic in the <code class=\"highlighter-rouge\">ng-repeat</code> directive. With very little code, you can create dynamic lists that stay in sync with a collection of data. Just so we’re on the same page, here’s what the Angular code looks like:</p><h5 id=\"angularjs-code-sample-for-ng-repeat\">AngularJS Code Sample for <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>Assume you have an array like this:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Matthew\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mat.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Mark\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/mrk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Luke\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/luk.1\"</span> <span class=\"p\">},</span><span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"s2\">\"https://bible.com/1/jhn.1\"</span> <span class=\"p\">}</span><span class=\"p\">];</span></code></pre></div><p>In Angular 1.x, to create a <code class=\"highlighter-rouge\">ul</code> with an <code class=\"highlighter-rouge\">li</code> for each item in the array you would put the following code in your controller:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s2\">\"NgRepeatDemoCtrl\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"nx\">items</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>Then, in your view, you could use the <code class=\"highlighter-rouge\">ng-repeat</code> directive like this:</p><div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span><span class=\"nt\">&lt;li</span> <span class=\"na\">ng-repeat=</span><span class=\"s\">\"item in items\"</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;a</span> <span class=\"na\">ng-href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;/a&gt;</span><span class=\"nt\">&lt;/li&gt;</span><span class=\"nt\">&lt;/ul&gt;</span></code></pre></div><h5 id=\"react-alternative-to-ng-repeat\">React Alternative to <code class=\"highlighter-rouge\">ng-repeat</code></h5><p>To perform the same task in React you just need to think natively. Under the hood <code class=\"highlighter-rouge\">ng-repeat</code> is just using a native Javascript iterator. You can use the same sort of native iterator directly in React. For just example, I’ll use <code class=\"highlighter-rouge\">Array.map</code>. Here’s an example:</p><div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">RepeatModule</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createClass</span><span class=\"p\">({</span><span class=\"na\">getDefaultProps</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">items</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">}</span><span class=\"p\">},</span><span class=\"na\">render</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"kd\">var</span> <span class=\"nx\">listItems</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"s2\">\"{item.name}\"</span><span class=\"o\">&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"{item.link}\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/li</span><span class=\"err\">&gt;</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">listItems</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul</span><span class=\"err\">&gt;</span>    <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div><p>In this example, <code class=\"highlighter-rouge\">Array.map</code> iterates through every item contained in <code class=\"highlighter-rouge\">items</code> and executes a function that returns a DOM element. <em>(Technically, it’s a virtual DOM element, but that’s a different discussion.)</em> &nbsp; Every <code class=\"highlighter-rouge\">li</code> that is returned from inside of the map function gets added to a new array and finally returned as the value of the <code class=\"highlighter-rouge\">Array.map()</code> function. The result of that function is stored in the <code class=\"highlighter-rouge\">listItems</code> variable. When React calls the render method on our component, we generate an array of list items and then insert them into our <code class=\"highlighter-rouge\">ul</code> using a single pair of enclosing curly braces.</p><h5 id=\"try-it-out-yourself-using-this-jsfiddle\">Try It Out Yourself Using <a href=\"http://jsfiddle.net/zqef96hu/2/\">This JSFiddle</a></h5>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Using and Testing the Facebook API with React and Flux",
      "pubDate": "2015-12-05",
      "link": "https://reactjsnews.com/using-the-facebook-graph-api-with-react-and-flux",
      "guid": "https://reactjsnews.com/using-the-facebook-graph-api-with-react-and-flux",
      "author": "",
      "thumbnail": "",
      "description": "<p><strong>Clone the example code:</strong></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone git@github.com:subyraman/react-flux-facebook-api-example.git</code></pre></div><p><strong>Check out the running example at: http://reactfluxfbapi.herokuapp.com</strong></p><p>For giving us React and Flux, I’ve seen relatively little about integrating Facebook’s own Graph API with their development tools. The tools are so new that there’s precious little instruction out there about how to answer questions that are easier to answer with other architectures, like:</p><ul><li>Where do all those asynchronous API calls go?</li><li>How do I send the results of those API calls to the React component?</li><li>The Facebook API is available as a global object, but how do I test that in a headless Node environment?</li></ul><p>This sample code shows a possible model for integrating the Facebook Graph API with a React app, and provides a test suite that allows us to test these components in isolation.</p><p>First, let’s take a look at what the Flux architecture typically looks like.</p><p><img src=\"http://i.imgur.com/C3o9SaQ.png\" alt=\"Flux architecture\"></p><p>Though it took me a little while to understand, Flux seems to want us to rock the following model:</p><ul><li>1) API calls are handled in the Action Creators. When we want new data, a view component calls on an Action Creator.</li><li>2) We wait for the response from a remote server, then sends the data along with an Action Type (a type of signal) to the Dispatcher.</li><li>3) The Dispatcher passes the signal and data on to the appropriate Store.</li><li>4) The Store, well, stores the data we received. When data is updated, we emit an event.</li><li>5) This event from the Store is picked up by our view components. Our view components access data from the store, and render it out into beautiful HTML.</li></ul><p>The key thing here is that <strong>data flow is unidirectional</strong>. The View Component must not receive data directly from the Action Creator API, it must proceed to the Store (via the dispatcher), and then on to the View. This keeps our data stream organized and all of our components in sync with the data state.</p><p>Let’s dig into the code a little bit. I’ll show, as an example, how to log in a user to the Facebook API and render out that status.</p><h2 id=\"the-facebook-login-component\">The Facebook Login Component</h2><p>The component is simple, as it should be. It should not contain complex logic or data handling. They’re meant to be dumb, and treat them that way.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';class FacebookLogin extends React.Component {constructor(props) {super(props);}render() {return (&lt;button ref=\"loginButton\" onClick={this.didClickFacebookLoginButton}&gt;Log Into Facebook&lt;/button&gt;);}didClickFacebookLoginButton(e) {FacebookActionCreators.login()}}export default FacebookLogin;</code></pre></div><h2 id=\"the-action-creators\">The Action Creators</h2><p>For our Action Creators, we want to wrap the API and when we receive a response, we dispatch an <code class=\"highlighter-rouge\">actionType</code> along with the data. This frees us from having to use promises to return asychronous data; instead we use clearly defined signals that correspond to our action.</p><p>This is a simplistic example; we aren’t handling error cases, for example. When the user logs into Facebook, it relays the response data to the dispatcher, which contains information about the user’s id, the access token, and other information.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>login: () =&gt; {window.FB.login((response) =&gt; {if (response.status === 'connected') {FacebookDispatcher.dispatch({actionType: Constants.FACEBOOK_LOGGED_IN,data: response})}});},</code></pre></div><h3 id=\"the-dispatcher\">The Dispatcher</h3><p>It is nothing special. Flux contains all of the logic within the dispatcher, so it doesn’t need any special configuration. Just keep in mind that it is a singleton, and that there is only one instance of it in your app.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import {Dispatcher} from 'flux';const FacebookDispatcher = new Dispatcher();module.exports = FacebookDispatcher;</code></pre></div><h3 id=\"the-store\">The Store</h3><p>For the store, Flux suggests you extend the <code class=\"highlighter-rouge\">EventEmitter</code> module, which, as the name suggests, allows us to emit events to components that subscribe to the store. Here are the parts relevant for setting and getting the login data.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>class FacebookStore extends EventEmitter {constructor() {super()this.facebookAuthData = {};...}setFacebookAuthData(data) {this.facebookAuthData = data;this.emitChange();}get loggedIn() {if (!this.facebookAuthData) {return;}return this.facebookAuthData.status == 'connected';}...emitChange() {this.emit(FACEBOOK_CHANGE_EVENT);}addChangeListener(callback) {this.on(FACEBOOK_CHANGE_EVENT, callback);}removeChangeListener(callback) {this.removeListener(FACEBOOK_CHANGE_EVENT, callback);}}// initialize the store as a singletonconst facebookStore = new FacebookStore();</code></pre></div><p>React is agnostic to how we want to store our data. We can use Backbone models, simple JS objects, and so on. I am just storing the auth data in a simple object.</p><p>ES6 getters allow us to execute logic when a class attribute is accessed. For example, executing <code class=\"highlighter-rouge\">FacebookStore.loggedIn</code> will check if auth data is available, then test to see if the user is connected to return a boolean.</p><p>We include event handlers in our store. After data is set, a change is emitted. Components subscribe to changes, and register callbacks to execute.</p><p><strong>Next, we register the store with our dispatcher</strong>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>facebookStore.dispatchToken = FacebookDispatcher.register((action) =&gt; {...if (action.actionType == Constants.FACEBOOK_LOGGED_IN) {facebookStore.setFacebookAuthData(action.data);}...})</code></pre></div><p>After registration, the dispatcher will execute the above callback when the Action Creators dispatch an action. Dispatchers can handle more complex behavior, like waiting for another store to be updated before this one; we don’t need that here.</p><p>So the dispatcher has sent the store data, the store has updated itself with that data, and the store has emitted an event. What now?</p><h3 id=\"rendering-out-the-login-status\">Rendering out the Login Status</h3><p>Let’s check out the <code class=\"highlighter-rouge\">Main</code> component, the parent component of this simple example.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';import FacebookStore from '../stores/FacebookStore';import FacebookLogin from './FacebookLogin';import FacebookLogout from './FacebookLogout';...class Main extends React.Component {constructor(props) {super();}getFacebookState() {return {...loggedIn: FacebookStore.loggedIn,...}}componentDidMount() {FacebookActionCreators.initFacebook();FacebookStore.addChangeListener(() =&gt; this._onFacebookChange());}componentWillUnmount() {FacebookStore.removeChangeListener(this._onFacebookChange);}_onFacebookChange() {this.setState(this.getFacebookState());}render() {return (&lt;div&gt;{!this.state.loggedIn ? &lt;FacebookLogin /&gt; : null}{this.state.loggedIn ? &lt;FacebookLogout /&gt; : null}&lt;p&gt;Facebook logged in: {this.state.loggedIn ? 'true' : 'false'}&lt;/p&gt;...&lt;/div&gt;);}}export default Main;</code></pre></div><p>So, let’s step through a few things happening here:</p><ul><li>When the Component initializes (or ‘mounts’), the Facebook API is initialized.</li><li>The Component subscribes to the Store, through the <code class=\"highlighter-rouge\">addChangeListener</code> method.</li><li>The user clicks the Login button, calling the appropriate Action Creator for data.</li><li>When the Store sends an event signifying a change, the component updates itself with <code class=\"highlighter-rouge\">this.setState(this.getFacebookState())</code>.</li><li>When <code class=\"highlighter-rouge\">this.setState</code> is called, the <code class=\"highlighter-rouge\">render</code> method on itself and all child components are automatically called as well.</li></ul><h1 id=\"testing\">Testing</h1><p>Testing Flux components with the Facebook API presents some challenges, like:</p><ul><li>The store and dispatcher are singletons. Node caches its modules; how do we deal with that?</li><li>How do we mock the Facebook API?</li><li>How can we test without the overhead of a browser instance or PhantomJS?</li></ul><h3 id=\"setup\">Setup</h3><p>I am using Mocha+Chai+Sinon. The same general concepts should apply to testing with Jasmine.</p><p>First, we set up our fake DOM Check out <code class=\"highlighter-rouge\">setup.js</code>. Here we ask jsdom to set up our fake DOM for testing in Node.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import { assert } from 'chai';import { jsdom } from 'jsdom';global.assert = assert;global.document = jsdom('<span class=\"cp\">&lt;!doctype html&gt;</span><span class=\"nt\">&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span>');global.window = document.defaultView;global.navigator = {userAgent: 'node.js'};</code></pre></div><p><strong>Mocking the Facebook API</strong></p><p>Since the Facebook Graph object is a global object, we have to mock its methods globally. We create a factory for mocking out the Facebook API, in <code class=\"highlighter-rouge\">mock/facebook-api.js</code>. Every time that FacebookApi.setup() is called, new stubs are attached to the global window which can be monitored.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import sinon from 'sinon';const facebookApi = {setup() {global.window.FB = {login: sinon.stub(),logout: sinon.stub(),getLoginStatus: sinon.stub(),api: sinon.stub()}return global.window.FB;},teardown() {delete global.window.FB;}}module.exports = facebookApi;</code></pre></div><p><strong>Testing Components</strong></p><p>There are no curveballs here, aside from calling the mock Facebook API for new stubs. We use React’s great Test Utilities to render a component into a fake DOM, which we can perform various tests on.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import TestUtils from 'react-addons-test-utils';import MockFacebookApi from '../mock/facebook-api';import FacebookLogin from '../../../src/js/components/FacebookLogin';describe('login component', () =&gt; {let facebookLoginComponent;beforeEach(() =&gt; {facebookLoginComponent = TestUtils.renderIntoDocument(&lt;FacebookLogin /&gt;);MockFacebookApi.setup()})afterEach(() =&gt; {MockFacebookApi.teardown();})it('should call FB login on click',function() {const button = facebookLoginComponent.refs.loginButton;TestUtils.Simulate.click(button)assert.ok(global.window.FB.login.called)})})</code></pre></div><p><strong>Testing Stores</strong></p><p>This gets trickier.</p><ul><li>The Facebook store is a singleton, it is instantiated once through the app’s life.</li><li>Node caches its modules; issuing another <code class=\"highlighter-rouge\">require</code> will just pull the module from the cache.</li></ul><p>So if we just import it into the test module, we will run into problems; data state will build up in the Store, any stubbed or mocked functions will stay that way. In other words, we need a clean Store for every test; how do we do that? Check out <code class=\"highlighter-rouge\">utils/reload</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code> export default function (module) {delete require.cache[require.resolve(module)]return require(module)}</code></pre></div><p>We use Node’s internal API to delete the module from the cache, and import a new one. This ensures our modules are clean and newly instantiated as we need.</p><p>So let’s say we want to test that certain actions result in certain behavior from the store. For that, we need to capture the callback that is registered with the dispatcher. Here’s a sample:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    ...describe('dispatcher actions', () =&gt; {let FacebookStore;let FacebookDispatcher;let dispatchCallback;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.spy(FacebookDispatcher, 'register');FacebookStore = reload('../../../src/js/stores/FacebookStore')sinon.spy(FacebookStore, 'emitChange')// save the dispatch callback, so action effects on the store can be testeddispatchCallback = FacebookDispatcher.register.getCall(0).args[0]})afterEach(() =&gt; {FacebookDispatcher.register.restore()FacebookStore.emitChange.restore()})...it('should set facebook data after FB login', () =&gt; {const actionData = {actionType: Constants.FACEBOOK_LOGGED_IN,data: 'foo'}dispatchCallback(actionData)assert.equal(FacebookStore.facebookAuthData, 'foo');assert.equal(FacebookStore.emitChange.callCount, 1);})...</code></pre></div><p>Let’s step through what’s happening here.</p><ul><li>We reload the dispatcher. Remember, the dispatcher is also a singleton, there is one instance in our app. We want a fresh one that is going to be imported into the Store module.</li><li>We spy on the register method of the dispatcher, so we can capture the callback passed to it.</li><li>We reload the store. As the module is initialized, the store registers with the dispatcher and passes a callback to it.</li><li>We capture the callback, and now we can start testing it.</li></ul><p><strong>Testing Action Creators</strong></p><p>Again, we follow a similar pattern with action creators. Since the dispatcher is a singleton, we reload our target modules in order, and test accordingly.</p><p>We use Sinon’s <code class=\"highlighter-rouge\">callsArgWith</code> to pass an object to the <code class=\"highlighter-rouge\">FB.login</code> callback, which results in a dispatch message being sent out.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>describe('facebook action creators', () =&gt; {let FacebookDispatcher;let FacebookActionCreators;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.stub(FacebookDispatcher, 'dispatch')FacebookActionCreators = reload('../../../src/js/actions/FacebookActionCreators')MockFacebookApi.setup();})afterEach(() =&gt; {MockFacebookApi.teardown();})...it('should send a dispatch message after FB login connected', () =&gt; {const fbData = {'status': 'connected'}global.window.FB.login.callsArgWith(0, fbData)FacebookActionCreators.login()assert.ok(FacebookDispatcher.dispatch.calledOnce)const [{actionType, data}] = FacebookDispatcher.dispatch.getCall(0).argsassert.equal(Constants.FACEBOOK_LOGGED_IN, actionType)assert.equal(data, fbData)})...</code></pre></div><p>We run our tests with the following command, which compiles everything, runs our setup file, then our tests:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mocha -u tdd -r ./tests/setup --compilers js:babel-core/register ./tests/**/*Test.js</code></pre></div><p>That about covers it! If you have any questions, feel free to <a href=\"http://twitter.com/subyraman\">tweet them to me</a>.</p>",
      "content": "<p><strong>Clone the example code:</strong></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git clone git@github.com:subyraman/react-flux-facebook-api-example.git</code></pre></div><p><strong>Check out the running example at: http://reactfluxfbapi.herokuapp.com</strong></p><p>For giving us React and Flux, I’ve seen relatively little about integrating Facebook’s own Graph API with their development tools. The tools are so new that there’s precious little instruction out there about how to answer questions that are easier to answer with other architectures, like:</p><ul><li>Where do all those asynchronous API calls go?</li><li>How do I send the results of those API calls to the React component?</li><li>The Facebook API is available as a global object, but how do I test that in a headless Node environment?</li></ul><p>This sample code shows a possible model for integrating the Facebook Graph API with a React app, and provides a test suite that allows us to test these components in isolation.</p><p>First, let’s take a look at what the Flux architecture typically looks like.</p><p><img src=\"http://i.imgur.com/C3o9SaQ.png\" alt=\"Flux architecture\"></p><p>Though it took me a little while to understand, Flux seems to want us to rock the following model:</p><ul><li>1) API calls are handled in the Action Creators. When we want new data, a view component calls on an Action Creator.</li><li>2) We wait for the response from a remote server, then sends the data along with an Action Type (a type of signal) to the Dispatcher.</li><li>3) The Dispatcher passes the signal and data on to the appropriate Store.</li><li>4) The Store, well, stores the data we received. When data is updated, we emit an event.</li><li>5) This event from the Store is picked up by our view components. Our view components access data from the store, and render it out into beautiful HTML.</li></ul><p>The key thing here is that <strong>data flow is unidirectional</strong>. The View Component must not receive data directly from the Action Creator API, it must proceed to the Store (via the dispatcher), and then on to the View. This keeps our data stream organized and all of our components in sync with the data state.</p><p>Let’s dig into the code a little bit. I’ll show, as an example, how to log in a user to the Facebook API and render out that status.</p><h2 id=\"the-facebook-login-component\">The Facebook Login Component</h2><p>The component is simple, as it should be. It should not contain complex logic or data handling. They’re meant to be dumb, and treat them that way.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';class FacebookLogin extends React.Component {constructor(props) {super(props);}render() {return (&lt;button ref=\"loginButton\" onClick={this.didClickFacebookLoginButton}&gt;Log Into Facebook&lt;/button&gt;);}didClickFacebookLoginButton(e) {FacebookActionCreators.login()}}export default FacebookLogin;</code></pre></div><h2 id=\"the-action-creators\">The Action Creators</h2><p>For our Action Creators, we want to wrap the API and when we receive a response, we dispatch an <code class=\"highlighter-rouge\">actionType</code> along with the data. This frees us from having to use promises to return asychronous data; instead we use clearly defined signals that correspond to our action.</p><p>This is a simplistic example; we aren’t handling error cases, for example. When the user logs into Facebook, it relays the response data to the dispatcher, which contains information about the user’s id, the access token, and other information.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>login: () =&gt; {window.FB.login((response) =&gt; {if (response.status === 'connected') {FacebookDispatcher.dispatch({actionType: Constants.FACEBOOK_LOGGED_IN,data: response})}});},</code></pre></div><h3 id=\"the-dispatcher\">The Dispatcher</h3><p>It is nothing special. Flux contains all of the logic within the dispatcher, so it doesn’t need any special configuration. Just keep in mind that it is a singleton, and that there is only one instance of it in your app.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import {Dispatcher} from 'flux';const FacebookDispatcher = new Dispatcher();module.exports = FacebookDispatcher;</code></pre></div><h3 id=\"the-store\">The Store</h3><p>For the store, Flux suggests you extend the <code class=\"highlighter-rouge\">EventEmitter</code> module, which, as the name suggests, allows us to emit events to components that subscribe to the store. Here are the parts relevant for setting and getting the login data.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>class FacebookStore extends EventEmitter {constructor() {super()this.facebookAuthData = {};...}setFacebookAuthData(data) {this.facebookAuthData = data;this.emitChange();}get loggedIn() {if (!this.facebookAuthData) {return;}return this.facebookAuthData.status == 'connected';}...emitChange() {this.emit(FACEBOOK_CHANGE_EVENT);}addChangeListener(callback) {this.on(FACEBOOK_CHANGE_EVENT, callback);}removeChangeListener(callback) {this.removeListener(FACEBOOK_CHANGE_EVENT, callback);}}// initialize the store as a singletonconst facebookStore = new FacebookStore();</code></pre></div><p>React is agnostic to how we want to store our data. We can use Backbone models, simple JS objects, and so on. I am just storing the auth data in a simple object.</p><p>ES6 getters allow us to execute logic when a class attribute is accessed. For example, executing <code class=\"highlighter-rouge\">FacebookStore.loggedIn</code> will check if auth data is available, then test to see if the user is connected to return a boolean.</p><p>We include event handlers in our store. After data is set, a change is emitted. Components subscribe to changes, and register callbacks to execute.</p><p><strong>Next, we register the store with our dispatcher</strong>.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>facebookStore.dispatchToken = FacebookDispatcher.register((action) =&gt; {...if (action.actionType == Constants.FACEBOOK_LOGGED_IN) {facebookStore.setFacebookAuthData(action.data);}...})</code></pre></div><p>After registration, the dispatcher will execute the above callback when the Action Creators dispatch an action. Dispatchers can handle more complex behavior, like waiting for another store to be updated before this one; we don’t need that here.</p><p>So the dispatcher has sent the store data, the store has updated itself with that data, and the store has emitted an event. What now?</p><h3 id=\"rendering-out-the-login-status\">Rendering out the Login Status</h3><p>Let’s check out the <code class=\"highlighter-rouge\">Main</code> component, the parent component of this simple example.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import FacebookActionCreators from '../actions/FacebookActionCreators';import FacebookStore from '../stores/FacebookStore';import FacebookLogin from './FacebookLogin';import FacebookLogout from './FacebookLogout';...class Main extends React.Component {constructor(props) {super();}getFacebookState() {return {...loggedIn: FacebookStore.loggedIn,...}}componentDidMount() {FacebookActionCreators.initFacebook();FacebookStore.addChangeListener(() =&gt; this._onFacebookChange());}componentWillUnmount() {FacebookStore.removeChangeListener(this._onFacebookChange);}_onFacebookChange() {this.setState(this.getFacebookState());}render() {return (&lt;div&gt;{!this.state.loggedIn ? &lt;FacebookLogin /&gt; : null}{this.state.loggedIn ? &lt;FacebookLogout /&gt; : null}&lt;p&gt;Facebook logged in: {this.state.loggedIn ? 'true' : 'false'}&lt;/p&gt;...&lt;/div&gt;);}}export default Main;</code></pre></div><p>So, let’s step through a few things happening here:</p><ul><li>When the Component initializes (or ‘mounts’), the Facebook API is initialized.</li><li>The Component subscribes to the Store, through the <code class=\"highlighter-rouge\">addChangeListener</code> method.</li><li>The user clicks the Login button, calling the appropriate Action Creator for data.</li><li>When the Store sends an event signifying a change, the component updates itself with <code class=\"highlighter-rouge\">this.setState(this.getFacebookState())</code>.</li><li>When <code class=\"highlighter-rouge\">this.setState</code> is called, the <code class=\"highlighter-rouge\">render</code> method on itself and all child components are automatically called as well.</li></ul><h1 id=\"testing\">Testing</h1><p>Testing Flux components with the Facebook API presents some challenges, like:</p><ul><li>The store and dispatcher are singletons. Node caches its modules; how do we deal with that?</li><li>How do we mock the Facebook API?</li><li>How can we test without the overhead of a browser instance or PhantomJS?</li></ul><h3 id=\"setup\">Setup</h3><p>I am using Mocha+Chai+Sinon. The same general concepts should apply to testing with Jasmine.</p><p>First, we set up our fake DOM Check out <code class=\"highlighter-rouge\">setup.js</code>. Here we ask jsdom to set up our fake DOM for testing in Node.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import { assert } from 'chai';import { jsdom } from 'jsdom';global.assert = assert;global.document = jsdom('<span class=\"cp\">&lt;!doctype html&gt;</span><span class=\"nt\">&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span>');global.window = document.defaultView;global.navigator = {userAgent: 'node.js'};</code></pre></div><p><strong>Mocking the Facebook API</strong></p><p>Since the Facebook Graph object is a global object, we have to mock its methods globally. We create a factory for mocking out the Facebook API, in <code class=\"highlighter-rouge\">mock/facebook-api.js</code>. Every time that FacebookApi.setup() is called, new stubs are attached to the global window which can be monitored.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import sinon from 'sinon';const facebookApi = {setup() {global.window.FB = {login: sinon.stub(),logout: sinon.stub(),getLoginStatus: sinon.stub(),api: sinon.stub()}return global.window.FB;},teardown() {delete global.window.FB;}}module.exports = facebookApi;</code></pre></div><p><strong>Testing Components</strong></p><p>There are no curveballs here, aside from calling the mock Facebook API for new stubs. We use React’s great Test Utilities to render a component into a fake DOM, which we can perform various tests on.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>import React from 'react';import TestUtils from 'react-addons-test-utils';import MockFacebookApi from '../mock/facebook-api';import FacebookLogin from '../../../src/js/components/FacebookLogin';describe('login component', () =&gt; {let facebookLoginComponent;beforeEach(() =&gt; {facebookLoginComponent = TestUtils.renderIntoDocument(&lt;FacebookLogin /&gt;);MockFacebookApi.setup()})afterEach(() =&gt; {MockFacebookApi.teardown();})it('should call FB login on click',function() {const button = facebookLoginComponent.refs.loginButton;TestUtils.Simulate.click(button)assert.ok(global.window.FB.login.called)})})</code></pre></div><p><strong>Testing Stores</strong></p><p>This gets trickier.</p><ul><li>The Facebook store is a singleton, it is instantiated once through the app’s life.</li><li>Node caches its modules; issuing another <code class=\"highlighter-rouge\">require</code> will just pull the module from the cache.</li></ul><p>So if we just import it into the test module, we will run into problems; data state will build up in the Store, any stubbed or mocked functions will stay that way. In other words, we need a clean Store for every test; how do we do that? Check out <code class=\"highlighter-rouge\">utils/reload</code></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code> export default function (module) {delete require.cache[require.resolve(module)]return require(module)}</code></pre></div><p>We use Node’s internal API to delete the module from the cache, and import a new one. This ensures our modules are clean and newly instantiated as we need.</p><p>So let’s say we want to test that certain actions result in certain behavior from the store. For that, we need to capture the callback that is registered with the dispatcher. Here’s a sample:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>    ...describe('dispatcher actions', () =&gt; {let FacebookStore;let FacebookDispatcher;let dispatchCallback;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.spy(FacebookDispatcher, 'register');FacebookStore = reload('../../../src/js/stores/FacebookStore')sinon.spy(FacebookStore, 'emitChange')// save the dispatch callback, so action effects on the store can be testeddispatchCallback = FacebookDispatcher.register.getCall(0).args[0]})afterEach(() =&gt; {FacebookDispatcher.register.restore()FacebookStore.emitChange.restore()})...it('should set facebook data after FB login', () =&gt; {const actionData = {actionType: Constants.FACEBOOK_LOGGED_IN,data: 'foo'}dispatchCallback(actionData)assert.equal(FacebookStore.facebookAuthData, 'foo');assert.equal(FacebookStore.emitChange.callCount, 1);})...</code></pre></div><p>Let’s step through what’s happening here.</p><ul><li>We reload the dispatcher. Remember, the dispatcher is also a singleton, there is one instance in our app. We want a fresh one that is going to be imported into the Store module.</li><li>We spy on the register method of the dispatcher, so we can capture the callback passed to it.</li><li>We reload the store. As the module is initialized, the store registers with the dispatcher and passes a callback to it.</li><li>We capture the callback, and now we can start testing it.</li></ul><p><strong>Testing Action Creators</strong></p><p>Again, we follow a similar pattern with action creators. Since the dispatcher is a singleton, we reload our target modules in order, and test accordingly.</p><p>We use Sinon’s <code class=\"highlighter-rouge\">callsArgWith</code> to pass an object to the <code class=\"highlighter-rouge\">FB.login</code> callback, which results in a dispatch message being sent out.</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>describe('facebook action creators', () =&gt; {let FacebookDispatcher;let FacebookActionCreators;beforeEach(() =&gt; {FacebookDispatcher = reload('../../../src/js/dispatcher/FacebookDispatcher')sinon.stub(FacebookDispatcher, 'dispatch')FacebookActionCreators = reload('../../../src/js/actions/FacebookActionCreators')MockFacebookApi.setup();})afterEach(() =&gt; {MockFacebookApi.teardown();})...it('should send a dispatch message after FB login connected', () =&gt; {const fbData = {'status': 'connected'}global.window.FB.login.callsArgWith(0, fbData)FacebookActionCreators.login()assert.ok(FacebookDispatcher.dispatch.calledOnce)const [{actionType, data}] = FacebookDispatcher.dispatch.getCall(0).argsassert.equal(Constants.FACEBOOK_LOGGED_IN, actionType)assert.equal(data, fbData)})...</code></pre></div><p>We run our tests with the following command, which compiles everything, runs our setup file, then our tests:</p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mocha -u tdd -r ./tests/setup --compilers js:babel-core/register ./tests/**/*Test.js</code></pre></div><p>That about covers it! If you have any questions, feel free to <a href=\"http://twitter.com/subyraman\">tweet them to me</a>.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "How to Structure a React Project?",
      "pubDate": "2015-11-30",
      "link": "https://reactjsnews.com/structuring-react-projects",
      "guid": "https://reactjsnews.com/structuring-react-projects",
      "author": "",
      "thumbnail": "",
      "description": "<p><strong>Editor’s Note:</strong> Please check out the <a href=\"http://www.reactindiebundle.com/\">React Indie Bundle</a>. Juho and many other members of the React community help put it together. All of the proceeds go towards awesome people in our community.</p><p>Programming is a bit like gardening. While trying to keep the bugs out, we prefer to keep everything neat and organized lest we want to end up in the jungle. A poor structure just slows us down and makes it easier for bugs to crawl into the system.</p><p>There are multiple ways to structure your project. I believe it is far better to evolve the structure as you go rather than to stick with some dogma. I will go through some basic approaches next to provide some food for thought.</p><h2 id=\"everything-in-one-file\">Everything in One File</h2><p>The simplest of projects can fit into a single file. This is how I prefer to deal with my <a href=\"http://survivejs.com/webpack_react/developing_with_webpack/\">Webpack configuration</a>. The greatest benefit of this approach is that you have everything you need in a single file. If you organize your code from top to down, this can be a legit approach.</p><p>You could start working on a React project in a similar manner. As you are prototyping, you simply stub out your components in a single file as you are trying to figure out the hierarchy. As the file grows, this will become cumbersome, though. For example dealing with testing will be harder than it should. Merges will be problematic.</p><h2 id=\"multiple-files\">Multiple Files</h2><p>The obvious way to solve this problem is to start splitting things up. You could begin by pushing your components to separate files like this:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; └── Note.jsx├── index.jsx└── main.css</code></pre></div><p>Here <em>index.jsx</em> works as the entry point of the application. It uses <code class=\"highlighter-rouge\">ReactDOM.render</code> to render <code class=\"highlighter-rouge\">App</code> and gets the party started. <code class=\"highlighter-rouge\">App</code> in turn does something interesting with <code class=\"highlighter-rouge\">Note</code>. If I wanted yet another component, you would simply add it below <code class=\"highlighter-rouge\">/components</code>.</p><p>If you wanted to test your components, you would add a separate directory for tests and develop them there. You could even try a test driven approach and think through your component constraints before implementing them.</p><p>You can get quite far with this basic structure. It does have its limits, though. How to deal with styling for instance? That <em>main.css</em> could grow quite big. That’s a scary prospect.</p><h2 id=\"components-in-their-own-directories\">Components in Their Own Directories</h2><p>This problem can be solved by adding more structure the system. Here’s what you could end up with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App│&nbsp;&nbsp; │&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app.css│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app_test.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; └── index.js│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx└── main.css</code></pre></div><ul><li>Starting the component names (i.e., <em>App.jsx</em>) with an uppercase letter makes them easy to discover. The <em>index.js</em> files provide us neat entry points to the files so they are easy to consume from elsewhere.</li><li>Each component is a self-contained entity now. We can use for example <a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> to underline this point. Extracting these components from the project would be easy now given how self-contained they are.</li><li>The tests related to each component are trivial to find now. We still might want to have a <code class=\"highlighter-rouge\">/tests</code> directory at the project root in order to deal with higher level tests.</li></ul><p>Of course real projects have more complexity than this and the current structure would start to break down with that. Where would you fit your views?</p><h2 id=\"adding-views-to-the-mix\">Adding Views to the Mix</h2><p>This is likely where opinions begin to diverge. I’ll let you duke it out at the comments. Here’s a structure I would feel comfortable with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; ├── Routes│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Routes.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; └── routes_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx├── main.css└── views├── Home│&nbsp;&nbsp; ├── Home.jsx│&nbsp;&nbsp; ├── home.css│&nbsp;&nbsp; ├── home_test.jsx│&nbsp;&nbsp; └── index.js├── Register│&nbsp;&nbsp; ├── Register.jsx│&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; ├── register.css│&nbsp;&nbsp; └── register_test.jsx└── index.js</code></pre></div><p>As we have routing in place now, <code class=\"highlighter-rouge\">App</code> became redundant. Most likely some view takes care of its responsibilities now. They simply follow our routing rules and consume components based on their needs.</p><p>This structure can scale far further but even it has limits as the project grows. I would suggest adding a concept like “features” between the views and the components. A feature is a component that aggregates them somehow and forms, well, a feature.</p><h2 id=\"dealing-with-data-concerns\">Dealing with Data Concerns</h2><p>Given most useful applications have to deal with data somehow, our current structure might not quite be enough yet. A lot depends on what kind of architecture you choose. It may make sense to push some of the data concerns within the current structure. Or you may introduce new root level directories such as <em>/actions</em>, <em>/constants</em>, <em>/libs</em>, <em>/reducers</em>, <em>/stores</em>, just to give you some idea.</p><h2 id=\"conclusion\">Conclusion</h2><p>There isn’t one right way to structure your projects. Rather, you should be pragmatic. Sometimes just restructuring a project can help you to bring clarity to it and make it more understandable to yourself and others. I’m very curious to hear what kind of structuring you prefer in your React projects and why. Feel free to comment below.</p><p>In order to make it easier to dive into the world of React, we’ve prepared <a href=\"http://www.reactindiebundle.com/\">a special bundle</a> with material from indie authors. It’s available for a limited time. If you want to deepen your React knowledge, it’s a good time to pick it up. I hope you enjoy the books, videos, and consulting included.</p>",
      "content": "<p><strong>Editor’s Note:</strong> Please check out the <a href=\"http://www.reactindiebundle.com/\">React Indie Bundle</a>. Juho and many other members of the React community help put it together. All of the proceeds go towards awesome people in our community.</p><p>Programming is a bit like gardening. While trying to keep the bugs out, we prefer to keep everything neat and organized lest we want to end up in the jungle. A poor structure just slows us down and makes it easier for bugs to crawl into the system.</p><p>There are multiple ways to structure your project. I believe it is far better to evolve the structure as you go rather than to stick with some dogma. I will go through some basic approaches next to provide some food for thought.</p><h2 id=\"everything-in-one-file\">Everything in One File</h2><p>The simplest of projects can fit into a single file. This is how I prefer to deal with my <a href=\"http://survivejs.com/webpack_react/developing_with_webpack/\">Webpack configuration</a>. The greatest benefit of this approach is that you have everything you need in a single file. If you organize your code from top to down, this can be a legit approach.</p><p>You could start working on a React project in a similar manner. As you are prototyping, you simply stub out your components in a single file as you are trying to figure out the hierarchy. As the file grows, this will become cumbersome, though. For example dealing with testing will be harder than it should. Merges will be problematic.</p><h2 id=\"multiple-files\">Multiple Files</h2><p>The obvious way to solve this problem is to start splitting things up. You could begin by pushing your components to separate files like this:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; └── Note.jsx├── index.jsx└── main.css</code></pre></div><p>Here <em>index.jsx</em> works as the entry point of the application. It uses <code class=\"highlighter-rouge\">ReactDOM.render</code> to render <code class=\"highlighter-rouge\">App</code> and gets the party started. <code class=\"highlighter-rouge\">App</code> in turn does something interesting with <code class=\"highlighter-rouge\">Note</code>. If I wanted yet another component, you would simply add it below <code class=\"highlighter-rouge\">/components</code>.</p><p>If you wanted to test your components, you would add a separate directory for tests and develop them there. You could even try a test driven approach and think through your component constraints before implementing them.</p><p>You can get quite far with this basic structure. It does have its limits, though. How to deal with styling for instance? That <em>main.css</em> could grow quite big. That’s a scary prospect.</p><h2 id=\"components-in-their-own-directories\">Components in Their Own Directories</h2><p>This problem can be solved by adding more structure the system. Here’s what you could end up with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── App│&nbsp;&nbsp; │&nbsp;&nbsp; ├── App.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app.css│&nbsp;&nbsp; │&nbsp;&nbsp; ├── app_test.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; └── index.js│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx└── main.css</code></pre></div><ul><li>Starting the component names (i.e., <em>App.jsx</em>) with an uppercase letter makes them easy to discover. The <em>index.js</em> files provide us neat entry points to the files so they are easy to consume from elsewhere.</li><li>Each component is a self-contained entity now. We can use for example <a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> to underline this point. Extracting these components from the project would be easy now given how self-contained they are.</li><li>The tests related to each component are trivial to find now. We still might want to have a <code class=\"highlighter-rouge\">/tests</code> directory at the project root in order to deal with higher level tests.</li></ul><p>Of course real projects have more complexity than this and the current structure would start to break down with that. Where would you fit your views?</p><h2 id=\"adding-views-to-the-mix\">Adding Views to the Mix</h2><p>This is likely where opinions begin to diverge. I’ll let you duke it out at the comments. Here’s a structure I would feel comfortable with:</p><div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>app <span class=\"nv\">$ </span>tree.├── components│&nbsp;&nbsp; ├── Note│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Note.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; ├── note.css│&nbsp;&nbsp; │&nbsp;&nbsp; └── note_test.jsx│&nbsp;&nbsp; ├── Routes│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Routes.jsx│&nbsp;&nbsp; │&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; │&nbsp;&nbsp; └── routes_test.jsx│&nbsp;&nbsp; └── index.js├── index.jsx├── main.css└── views├── Home│&nbsp;&nbsp; ├── Home.jsx│&nbsp;&nbsp; ├── home.css│&nbsp;&nbsp; ├── home_test.jsx│&nbsp;&nbsp; └── index.js├── Register│&nbsp;&nbsp; ├── Register.jsx│&nbsp;&nbsp; ├── index.js│&nbsp;&nbsp; ├── register.css│&nbsp;&nbsp; └── register_test.jsx└── index.js</code></pre></div><p>As we have routing in place now, <code class=\"highlighter-rouge\">App</code> became redundant. Most likely some view takes care of its responsibilities now. They simply follow our routing rules and consume components based on their needs.</p><p>This structure can scale far further but even it has limits as the project grows. I would suggest adding a concept like “features” between the views and the components. A feature is a component that aggregates them somehow and forms, well, a feature.</p><h2 id=\"dealing-with-data-concerns\">Dealing with Data Concerns</h2><p>Given most useful applications have to deal with data somehow, our current structure might not quite be enough yet. A lot depends on what kind of architecture you choose. It may make sense to push some of the data concerns within the current structure. Or you may introduce new root level directories such as <em>/actions</em>, <em>/constants</em>, <em>/libs</em>, <em>/reducers</em>, <em>/stores</em>, just to give you some idea.</p><h2 id=\"conclusion\">Conclusion</h2><p>There isn’t one right way to structure your projects. Rather, you should be pragmatic. Sometimes just restructuring a project can help you to bring clarity to it and make it more understandable to yourself and others. I’m very curious to hear what kind of structuring you prefer in your React projects and why. Feel free to comment below.</p><p>In order to make it easier to dive into the world of React, we’ve prepared <a href=\"http://www.reactindiebundle.com/\">a special bundle</a> with material from indie authors. It’s available for a limited time. If you want to deepen your React knowledge, it’s a good time to pick it up. I hope you enjoy the books, videos, and consulting included.</p>",
      "enclosure": [],
      "categories": []
    }, {
      "title": "Testing Components, The Easy Way",
      "pubDate": "2015-09-19",
      "link": "https://reactjsnews.com/testing-the-easy-way",
      "guid": "https://reactjsnews.com/testing-the-easy-way",
      "author": "",
      "thumbnail": "",
      "description": "<p>You may have seen Darin’s post on <a href=\"http://reactjsnews.com/testing-in-react/\">testing in React</a> last month. We work together at the same company. In the past couple of weeks I’ve realized that I really <em>hate</em> how annoying it is to setup and write tests for components.</p><p>##How We Used To Do Tests</p><p>With every new project we start, we have to include jsdom and set that up in a setup.js file that will be ran before each of our tests. If you take a look at <a href=\"http://reactjsnews.com/testing-in-react/\">his post</a>, you’ll see that process very clearly. Not only were we including this file in every project, our tests were not easy to follow. Take a look:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should generate a login form'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">loginForm</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">inputs</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'input'</span><span class=\"p\">);</span><span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">inputs</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Even if you’re someone who uses the <a href=\"https://facebook.github.io/react/docs/test-utils.html\">React Test Utils</a> daily, it still takes a second to realize what’s going on here. We’re rendering the component, finding all the inputs, and finding one button.</p><p>##Is There A Better Way?</p><p>I thought to myself, “Why isn’t there an easier syntax for this?” Welcome to the world of <a href=\"https://github.com/Legitcode/tests\">legit-tests</a>:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">button</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">})</span></code></pre></div><p>This is the exact same test as above, but so much easier for anyone, even someone new to testing, to reason about. We’re testing the <code class=\"highlighter-rouge\">NewSession</code> component, finding inputs and buttons, then testing them! Not only is this a much nicer syntax, but the library includes <code class=\"highlighter-rouge\">jsdom</code> and exposes React so that in your test’s file you no longer need to setup jsdom, or include React in order to use the jsx syntax in the Test function.</p><p>##That’s A Pretty Basic Example…</p><p>What if you wanted to handle changing the component’s state, simulate a click, or change the values of an input field? I built <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> to be easily extendable. There are a few <a href=\"https://github.com/Legitcode/tests/wiki/Bundled-Middleware\">built in pieces of middleware</a>. Let’s take a look at changing the component’s state and simulating a click.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">spy</span> <span class=\"o\">=</span> <span class=\"nx\">sinon</span><span class=\"p\">.</span><span class=\"nx\">spy</span><span class=\"p\">();</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">TestComponent</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">spy</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">Find</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'click'</span><span class=\"p\">,</span> <span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'button'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"s1\">'changed!'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">instance</span><span class=\"p\">})</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">spy</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"s1\">'changed!'</span><span class=\"p\">)</span><span class=\"p\">})</span></code></pre></div><p>Usually I wouldn’t recommend chaining too many things together. If I was simulating a click I wouldn’t also change the state in that same test, but it’s ultimately whatever you prefer.</p><p>##How Do I Build My Own Middleware?</p><p>If you take a look at the <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> readme, you can find out more. Here’s an example piece of middleware by <a href=\"https://github.com/geowarin/boot-react/blob/frontend-tests/frontend/test/components/LoginPage.spec.js\">geowarin</a> that changes the value of some inputs:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">ChangeValues</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">let</span> <span class=\"nx\">elements</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">helpers</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">];</span><span class=\"nx\">elements</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">];</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">LoginPage</span> <span class=\"p\">{...</span><span class=\"nx\">props</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">ChangeValues</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">elements</span><span class=\"p\">:</span> <span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"na\">values</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">]})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'submit'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>##What Does This Force Me To Use?</p><p>That’s a good question! In each test you’ve seen me reference <code class=\"highlighter-rouge\">expect</code>. Well the only thing <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> forces on you is jsdom, React (along with the React Test Utils). We still use Mocha to describe our tests and expect / chai to write our assertions as seen above. You’re free to use whatever you like. This library is meant to handle the rendering and testing of your components, the rest is up to you!</p><p>##What’s Next</p><p>I hope this library is as useful for others as it is for me. React 0.14 will be coming out shortly and some things will need to be reworked in the background, but the way the library works now won’t be changing. If you have any useful middleware or want to contribute, feel free to send PR’s <a href=\"https://github.com/Legitcode/tests\">on github</a> or leave a comment below.</p>",
      "content": "<p>You may have seen Darin’s post on <a href=\"http://reactjsnews.com/testing-in-react/\">testing in React</a> last month. We work together at the same company. In the past couple of weeks I’ve realized that I really <em>hate</em> how annoying it is to setup and write tests for components.</p><p>##How We Used To Do Tests</p><p>With every new project we start, we have to include jsdom and set that up in a setup.js file that will be ran before each of our tests. If you take a look at <a href=\"http://reactjsnews.com/testing-in-react/\">his post</a>, you’ll see that process very clearly. Not only were we including this file in every project, our tests were not easy to follow. Take a look:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should generate a login form'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">loginForm</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">renderIntoDocument</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;</span>  <span class=\"nx\">inputs</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">scryRenderedDOMComponentsWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'input'</span><span class=\"p\">);</span><span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">TestUtils</span><span class=\"p\">.</span><span class=\"nx\">findRenderedDOMComponentWithTag</span><span class=\"p\">(</span><span class=\"nx\">loginForm</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">inputs</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>Even if you’re someone who uses the <a href=\"https://facebook.github.io/react/docs/test-utils.html\">React Test Utils</a> daily, it still takes a second to realize what’s going on here. We’re rendering the component, finding all the inputs, and finding one button.</p><p>##Is There A Better Way?</p><p>I thought to myself, “Why isn’t there an easier syntax for this?” Welcome to the world of <a href=\"https://github.com/Legitcode/tests\">legit-tests</a>:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">NewSession</span> <span class=\"nx\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">button</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span><span class=\"p\">})</span></code></pre></div><p>This is the exact same test as above, but so much easier for anyone, even someone new to testing, to reason about. We’re testing the <code class=\"highlighter-rouge\">NewSession</code> component, finding inputs and buttons, then testing them! Not only is this a much nicer syntax, but the library includes <code class=\"highlighter-rouge\">jsdom</code> and exposes React so that in your test’s file you no longer need to setup jsdom, or include React in order to use the jsx syntax in the Test function.</p><p>##That’s A Pretty Basic Example…</p><p>What if you wanted to handle changing the component’s state, simulate a click, or change the values of an input field? I built <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> to be easily extendable. There are a few <a href=\"https://github.com/Legitcode/tests/wiki/Bundled-Middleware\">built in pieces of middleware</a>. Let’s take a look at changing the component’s state and simulating a click.</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">spy</span> <span class=\"o\">=</span> <span class=\"nx\">sinon</span><span class=\"p\">.</span><span class=\"nx\">spy</span><span class=\"p\">();</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">TestComponent</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">spy</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">Find</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'click'</span><span class=\"p\">,</span> <span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'button'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"s1\">'changed!'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(({</span><span class=\"nx\">instance</span><span class=\"p\">})</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">spy</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"s1\">'changed!'</span><span class=\"p\">)</span><span class=\"p\">})</span></code></pre></div><p>Usually I wouldn’t recommend chaining too many things together. If I was simulating a click I wouldn’t also change the state in that same test, but it’s ultimately whatever you prefer.</p><p>##How Do I Build My Own Middleware?</p><p>If you take a look at the <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> readme, you can find out more. Here’s an example piece of middleware by <a href=\"https://github.com/geowarin/boot-react/blob/frontend-tests/frontend/test/components/LoginPage.spec.js\">geowarin</a> that changes the value of some inputs:</p><div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">ChangeValues</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"kd\">let</span> <span class=\"nx\">elements</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">helpers</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">elements</span><span class=\"p\">];</span><span class=\"nx\">elements</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">getDOMNode</span><span class=\"p\">().</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">];</span><span class=\"p\">});</span><span class=\"p\">}</span><span class=\"nx\">Test</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">LoginPage</span> <span class=\"p\">{...</span><span class=\"nx\">props</span><span class=\"p\">}</span><span class=\"sr\">/&gt;</span><span class=\"err\">)</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">ChangeValues</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">elements</span><span class=\"p\">:</span> <span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"na\">values</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">]})</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">)</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">({</span><span class=\"na\">element</span><span class=\"p\">:</span> <span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"s1\">'submit'</span><span class=\"p\">})</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalledWith</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>##What Does This Force Me To Use?</p><p>That’s a good question! In each test you’ve seen me reference <code class=\"highlighter-rouge\">expect</code>. Well the only thing <a href=\"https://github.com/Legitcode/tests\">legit-tests</a> forces on you is jsdom, React (along with the React Test Utils). We still use Mocha to describe our tests and expect / chai to write our assertions as seen above. You’re free to use whatever you like. This library is meant to handle the rendering and testing of your components, the rest is up to you!</p><p>##What’s Next</p><p>I hope this library is as useful for others as it is for me. React 0.14 will be coming out shortly and some things will need to be reworked in the background, but the way the library works now won’t be changing. If you have any useful middleware or want to contribute, feel free to send PR’s <a href=\"https://github.com/Legitcode/tests\">on github</a> or leave a comment below.</p>",
      "enclosure": [],
      "categories": []
    }]
  }
}
